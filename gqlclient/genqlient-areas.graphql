# Create area type and return identifiers.
mutation createAreaType($token: String!, $name: String, $description: String, 
  $imageUrl: String, $icon: String, $backgroundColor: String, $foregroundColor: String, $borderColor: String, $metadata: String) {
  createAreaType(request: { 
    token: $token,
    name: $name,
    description: $description,
    imageUrl: $imageUrl,
    icon: $icon,
    backgroundColor: $backgroundColor,
    foregroundColor: $foregroundColor,
    borderColor: $borderColor,
    metadata: $metadata
  }) {
    id
    token
  }
}

# Get area types by unique token.
query getAreaTypesByToken($tokens: [String!]!) {
  areaTypesByToken(tokens: $tokens) {
    id
    createdAt
    updatedAt
    deletedAt
    token
    name
    description
    imageUrl
    icon
    backgroundColor
    foregroundColor
    borderColor
    metadata
  }
}

# List area types that match criteria.
query listAreaTypes($pageNumber: Int!, $pageSize: Int!) {
  areaTypes(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      id
      createdAt
      updatedAt
      deletedAt
      token
      name
      description
      imageUrl
      icon
      backgroundColor
      foregroundColor
      borderColor
      metadata
    }
    pagination {
      pageStart
      pageEnd
      totalRecords
    }
  }
}

# Create area and return identifiers.
mutation createArea($token: String!, $areaTypeToken: String!, $name: String, $description: String, $metadata: String) {
  createArea(request: { 
    token: $token, 
    areaTypeToken: $areaTypeToken,
    name: $name,
    description: $description,
    metadata: $metadata
  }) {
    id
    token
  }
}

# Get areas by unique token.
query getAreasByToken($tokens: [String!]!) {
  areasByToken(tokens: $tokens) {
    id
    createdAt
    updatedAt
    deletedAt
    token
    name
    description
    areaType {
      token
      name
      description
    }
    metadata
  }
}

# List areas that match criteria.
query listAreas($pageNumber: Int!, $pageSize: Int!) {
  areas(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      id
      createdAt
      updatedAt
      deletedAt
      token
      name
      description
      areaType {
        token
        name
        description
      }
      metadata
    }
    pagination {
      pageStart
      pageEnd
      totalRecords
    }
  }
}

# Create area relationship type and return identifiers.
mutation createAreaRelationshipType($token: String!, $name: String, $description: String, $metadata: String) {
  createAreaRelationshipType(request: { 
    token: $token,
    name: $name,
    description: $description,
    metadata: $metadata
  }) {
    id
    token
  }
}

# Get area relationship types by unique token.
query getAreaRelationshipTypesByToken($tokens: [String!]!) {
  areaRelationshipTypesByToken(tokens: $tokens) {
    id
    createdAt
    updatedAt
    deletedAt
    token
    name
    description
    metadata
  }
}

# List area relationship types that match criteria.
query listAreaRelationshipTypes($pageNumber: Int!, $pageSize: Int!) {
  areaRelationshipTypes(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      id
      createdAt
      updatedAt
      deletedAt
      token
      name
      description
      metadata
    }
    pagination {
      pageStart
      pageEnd
      totalRecords
    }
  }
}

# Create area relationship and return identifiers.
mutation createAreaRelationship($token: String!, $sourceArea: String!, $targetArea: String!, $relationshipType: String!) {
  createAreaRelationship(
    request: {
      token: $token,
      sourceArea: $sourceArea
      targetArea: $targetArea
      relationshipType: $relationshipType
    }
  ) {
    id
    token
  }
}

# Get area relationships by unique token.
query getAreaRelationshipsByToken($tokens: [String!]!) {
  areaRelationshipsByToken(tokens: $tokens) {
    id
    createdAt
    updatedAt
    deletedAt
    token
    sourceArea {
      token
      name
      description
    }
    targetArea {
      token
      name
      description
    }
    relationshipType {
      token
      name
      description
    }
    metadata
  }
}

# List area relationships that match criteria.
query listAreaRelationships($pageNumber: Int!, $pageSize: Int!) {
  areaRelationships(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      id
      sourceArea {
        token
        name
        description
      }
      targetArea {
        token
        name
        description
      }
      relationshipType {
        token
        name
        description
      }
      metadata
    }
    pagination {
      pageStart
      pageEnd
      totalRecords
    }
  }
}

# Create area group and return identifiers.
mutation createAreaGroup($token: String!, $name: String, $description: String, 
  $imageUrl: String, $icon: String, $backgroundColor: String, $foregroundColor: String, $borderColor: String, $metadata: String) {
  createAreaGroup(request: { 
    token: $token,
    name: $name,
    description: $description,
    imageUrl: $imageUrl,
    icon: $icon,
    backgroundColor: $backgroundColor,
    foregroundColor: $foregroundColor,
    borderColor: $borderColor,
    metadata: $metadata
  }) {
    id
    token
  }
}

# Get area groups by unique token.
query getAreaGroupsByToken($tokens: [String!]!) {
  areaGroupsByToken(tokens: $tokens) {
    id
    createdAt
    updatedAt
    deletedAt
    token
    name
    description
    imageUrl
    icon
    backgroundColor
    foregroundColor
    borderColor
    metadata
  }
}

# List area groups that match criteria.
query listAreaGroups($pageNumber: Int!, $pageSize: Int!) {
  areaGroups(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      id
      createdAt
      updatedAt
      deletedAt
      token
      name
      description
      imageUrl
      icon
      backgroundColor
      foregroundColor
      borderColor
      metadata
    }
    pagination {
      pageStart
      pageEnd
      totalRecords
    }
  }
}

# Create area group relationship type and return identifiers.
mutation createAreaGroupRelationshipType($token: String!, $name: String, $description: String, $metadata: String) {
  createAreaGroupRelationshipType(request: { 
    token: $token,
    name: $name,
    description: $description,
    metadata: $metadata
  }) {
    id
    token
  }
}

# Get area group relationship type by unique token.
query getAreaGroupRelationshipTypesByToken($tokens: [String!]!) {
  areaGroupRelationshipTypesByToken(tokens: $tokens) {
    id
    createdAt
    updatedAt
    deletedAt
    token
    name
    description
    metadata
  }
}

# List area group relationship types that match criteria.
query listAreaGroupRelationshipTypes($pageNumber: Int!, $pageSize: Int!) {
  areaGroupRelationshipTypes(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      id
      createdAt
      updatedAt
      deletedAt
      token
      name
      description
      metadata
    }
    pagination {
      pageStart
      pageEnd
      totalRecords
    }
  }
}

# Create area group relationship and return identifiers.
mutation createAreaGroupRelationship($token: String!, $areaGroup: String!, $area: String!, $relationshipType: String!) {
  createAreaGroupRelationship(
    request: {
      token: $token,
      areaGroup: $areaGroup,
      area: $area,
      relationshipType: $relationshipType
    }
  ) {
    id
    token
  }
}

# Get area group relationships by unique token.
query getAreaGroupRelationshipsByToken($tokens: [String!]!) {
  areaGroupRelationshipsByToken(tokens: $tokens) {
    id
    createdAt
    updatedAt
    deletedAt
    token
    areaGroup {
      token
      name
      description
    }
    area {
      token
      name
      description
    }
    relationshipType {
      token
      name
      description
    }
    metadata
  }
}

# List area group relationships that match criteria.
query listAreaGroupRelationships($pageNumber: Int!, $pageSize: Int!) {
  areaGroupRelationships(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      id
      createdAt
      updatedAt
      deletedAt
      token
      areaGroup {
        token
        name
        description
      }
      area {
        token
        name
        description
      }
      relationshipType {
        token
        name
        description
      }
      metadata
    }
    pagination {
      pageStart
      pageEnd
      totalRecords
    }
  }
}
