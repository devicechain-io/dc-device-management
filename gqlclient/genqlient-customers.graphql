# Content associated with customer type response.
fragment DefaultCustomerType on CustomerType {
  id
  createdAt
  updatedAt
  deletedAt
  token
  name
  description
  imageUrl
  icon
  backgroundColor
  foregroundColor
  borderColor
  metadata
}

# Content associated with customer response.
fragment DefaultCustomer on Customer {
  id
  createdAt
  updatedAt
  deletedAt
  token
  name
  description
  customerType {
    token
    name
    description
  }
  metadata
}

# Content associated with customer relationship type response.
fragment DefaultCustomerRelationshipType on CustomerRelationshipType {
  id
  createdAt
  updatedAt
  deletedAt
  token
  name
  description
  metadata
}

# Content associated with customer relationship response.
fragment DefaultCustomerRelationship on CustomerRelationship {
  id
  createdAt
  updatedAt
  deletedAt
  token
  sourceCustomer {
    token
    name
    description
  }
  targets {
    ...DefaultRelationshipTargets
  }
  relationshipType {
    token
    name
    description
  }
  metadata
}

# Content associated with customer group.
fragment DefaultCustomerGroup on CustomerGroup {
  id
  createdAt
  updatedAt
  deletedAt
  token
  name
  description
  imageUrl
  icon
  backgroundColor
  foregroundColor
  borderColor
  metadata
}

# Content associated with customer group relationship type.
fragment DefaultCustomerGroupRelationshipType on CustomerGroupRelationshipType {
  id
  createdAt
  updatedAt
  deletedAt
  token
  name
  description
  metadata
}

# Content associated with customer group relationship.
fragment DefaultCustomerGroupRelationship on CustomerGroupRelationship {
  id
  createdAt
  updatedAt
  deletedAt
  token
  sourceCustomerGroup {
    token
    name
    description
  }
  targets {
    ...DefaultRelationshipTargets
  }
  relationshipType {
    token
    name
    description
  }
  metadata
}

# Create customer type and return identifiers.
mutation createCustomerType($token: String!, $name: String, $description: String, 
  $imageUrl: String, $icon: String, $backgroundColor: String, $foregroundColor: String, $borderColor: String, $metadata: String) {
  createCustomerType(request: { 
    token: $token,
    name: $name,
    description: $description,
    imageUrl: $imageUrl,
    icon: $icon,
    backgroundColor: $backgroundColor,
    foregroundColor: $foregroundColor,
    borderColor: $borderColor,
    metadata: $metadata
  }) {
    ...DefaultCustomerType
  }
}

# Get customer types by unique tokens.
query getCustomerTypesByToken($tokens: [String!]!) {
  customerTypesByToken(tokens: $tokens) {
    ...DefaultCustomerType
  }
}

# List customer types that match criteria.
query listCustomerTypes($pageNumber: Int!, $pageSize: Int!) {
  customerTypes(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      ...DefaultCustomerType
    }
    pagination {
      ...DefaultPagination
    }
  }
}

# Create customer and return identifiers.
mutation createCustomer($token: String!, $customerTypeToken: String!, $name: String, $description: String, $metadata: String) {
  createCustomer(request: { 
    token: $token, 
    customerTypeToken: $customerTypeToken,
    name: $name,
    description: $description,
    metadata: $metadata
  }) {
    ...DefaultCustomer
  }
}

# Get customers by unique tokens.
query getCustomersByToken($tokens: [String!]!) {
  customersByToken(tokens: $tokens) {
    ...DefaultCustomer
  }
}

# List customers that match criteria.
query listCustomers($pageNumber: Int!, $pageSize: Int!) {
  customers(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      ...DefaultCustomer
    }
    pagination {
      ...DefaultPagination
    }
  }
}

# Create customer relationship type and return identifiers.
mutation createCustomerRelationshipType($token: String!, $name: String, $description: String, $metadata: String) {
  createCustomerRelationshipType(request: { 
    token: $token,
    name: $name,
    description: $description,
    metadata: $metadata
  }) {
    ...DefaultCustomerRelationshipType
  }
}

# Get customer relationship types by unique tokens.
query getCustomerRelationshipTypesByToken($tokens: [String!]!) {
  customerRelationshipTypesByToken(tokens: $tokens) {
    ...DefaultCustomerRelationshipType
  }
}

# List customer relationship types that match criteria.
query listCustomerRelationshipTypes($pageNumber: Int!, $pageSize: Int!) {
  customerRelationshipTypes(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      ...DefaultCustomerRelationshipType
    }
    pagination {
      ...DefaultPagination
    }
  }
}

# Create customer relationship and return identifiers.
mutation createCustomerRelationship($token: String!, $sourceCustomer: String!, $targets: EntityRelationshipTargetsCreateRequest!, $relationshipType: String!) {
  createCustomerRelationship(
    request: {
      token: $token,
      sourceCustomer: $sourceCustomer
      targets: $targets
      relationshipType: $relationshipType
    }
  ) {
    ...DefaultCustomerRelationship
  }
}

# Get customer relationships by unique tokens.
query getCustomerRelationshipsByToken($tokens: [String!]!) {
  customerRelationshipsByToken(tokens: $tokens) {
    ...DefaultCustomerRelationship
  }
}

# List customer relationships that match criteria.
query listCustomerRelationships($pageNumber: Int!, $pageSize: Int!, $sourceCustomer: String, $relationshipType: String) {
  customerRelationships(criteria: { 
    pageNumber: $pageNumber, 
    pageSize: $pageSize,
    sourceCustomer: $sourceCustomer,
    relationshipType: $relationshipType }) {
    results {
      ...DefaultCustomerRelationship
    }
    pagination {
      ...DefaultPagination
    }
  }
}

# Create customer group and return identifiers.
mutation createCustomerGroup($token: String!, $name: String, $description: String, 
  $imageUrl: String, $icon: String, $backgroundColor: String, $foregroundColor: String, $borderColor: String, $metadata: String) {
  createCustomerGroup(request: { 
    token: $token,
    name: $name,
    description: $description,
    imageUrl: $imageUrl,
    icon: $icon,
    backgroundColor: $backgroundColor,
    foregroundColor: $foregroundColor,
    borderColor: $borderColor,
    metadata: $metadata
  }) {
    ...DefaultCustomerGroup
  }
}

# Get customer groups by unique tokens.
query getCustomerGroupsByToken($tokens: [String!]!) {
  customerGroupsByToken(tokens: $tokens) {
    ...DefaultCustomerGroup
  }
}

# List customer groups that match criteria.
query listCustomerGroups($pageNumber: Int!, $pageSize: Int!) {
  customerGroups(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      ...DefaultCustomerGroup
    }
    pagination {
      ...DefaultPagination
    }
  }
}

# Create customer group relationship type and return identifiers.
mutation createCustomerGroupRelationshipType($token: String!, $name: String, $description: String, $metadata: String) {
  createCustomerGroupRelationshipType(request: { 
    token: $token,
    name: $name,
    description: $description,
    metadata: $metadata
  }) {
    ...DefaultCustomerGroupRelationshipType
  }
}

# Get customer group relationship types by unique token.
query getCustomerGroupRelationshipTypesByToken($tokens: [String!]!) {
  customerGroupRelationshipTypesByToken(tokens: $tokens) {
    ...DefaultCustomerGroupRelationshipType
  }
}

# List customer group relationship types that match criteria.
query listCustomerGroupRelationshipTypes($pageNumber: Int!, $pageSize: Int!) {
  customerGroupRelationshipTypes(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      ...DefaultCustomerGroupRelationshipType
    }
    pagination {
      ...DefaultPagination
    }
  }
}

# Create customer group relationship and return identifiers.
mutation createCustomerGroupRelationship($token: String!, $customerGroup: String!, $targets: EntityRelationshipTargetsCreateRequest!, $relationshipType: String!) {
  createCustomerGroupRelationship(
    request: {
      token: $token,
      sourceCustomerGroup: $customerGroup,
      targets: $targets,
      relationshipType: $relationshipType
    }
  ) {
    ...DefaultCustomerGroupRelationship
  }
}

# Get customer group relationships by unique tokens.
query getCustomerGroupRelationshipsByToken($tokens: [String!]!) {
  customerGroupRelationshipsByToken(tokens: $tokens) {
    ...DefaultCustomerGroupRelationship
  }
}

# List customer group relationships that match criteria.
query listCustomerGroupRelationships($pageNumber: Int!, $pageSize: Int!, $sourceCustomerGroup: String, $relationshipType: String) {
  customerGroupRelationships(criteria: { 
    pageNumber: $pageNumber, 
    pageSize: $pageSize,
    sourceCustomerGroup: $sourceCustomerGroup,
    relationshipType: $relationshipType }) {
    results {
      ...DefaultCustomerGroupRelationship
    }
    pagination {
      ...DefaultPagination
    }
  }
}
