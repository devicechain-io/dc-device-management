# Create customer type and return identifiers.
mutation createCustomerType($token: String!, $name: String, $description: String, 
  $imageUrl: String, $icon: String, $backgroundColor: String, $foregroundColor: String, $borderColor: String, $metadata: String) {
  createCustomerType(request: { 
    token: $token,
    name: $name,
    description: $description,
    imageUrl: $imageUrl,
    icon: $icon,
    backgroundColor: $backgroundColor,
    foregroundColor: $foregroundColor,
    borderColor: $borderColor,
    metadata: $metadata
  }) {
    id
    token
  }
}

# Get customer types by unique token.
query getCustomerTypesByToken($tokens: [String!]!) {
  customerTypesByToken(tokens: $tokens) {
    id
    createdAt
    updatedAt
    deletedAt
    token
    name
    description
    imageUrl
    icon
    backgroundColor
    foregroundColor
    borderColor
    metadata
  }
}

# List customer types that match criteria.
query listCustomerTypes($pageNumber: Int!, $pageSize: Int!) {
  customerTypes(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      id
      createdAt
      updatedAt
      deletedAt
      token
      name
      description
      imageUrl
      icon
      backgroundColor
      foregroundColor
      borderColor
      metadata
    }
    pagination {
      pageStart
      pageEnd
      totalRecords
    }
  }
}

# Create customer and return identifiers.
mutation createCustomer($token: String!, $customerTypeToken: String!, $name: String, $description: String, $metadata: String) {
  createCustomer(request: { 
    token: $token, 
    customerTypeToken: $customerTypeToken,
    name: $name,
    description: $description,
    metadata: $metadata
  }) {
    id
    token
  }
}

# Get customers by unique token.
query getCustomersByToken($tokens: [String!]!) {
  customersByToken(tokens: $tokens) {
    id
    createdAt
    updatedAt
    deletedAt
    token
    name
    description
    customerType {
      token
      name
      description
    }
    metadata
  }
}

# List customers that match criteria.
query listCustomers($pageNumber: Int!, $pageSize: Int!) {
  customers(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      id
      createdAt
      updatedAt
      deletedAt
      token
      name
      description
      customerType {
        token
        name
        description
      }
      metadata
    }
    pagination {
      pageStart
      pageEnd
      totalRecords
    }
  }
}

# Create customer relationship type and return identifiers.
mutation createCustomerRelationshipType($token: String!, $name: String, $description: String, $metadata: String) {
  createCustomerRelationshipType(request: { 
    token: $token,
    name: $name,
    description: $description,
    metadata: $metadata
  }) {
    id
    token
  }
}

# Get customer relationship types by unique token.
query getCustomerRelationshipTypesByToken($tokens: [String!]!) {
  customerRelationshipTypesByToken(tokens: $tokens) {
    id
    createdAt
    updatedAt
    deletedAt
    token
    name
    description
    metadata
  }
}

# List customer relationship types that match criteria.
query listCustomerRelationshipTypes($pageNumber: Int!, $pageSize: Int!) {
  customerRelationshipTypes(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      id
      createdAt
      updatedAt
      deletedAt
      token
      name
      description
      metadata
    }
    pagination {
      pageStart
      pageEnd
      totalRecords
    }
  }
}

# Create customer relationship and return identifiers.
mutation createCustomerRelationship($token: String!, $sourceCustomer: String!, $targetCustomer: String!, $relationshipType: String!) {
  createCustomerRelationship(
    request: {
      token: $token,
      sourceCustomer: $sourceCustomer
      targetCustomer: $targetCustomer
      relationshipType: $relationshipType
    }
  ) {
    id
    token
  }
}

# Get customer relationships by unique token.
query getCustomerRelationshipsByToken($tokens: [String!]!) {
  customerRelationshipsByToken(tokens: $tokens) {
    id
    createdAt
    updatedAt
    deletedAt
    token
    sourceCustomer {
      token
      name
      description
    }
    targetCustomer {
      token
      name
      description
    }
    relationshipType {
      token
      name
      description
    }
    metadata
  }
}

# List customer relationships that match criteria.
query listCustomerRelationships($pageNumber: Int!, $pageSize: Int!) {
  customerRelationships(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      id
      sourceCustomer {
        token
        name
        description
      }
      targetCustomer {
        token
        name
        description
      }
      relationshipType {
        token
        name
        description
      }
      metadata
    }
    pagination {
      pageStart
      pageEnd
      totalRecords
    }
  }
}

# Create customer group and return identifiers.
mutation createCustomerGroup($token: String!, $name: String, $description: String, 
  $imageUrl: String, $icon: String, $backgroundColor: String, $foregroundColor: String, $borderColor: String, $metadata: String) {
  createCustomerGroup(request: { 
    token: $token,
    name: $name,
    description: $description,
    imageUrl: $imageUrl,
    icon: $icon,
    backgroundColor: $backgroundColor,
    foregroundColor: $foregroundColor,
    borderColor: $borderColor,
    metadata: $metadata
  }) {
    id
    token
  }
}

# Get customer groups by unique token.
query getCustomerGroupsByToken($tokens: [String!]!) {
  customerGroupsByToken(tokens: $tokens) {
    id
    createdAt
    updatedAt
    deletedAt
    token
    name
    description
    imageUrl
    icon
    backgroundColor
    foregroundColor
    borderColor
    metadata
  }
}

# List customer groups that match criteria.
query listCustomerGroups($pageNumber: Int!, $pageSize: Int!) {
  customerGroups(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      id
      createdAt
      updatedAt
      deletedAt
      token
      name
      description
      imageUrl
      icon
      backgroundColor
      foregroundColor
      borderColor
      metadata
    }
    pagination {
      pageStart
      pageEnd
      totalRecords
    }
  }
}

# Create customer group relationship type and return identifiers.
mutation createCustomerGroupRelationshipType($token: String!, $name: String, $description: String, $metadata: String) {
  createCustomerGroupRelationshipType(request: { 
    token: $token,
    name: $name,
    description: $description,
    metadata: $metadata
  }) {
    id
    token
  }
}

# Get customer group relationship types by unique token.
query getCustomerGroupRelationshipTypesByToken($tokens: [String!]!) {
  customerGroupRelationshipTypesByToken(tokens: $tokens) {
    id
    createdAt
    updatedAt
    deletedAt
    token
    name
    description
    metadata
  }
}

# List customer group relationship types that match criteria.
query listCustomerGroupRelationshipTypes($pageNumber: Int!, $pageSize: Int!) {
  customerGroupRelationshipTypes(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      id
      createdAt
      updatedAt
      deletedAt
      token
      name
      description
      metadata
    }
    pagination {
      pageStart
      pageEnd
      totalRecords
    }
  }
}

# Create customer group relationship and return identifiers.
mutation createCustomerGroupRelationship($token: String!, $customerGroup: String!, $customer: String!, $relationshipType: String!) {
  createCustomerGroupRelationship(
    request: {
      token: $token,
      customerGroup: $customerGroup,
      customer: $customer,
      relationshipType: $relationshipType
    }
  ) {
    id
    token
  }
}

# Get customer group relationships by unique token.
query getCustomerGroupRelationshipsByToken($tokens: [String!]!) {
  customerGroupRelationshipsByToken(tokens: $tokens) {
    id
    createdAt
    updatedAt
    deletedAt
    token
    customerGroup {
      token
      name
      description
    }
    customer {
      token
      name
      description
    }
    relationshipType {
      token
      name
      description
    }
    metadata
  }
}

# List customer group relationships that match criteria.
query listCustomerGroupRelationships($pageNumber: Int!, $pageSize: Int!) {
  customerGroupRelationships(criteria: { pageNumber: $pageNumber, pageSize: $pageSize }) {
    results {
      id
      createdAt
      updatedAt
      deletedAt
      token
      customerGroup {
        token
        name
        description
      }
      customer {
        token
        name
        description
      }
      relationshipType {
        token
        name
        description
      }
      metadata
    }
    pagination {
      pageStart
      pageEnd
      totalRecords
    }
  }
}
