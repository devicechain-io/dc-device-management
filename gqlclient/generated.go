// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gqlclient

import (
	"context"
	"encoding/json"

	"github.com/Khan/genqlient/graphql"
)

// Content associated with area response.
type DefaultArea struct {
	Id          string              `json:"id"`
	CreatedAt   *string             `json:"createdAt"`
	UpdatedAt   *string             `json:"updatedAt"`
	DeletedAt   *string             `json:"deletedAt"`
	Token       string              `json:"token"`
	Name        *string             `json:"name"`
	Description *string             `json:"description"`
	AreaType    DefaultAreaAreaType `json:"areaType"`
	Metadata    *string             `json:"metadata"`
}

// GetId returns DefaultArea.Id, and is useful for accessing the field via an interface.
func (v *DefaultArea) GetId() string { return v.Id }

// GetCreatedAt returns DefaultArea.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultArea) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultArea.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultArea) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultArea.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultArea) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultArea.Token, and is useful for accessing the field via an interface.
func (v *DefaultArea) GetToken() string { return v.Token }

// GetName returns DefaultArea.Name, and is useful for accessing the field via an interface.
func (v *DefaultArea) GetName() *string { return v.Name }

// GetDescription returns DefaultArea.Description, and is useful for accessing the field via an interface.
func (v *DefaultArea) GetDescription() *string { return v.Description }

// GetAreaType returns DefaultArea.AreaType, and is useful for accessing the field via an interface.
func (v *DefaultArea) GetAreaType() DefaultAreaAreaType { return v.AreaType }

// GetMetadata returns DefaultArea.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultArea) GetMetadata() *string { return v.Metadata }

// DefaultAreaAreaType includes the requested fields of the GraphQL type AreaType.
type DefaultAreaAreaType struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultAreaAreaType.Token, and is useful for accessing the field via an interface.
func (v *DefaultAreaAreaType) GetToken() string { return v.Token }

// GetName returns DefaultAreaAreaType.Name, and is useful for accessing the field via an interface.
func (v *DefaultAreaAreaType) GetName() *string { return v.Name }

// GetDescription returns DefaultAreaAreaType.Description, and is useful for accessing the field via an interface.
func (v *DefaultAreaAreaType) GetDescription() *string { return v.Description }

// Content associated with area group.
type DefaultAreaGroup struct {
	Id              string  `json:"id"`
	CreatedAt       *string `json:"createdAt"`
	UpdatedAt       *string `json:"updatedAt"`
	DeletedAt       *string `json:"deletedAt"`
	Token           string  `json:"token"`
	Name            *string `json:"name"`
	Description     *string `json:"description"`
	ImageUrl        *string `json:"imageUrl"`
	Icon            *string `json:"icon"`
	BackgroundColor *string `json:"backgroundColor"`
	ForegroundColor *string `json:"foregroundColor"`
	BorderColor     *string `json:"borderColor"`
	Metadata        *string `json:"metadata"`
}

// GetId returns DefaultAreaGroup.Id, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroup) GetId() string { return v.Id }

// GetCreatedAt returns DefaultAreaGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroup) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultAreaGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroup) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultAreaGroup.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroup) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultAreaGroup.Token, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroup) GetToken() string { return v.Token }

// GetName returns DefaultAreaGroup.Name, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroup) GetName() *string { return v.Name }

// GetDescription returns DefaultAreaGroup.Description, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroup) GetDescription() *string { return v.Description }

// GetImageUrl returns DefaultAreaGroup.ImageUrl, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroup) GetImageUrl() *string { return v.ImageUrl }

// GetIcon returns DefaultAreaGroup.Icon, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroup) GetIcon() *string { return v.Icon }

// GetBackgroundColor returns DefaultAreaGroup.BackgroundColor, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroup) GetBackgroundColor() *string { return v.BackgroundColor }

// GetForegroundColor returns DefaultAreaGroup.ForegroundColor, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroup) GetForegroundColor() *string { return v.ForegroundColor }

// GetBorderColor returns DefaultAreaGroup.BorderColor, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroup) GetBorderColor() *string { return v.BorderColor }

// GetMetadata returns DefaultAreaGroup.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroup) GetMetadata() *string { return v.Metadata }

// Content associated with area group relationship.
type DefaultAreaGroupRelationship struct {
	Id               string                                                                `json:"id"`
	CreatedAt        *string                                                               `json:"createdAt"`
	UpdatedAt        *string                                                               `json:"updatedAt"`
	DeletedAt        *string                                                               `json:"deletedAt"`
	Token            string                                                                `json:"token"`
	SourceAreaGroup  DefaultAreaGroupRelationshipSourceAreaGroup                           `json:"sourceAreaGroup"`
	Targets          DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets          `json:"targets"`
	RelationshipType DefaultAreaGroupRelationshipRelationshipTypeAreaGroupRelationshipType `json:"relationshipType"`
	Metadata         *string                                                               `json:"metadata"`
}

// GetId returns DefaultAreaGroupRelationship.Id, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationship) GetId() string { return v.Id }

// GetCreatedAt returns DefaultAreaGroupRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationship) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultAreaGroupRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationship) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultAreaGroupRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationship) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultAreaGroupRelationship.Token, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationship) GetToken() string { return v.Token }

// GetSourceAreaGroup returns DefaultAreaGroupRelationship.SourceAreaGroup, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationship) GetSourceAreaGroup() DefaultAreaGroupRelationshipSourceAreaGroup {
	return v.SourceAreaGroup
}

// GetTargets returns DefaultAreaGroupRelationship.Targets, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationship) GetTargets() DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets {
	return v.Targets
}

// GetRelationshipType returns DefaultAreaGroupRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationship) GetRelationshipType() DefaultAreaGroupRelationshipRelationshipTypeAreaGroupRelationshipType {
	return v.RelationshipType
}

// GetMetadata returns DefaultAreaGroupRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationship) GetMetadata() *string { return v.Metadata }

// DefaultAreaGroupRelationshipRelationshipTypeAreaGroupRelationshipType includes the requested fields of the GraphQL type AreaGroupRelationshipType.
type DefaultAreaGroupRelationshipRelationshipTypeAreaGroupRelationshipType struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultAreaGroupRelationshipRelationshipTypeAreaGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipRelationshipTypeAreaGroupRelationshipType) GetToken() string {
	return v.Token
}

// GetName returns DefaultAreaGroupRelationshipRelationshipTypeAreaGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipRelationshipTypeAreaGroupRelationshipType) GetName() *string {
	return v.Name
}

// GetDescription returns DefaultAreaGroupRelationshipRelationshipTypeAreaGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipRelationshipTypeAreaGroupRelationshipType) GetDescription() *string {
	return v.Description
}

// DefaultAreaGroupRelationshipSourceAreaGroup includes the requested fields of the GraphQL type AreaGroup.
type DefaultAreaGroupRelationshipSourceAreaGroup struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultAreaGroupRelationshipSourceAreaGroup.Token, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipSourceAreaGroup) GetToken() string { return v.Token }

// GetName returns DefaultAreaGroupRelationshipSourceAreaGroup.Name, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipSourceAreaGroup) GetName() *string { return v.Name }

// GetDescription returns DefaultAreaGroupRelationshipSourceAreaGroup.Description, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipSourceAreaGroup) GetDescription() *string { return v.Description }

// DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets includes the requested fields of the GraphQL type EntityRelationshipTargets.
type DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets struct {
	DefaultRelationshipTargets `json:"-"`
}

// GetTargetDevice returns DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets.TargetDevice, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets) GetTargetDevice() *DefaultRelationshipTargetsTargetDevice {
	return v.DefaultRelationshipTargets.TargetDevice
}

// GetTargetDeviceGroup returns DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets.TargetDeviceGroup, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets) GetTargetDeviceGroup() *DefaultRelationshipTargetsTargetDeviceGroup {
	return v.DefaultRelationshipTargets.TargetDeviceGroup
}

// GetTargetAsset returns DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets.TargetAsset, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets) GetTargetAsset() *DefaultRelationshipTargetsTargetAsset {
	return v.DefaultRelationshipTargets.TargetAsset
}

// GetTargetAssetGroup returns DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets.TargetAssetGroup, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets) GetTargetAssetGroup() *DefaultRelationshipTargetsTargetAssetGroup {
	return v.DefaultRelationshipTargets.TargetAssetGroup
}

// GetTargetArea returns DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets.TargetArea, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets) GetTargetArea() *DefaultRelationshipTargetsTargetArea {
	return v.DefaultRelationshipTargets.TargetArea
}

// GetTargetAreaGroup returns DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets.TargetAreaGroup, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets) GetTargetAreaGroup() *DefaultRelationshipTargetsTargetAreaGroup {
	return v.DefaultRelationshipTargets.TargetAreaGroup
}

// GetTargetCustomer returns DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets.TargetCustomer, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets) GetTargetCustomer() *DefaultRelationshipTargetsTargetCustomer {
	return v.DefaultRelationshipTargets.TargetCustomer
}

// GetTargetCustomerGroup returns DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets.TargetCustomerGroup, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets) GetTargetCustomerGroup() *DefaultRelationshipTargetsTargetCustomerGroup {
	return v.DefaultRelationshipTargets.TargetCustomerGroup
}

func (v *DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets
		graphql.NoUnmarshalJSON
	}
	firstPass.DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultRelationshipTargets)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDefaultAreaGroupRelationshipTargetsEntityRelationshipTargets struct {
	TargetDevice *DefaultRelationshipTargetsTargetDevice `json:"targetDevice"`

	TargetDeviceGroup *DefaultRelationshipTargetsTargetDeviceGroup `json:"targetDeviceGroup"`

	TargetAsset *DefaultRelationshipTargetsTargetAsset `json:"targetAsset"`

	TargetAssetGroup *DefaultRelationshipTargetsTargetAssetGroup `json:"targetAssetGroup"`

	TargetArea *DefaultRelationshipTargetsTargetArea `json:"targetArea"`

	TargetAreaGroup *DefaultRelationshipTargetsTargetAreaGroup `json:"targetAreaGroup"`

	TargetCustomer *DefaultRelationshipTargetsTargetCustomer `json:"targetCustomer"`

	TargetCustomerGroup *DefaultRelationshipTargetsTargetCustomerGroup `json:"targetCustomerGroup"`
}

func (v *DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets) __premarshalJSON() (*__premarshalDefaultAreaGroupRelationshipTargetsEntityRelationshipTargets, error) {
	var retval __premarshalDefaultAreaGroupRelationshipTargetsEntityRelationshipTargets

	retval.TargetDevice = v.DefaultRelationshipTargets.TargetDevice
	retval.TargetDeviceGroup = v.DefaultRelationshipTargets.TargetDeviceGroup
	retval.TargetAsset = v.DefaultRelationshipTargets.TargetAsset
	retval.TargetAssetGroup = v.DefaultRelationshipTargets.TargetAssetGroup
	retval.TargetArea = v.DefaultRelationshipTargets.TargetArea
	retval.TargetAreaGroup = v.DefaultRelationshipTargets.TargetAreaGroup
	retval.TargetCustomer = v.DefaultRelationshipTargets.TargetCustomer
	retval.TargetCustomerGroup = v.DefaultRelationshipTargets.TargetCustomerGroup
	return &retval, nil
}

// Content associated with area group relationship type.
type DefaultAreaGroupRelationshipType struct {
	Id          string  `json:"id"`
	CreatedAt   *string `json:"createdAt"`
	UpdatedAt   *string `json:"updatedAt"`
	DeletedAt   *string `json:"deletedAt"`
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Metadata    *string `json:"metadata"`
}

// GetId returns DefaultAreaGroupRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipType) GetId() string { return v.Id }

// GetCreatedAt returns DefaultAreaGroupRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipType) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultAreaGroupRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipType) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultAreaGroupRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipType) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultAreaGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipType) GetToken() string { return v.Token }

// GetName returns DefaultAreaGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipType) GetName() *string { return v.Name }

// GetDescription returns DefaultAreaGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipType) GetDescription() *string { return v.Description }

// GetMetadata returns DefaultAreaGroupRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultAreaGroupRelationshipType) GetMetadata() *string { return v.Metadata }

// Content associated with area relationship response.
type DefaultAreaRelationship struct {
	Id               string                                                      `json:"id"`
	CreatedAt        *string                                                     `json:"createdAt"`
	UpdatedAt        *string                                                     `json:"updatedAt"`
	DeletedAt        *string                                                     `json:"deletedAt"`
	Token            string                                                      `json:"token"`
	SourceArea       DefaultAreaRelationshipSourceArea                           `json:"sourceArea"`
	Targets          DefaultAreaRelationshipTargetsEntityRelationshipTargets     `json:"targets"`
	RelationshipType DefaultAreaRelationshipRelationshipTypeAreaRelationshipType `json:"relationshipType"`
	Metadata         *string                                                     `json:"metadata"`
}

// GetId returns DefaultAreaRelationship.Id, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationship) GetId() string { return v.Id }

// GetCreatedAt returns DefaultAreaRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationship) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultAreaRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationship) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultAreaRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationship) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultAreaRelationship.Token, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationship) GetToken() string { return v.Token }

// GetSourceArea returns DefaultAreaRelationship.SourceArea, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationship) GetSourceArea() DefaultAreaRelationshipSourceArea {
	return v.SourceArea
}

// GetTargets returns DefaultAreaRelationship.Targets, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationship) GetTargets() DefaultAreaRelationshipTargetsEntityRelationshipTargets {
	return v.Targets
}

// GetRelationshipType returns DefaultAreaRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationship) GetRelationshipType() DefaultAreaRelationshipRelationshipTypeAreaRelationshipType {
	return v.RelationshipType
}

// GetMetadata returns DefaultAreaRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationship) GetMetadata() *string { return v.Metadata }

// DefaultAreaRelationshipRelationshipTypeAreaRelationshipType includes the requested fields of the GraphQL type AreaRelationshipType.
type DefaultAreaRelationshipRelationshipTypeAreaRelationshipType struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultAreaRelationshipRelationshipTypeAreaRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipRelationshipTypeAreaRelationshipType) GetToken() string {
	return v.Token
}

// GetName returns DefaultAreaRelationshipRelationshipTypeAreaRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipRelationshipTypeAreaRelationshipType) GetName() *string {
	return v.Name
}

// GetDescription returns DefaultAreaRelationshipRelationshipTypeAreaRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipRelationshipTypeAreaRelationshipType) GetDescription() *string {
	return v.Description
}

// DefaultAreaRelationshipSourceArea includes the requested fields of the GraphQL type Area.
type DefaultAreaRelationshipSourceArea struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultAreaRelationshipSourceArea.Token, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipSourceArea) GetToken() string { return v.Token }

// GetName returns DefaultAreaRelationshipSourceArea.Name, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipSourceArea) GetName() *string { return v.Name }

// GetDescription returns DefaultAreaRelationshipSourceArea.Description, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipSourceArea) GetDescription() *string { return v.Description }

// DefaultAreaRelationshipTargetsEntityRelationshipTargets includes the requested fields of the GraphQL type EntityRelationshipTargets.
type DefaultAreaRelationshipTargetsEntityRelationshipTargets struct {
	DefaultRelationshipTargets `json:"-"`
}

// GetTargetDevice returns DefaultAreaRelationshipTargetsEntityRelationshipTargets.TargetDevice, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipTargetsEntityRelationshipTargets) GetTargetDevice() *DefaultRelationshipTargetsTargetDevice {
	return v.DefaultRelationshipTargets.TargetDevice
}

// GetTargetDeviceGroup returns DefaultAreaRelationshipTargetsEntityRelationshipTargets.TargetDeviceGroup, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipTargetsEntityRelationshipTargets) GetTargetDeviceGroup() *DefaultRelationshipTargetsTargetDeviceGroup {
	return v.DefaultRelationshipTargets.TargetDeviceGroup
}

// GetTargetAsset returns DefaultAreaRelationshipTargetsEntityRelationshipTargets.TargetAsset, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipTargetsEntityRelationshipTargets) GetTargetAsset() *DefaultRelationshipTargetsTargetAsset {
	return v.DefaultRelationshipTargets.TargetAsset
}

// GetTargetAssetGroup returns DefaultAreaRelationshipTargetsEntityRelationshipTargets.TargetAssetGroup, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipTargetsEntityRelationshipTargets) GetTargetAssetGroup() *DefaultRelationshipTargetsTargetAssetGroup {
	return v.DefaultRelationshipTargets.TargetAssetGroup
}

// GetTargetArea returns DefaultAreaRelationshipTargetsEntityRelationshipTargets.TargetArea, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipTargetsEntityRelationshipTargets) GetTargetArea() *DefaultRelationshipTargetsTargetArea {
	return v.DefaultRelationshipTargets.TargetArea
}

// GetTargetAreaGroup returns DefaultAreaRelationshipTargetsEntityRelationshipTargets.TargetAreaGroup, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipTargetsEntityRelationshipTargets) GetTargetAreaGroup() *DefaultRelationshipTargetsTargetAreaGroup {
	return v.DefaultRelationshipTargets.TargetAreaGroup
}

// GetTargetCustomer returns DefaultAreaRelationshipTargetsEntityRelationshipTargets.TargetCustomer, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipTargetsEntityRelationshipTargets) GetTargetCustomer() *DefaultRelationshipTargetsTargetCustomer {
	return v.DefaultRelationshipTargets.TargetCustomer
}

// GetTargetCustomerGroup returns DefaultAreaRelationshipTargetsEntityRelationshipTargets.TargetCustomerGroup, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipTargetsEntityRelationshipTargets) GetTargetCustomerGroup() *DefaultRelationshipTargetsTargetCustomerGroup {
	return v.DefaultRelationshipTargets.TargetCustomerGroup
}

func (v *DefaultAreaRelationshipTargetsEntityRelationshipTargets) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DefaultAreaRelationshipTargetsEntityRelationshipTargets
		graphql.NoUnmarshalJSON
	}
	firstPass.DefaultAreaRelationshipTargetsEntityRelationshipTargets = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultRelationshipTargets)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDefaultAreaRelationshipTargetsEntityRelationshipTargets struct {
	TargetDevice *DefaultRelationshipTargetsTargetDevice `json:"targetDevice"`

	TargetDeviceGroup *DefaultRelationshipTargetsTargetDeviceGroup `json:"targetDeviceGroup"`

	TargetAsset *DefaultRelationshipTargetsTargetAsset `json:"targetAsset"`

	TargetAssetGroup *DefaultRelationshipTargetsTargetAssetGroup `json:"targetAssetGroup"`

	TargetArea *DefaultRelationshipTargetsTargetArea `json:"targetArea"`

	TargetAreaGroup *DefaultRelationshipTargetsTargetAreaGroup `json:"targetAreaGroup"`

	TargetCustomer *DefaultRelationshipTargetsTargetCustomer `json:"targetCustomer"`

	TargetCustomerGroup *DefaultRelationshipTargetsTargetCustomerGroup `json:"targetCustomerGroup"`
}

func (v *DefaultAreaRelationshipTargetsEntityRelationshipTargets) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DefaultAreaRelationshipTargetsEntityRelationshipTargets) __premarshalJSON() (*__premarshalDefaultAreaRelationshipTargetsEntityRelationshipTargets, error) {
	var retval __premarshalDefaultAreaRelationshipTargetsEntityRelationshipTargets

	retval.TargetDevice = v.DefaultRelationshipTargets.TargetDevice
	retval.TargetDeviceGroup = v.DefaultRelationshipTargets.TargetDeviceGroup
	retval.TargetAsset = v.DefaultRelationshipTargets.TargetAsset
	retval.TargetAssetGroup = v.DefaultRelationshipTargets.TargetAssetGroup
	retval.TargetArea = v.DefaultRelationshipTargets.TargetArea
	retval.TargetAreaGroup = v.DefaultRelationshipTargets.TargetAreaGroup
	retval.TargetCustomer = v.DefaultRelationshipTargets.TargetCustomer
	retval.TargetCustomerGroup = v.DefaultRelationshipTargets.TargetCustomerGroup
	return &retval, nil
}

// Content associated with area relationship type response.
type DefaultAreaRelationshipType struct {
	Id          string  `json:"id"`
	CreatedAt   *string `json:"createdAt"`
	UpdatedAt   *string `json:"updatedAt"`
	DeletedAt   *string `json:"deletedAt"`
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Metadata    *string `json:"metadata"`
}

// GetId returns DefaultAreaRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipType) GetId() string { return v.Id }

// GetCreatedAt returns DefaultAreaRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipType) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultAreaRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipType) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultAreaRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipType) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultAreaRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipType) GetToken() string { return v.Token }

// GetName returns DefaultAreaRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipType) GetName() *string { return v.Name }

// GetDescription returns DefaultAreaRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipType) GetDescription() *string { return v.Description }

// GetMetadata returns DefaultAreaRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultAreaRelationshipType) GetMetadata() *string { return v.Metadata }

// Content associated with area type response.
type DefaultAreaType struct {
	Id              string  `json:"id"`
	CreatedAt       *string `json:"createdAt"`
	UpdatedAt       *string `json:"updatedAt"`
	DeletedAt       *string `json:"deletedAt"`
	Token           string  `json:"token"`
	Name            *string `json:"name"`
	Description     *string `json:"description"`
	ImageUrl        *string `json:"imageUrl"`
	Icon            *string `json:"icon"`
	BackgroundColor *string `json:"backgroundColor"`
	ForegroundColor *string `json:"foregroundColor"`
	BorderColor     *string `json:"borderColor"`
	Metadata        *string `json:"metadata"`
}

// GetId returns DefaultAreaType.Id, and is useful for accessing the field via an interface.
func (v *DefaultAreaType) GetId() string { return v.Id }

// GetCreatedAt returns DefaultAreaType.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaType) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultAreaType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaType) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultAreaType.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultAreaType) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultAreaType.Token, and is useful for accessing the field via an interface.
func (v *DefaultAreaType) GetToken() string { return v.Token }

// GetName returns DefaultAreaType.Name, and is useful for accessing the field via an interface.
func (v *DefaultAreaType) GetName() *string { return v.Name }

// GetDescription returns DefaultAreaType.Description, and is useful for accessing the field via an interface.
func (v *DefaultAreaType) GetDescription() *string { return v.Description }

// GetImageUrl returns DefaultAreaType.ImageUrl, and is useful for accessing the field via an interface.
func (v *DefaultAreaType) GetImageUrl() *string { return v.ImageUrl }

// GetIcon returns DefaultAreaType.Icon, and is useful for accessing the field via an interface.
func (v *DefaultAreaType) GetIcon() *string { return v.Icon }

// GetBackgroundColor returns DefaultAreaType.BackgroundColor, and is useful for accessing the field via an interface.
func (v *DefaultAreaType) GetBackgroundColor() *string { return v.BackgroundColor }

// GetForegroundColor returns DefaultAreaType.ForegroundColor, and is useful for accessing the field via an interface.
func (v *DefaultAreaType) GetForegroundColor() *string { return v.ForegroundColor }

// GetBorderColor returns DefaultAreaType.BorderColor, and is useful for accessing the field via an interface.
func (v *DefaultAreaType) GetBorderColor() *string { return v.BorderColor }

// GetMetadata returns DefaultAreaType.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultAreaType) GetMetadata() *string { return v.Metadata }

// Content associated with asset response.
type DefaultAsset struct {
	Id          string                `json:"id"`
	CreatedAt   *string               `json:"createdAt"`
	UpdatedAt   *string               `json:"updatedAt"`
	DeletedAt   *string               `json:"deletedAt"`
	Token       string                `json:"token"`
	Name        *string               `json:"name"`
	Description *string               `json:"description"`
	AssetType   DefaultAssetAssetType `json:"assetType"`
	Metadata    *string               `json:"metadata"`
}

// GetId returns DefaultAsset.Id, and is useful for accessing the field via an interface.
func (v *DefaultAsset) GetId() string { return v.Id }

// GetCreatedAt returns DefaultAsset.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAsset) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultAsset.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAsset) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultAsset.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultAsset) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultAsset.Token, and is useful for accessing the field via an interface.
func (v *DefaultAsset) GetToken() string { return v.Token }

// GetName returns DefaultAsset.Name, and is useful for accessing the field via an interface.
func (v *DefaultAsset) GetName() *string { return v.Name }

// GetDescription returns DefaultAsset.Description, and is useful for accessing the field via an interface.
func (v *DefaultAsset) GetDescription() *string { return v.Description }

// GetAssetType returns DefaultAsset.AssetType, and is useful for accessing the field via an interface.
func (v *DefaultAsset) GetAssetType() DefaultAssetAssetType { return v.AssetType }

// GetMetadata returns DefaultAsset.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultAsset) GetMetadata() *string { return v.Metadata }

// DefaultAssetAssetType includes the requested fields of the GraphQL type AssetType.
type DefaultAssetAssetType struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultAssetAssetType.Token, and is useful for accessing the field via an interface.
func (v *DefaultAssetAssetType) GetToken() string { return v.Token }

// GetName returns DefaultAssetAssetType.Name, and is useful for accessing the field via an interface.
func (v *DefaultAssetAssetType) GetName() *string { return v.Name }

// GetDescription returns DefaultAssetAssetType.Description, and is useful for accessing the field via an interface.
func (v *DefaultAssetAssetType) GetDescription() *string { return v.Description }

// Content associated with asset group.
type DefaultAssetGroup struct {
	Id              string  `json:"id"`
	CreatedAt       *string `json:"createdAt"`
	UpdatedAt       *string `json:"updatedAt"`
	DeletedAt       *string `json:"deletedAt"`
	Token           string  `json:"token"`
	Name            *string `json:"name"`
	Description     *string `json:"description"`
	ImageUrl        *string `json:"imageUrl"`
	Icon            *string `json:"icon"`
	BackgroundColor *string `json:"backgroundColor"`
	ForegroundColor *string `json:"foregroundColor"`
	BorderColor     *string `json:"borderColor"`
	Metadata        *string `json:"metadata"`
}

// GetId returns DefaultAssetGroup.Id, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroup) GetId() string { return v.Id }

// GetCreatedAt returns DefaultAssetGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroup) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultAssetGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroup) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultAssetGroup.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroup) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultAssetGroup.Token, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroup) GetToken() string { return v.Token }

// GetName returns DefaultAssetGroup.Name, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroup) GetName() *string { return v.Name }

// GetDescription returns DefaultAssetGroup.Description, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroup) GetDescription() *string { return v.Description }

// GetImageUrl returns DefaultAssetGroup.ImageUrl, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroup) GetImageUrl() *string { return v.ImageUrl }

// GetIcon returns DefaultAssetGroup.Icon, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroup) GetIcon() *string { return v.Icon }

// GetBackgroundColor returns DefaultAssetGroup.BackgroundColor, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroup) GetBackgroundColor() *string { return v.BackgroundColor }

// GetForegroundColor returns DefaultAssetGroup.ForegroundColor, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroup) GetForegroundColor() *string { return v.ForegroundColor }

// GetBorderColor returns DefaultAssetGroup.BorderColor, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroup) GetBorderColor() *string { return v.BorderColor }

// GetMetadata returns DefaultAssetGroup.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroup) GetMetadata() *string { return v.Metadata }

// Content associated with asset group relationship.
type DefaultAssetGroupRelationship struct {
	Id               string                                                                  `json:"id"`
	CreatedAt        *string                                                                 `json:"createdAt"`
	UpdatedAt        *string                                                                 `json:"updatedAt"`
	DeletedAt        *string                                                                 `json:"deletedAt"`
	Token            string                                                                  `json:"token"`
	SourceAssetGroup DefaultAssetGroupRelationshipSourceAssetGroup                           `json:"sourceAssetGroup"`
	Targets          DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets           `json:"targets"`
	RelationshipType DefaultAssetGroupRelationshipRelationshipTypeAssetGroupRelationshipType `json:"relationshipType"`
	Metadata         *string                                                                 `json:"metadata"`
}

// GetId returns DefaultAssetGroupRelationship.Id, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationship) GetId() string { return v.Id }

// GetCreatedAt returns DefaultAssetGroupRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationship) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultAssetGroupRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationship) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultAssetGroupRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationship) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultAssetGroupRelationship.Token, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationship) GetToken() string { return v.Token }

// GetSourceAssetGroup returns DefaultAssetGroupRelationship.SourceAssetGroup, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationship) GetSourceAssetGroup() DefaultAssetGroupRelationshipSourceAssetGroup {
	return v.SourceAssetGroup
}

// GetTargets returns DefaultAssetGroupRelationship.Targets, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationship) GetTargets() DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets {
	return v.Targets
}

// GetRelationshipType returns DefaultAssetGroupRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationship) GetRelationshipType() DefaultAssetGroupRelationshipRelationshipTypeAssetGroupRelationshipType {
	return v.RelationshipType
}

// GetMetadata returns DefaultAssetGroupRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationship) GetMetadata() *string { return v.Metadata }

// DefaultAssetGroupRelationshipRelationshipTypeAssetGroupRelationshipType includes the requested fields of the GraphQL type AssetGroupRelationshipType.
type DefaultAssetGroupRelationshipRelationshipTypeAssetGroupRelationshipType struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultAssetGroupRelationshipRelationshipTypeAssetGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipRelationshipTypeAssetGroupRelationshipType) GetToken() string {
	return v.Token
}

// GetName returns DefaultAssetGroupRelationshipRelationshipTypeAssetGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipRelationshipTypeAssetGroupRelationshipType) GetName() *string {
	return v.Name
}

// GetDescription returns DefaultAssetGroupRelationshipRelationshipTypeAssetGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipRelationshipTypeAssetGroupRelationshipType) GetDescription() *string {
	return v.Description
}

// DefaultAssetGroupRelationshipSourceAssetGroup includes the requested fields of the GraphQL type AssetGroup.
type DefaultAssetGroupRelationshipSourceAssetGroup struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultAssetGroupRelationshipSourceAssetGroup.Token, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipSourceAssetGroup) GetToken() string { return v.Token }

// GetName returns DefaultAssetGroupRelationshipSourceAssetGroup.Name, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipSourceAssetGroup) GetName() *string { return v.Name }

// GetDescription returns DefaultAssetGroupRelationshipSourceAssetGroup.Description, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipSourceAssetGroup) GetDescription() *string {
	return v.Description
}

// DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets includes the requested fields of the GraphQL type EntityRelationshipTargets.
type DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets struct {
	DefaultRelationshipTargets `json:"-"`
}

// GetTargetDevice returns DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets.TargetDevice, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets) GetTargetDevice() *DefaultRelationshipTargetsTargetDevice {
	return v.DefaultRelationshipTargets.TargetDevice
}

// GetTargetDeviceGroup returns DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets.TargetDeviceGroup, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets) GetTargetDeviceGroup() *DefaultRelationshipTargetsTargetDeviceGroup {
	return v.DefaultRelationshipTargets.TargetDeviceGroup
}

// GetTargetAsset returns DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets.TargetAsset, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets) GetTargetAsset() *DefaultRelationshipTargetsTargetAsset {
	return v.DefaultRelationshipTargets.TargetAsset
}

// GetTargetAssetGroup returns DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets.TargetAssetGroup, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets) GetTargetAssetGroup() *DefaultRelationshipTargetsTargetAssetGroup {
	return v.DefaultRelationshipTargets.TargetAssetGroup
}

// GetTargetArea returns DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets.TargetArea, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets) GetTargetArea() *DefaultRelationshipTargetsTargetArea {
	return v.DefaultRelationshipTargets.TargetArea
}

// GetTargetAreaGroup returns DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets.TargetAreaGroup, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets) GetTargetAreaGroup() *DefaultRelationshipTargetsTargetAreaGroup {
	return v.DefaultRelationshipTargets.TargetAreaGroup
}

// GetTargetCustomer returns DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets.TargetCustomer, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets) GetTargetCustomer() *DefaultRelationshipTargetsTargetCustomer {
	return v.DefaultRelationshipTargets.TargetCustomer
}

// GetTargetCustomerGroup returns DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets.TargetCustomerGroup, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets) GetTargetCustomerGroup() *DefaultRelationshipTargetsTargetCustomerGroup {
	return v.DefaultRelationshipTargets.TargetCustomerGroup
}

func (v *DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets
		graphql.NoUnmarshalJSON
	}
	firstPass.DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultRelationshipTargets)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDefaultAssetGroupRelationshipTargetsEntityRelationshipTargets struct {
	TargetDevice *DefaultRelationshipTargetsTargetDevice `json:"targetDevice"`

	TargetDeviceGroup *DefaultRelationshipTargetsTargetDeviceGroup `json:"targetDeviceGroup"`

	TargetAsset *DefaultRelationshipTargetsTargetAsset `json:"targetAsset"`

	TargetAssetGroup *DefaultRelationshipTargetsTargetAssetGroup `json:"targetAssetGroup"`

	TargetArea *DefaultRelationshipTargetsTargetArea `json:"targetArea"`

	TargetAreaGroup *DefaultRelationshipTargetsTargetAreaGroup `json:"targetAreaGroup"`

	TargetCustomer *DefaultRelationshipTargetsTargetCustomer `json:"targetCustomer"`

	TargetCustomerGroup *DefaultRelationshipTargetsTargetCustomerGroup `json:"targetCustomerGroup"`
}

func (v *DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets) __premarshalJSON() (*__premarshalDefaultAssetGroupRelationshipTargetsEntityRelationshipTargets, error) {
	var retval __premarshalDefaultAssetGroupRelationshipTargetsEntityRelationshipTargets

	retval.TargetDevice = v.DefaultRelationshipTargets.TargetDevice
	retval.TargetDeviceGroup = v.DefaultRelationshipTargets.TargetDeviceGroup
	retval.TargetAsset = v.DefaultRelationshipTargets.TargetAsset
	retval.TargetAssetGroup = v.DefaultRelationshipTargets.TargetAssetGroup
	retval.TargetArea = v.DefaultRelationshipTargets.TargetArea
	retval.TargetAreaGroup = v.DefaultRelationshipTargets.TargetAreaGroup
	retval.TargetCustomer = v.DefaultRelationshipTargets.TargetCustomer
	retval.TargetCustomerGroup = v.DefaultRelationshipTargets.TargetCustomerGroup
	return &retval, nil
}

// Content associated with asset group relationship type.
type DefaultAssetGroupRelationshipType struct {
	Id          string  `json:"id"`
	CreatedAt   *string `json:"createdAt"`
	UpdatedAt   *string `json:"updatedAt"`
	DeletedAt   *string `json:"deletedAt"`
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Metadata    *string `json:"metadata"`
}

// GetId returns DefaultAssetGroupRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipType) GetId() string { return v.Id }

// GetCreatedAt returns DefaultAssetGroupRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipType) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultAssetGroupRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipType) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultAssetGroupRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipType) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultAssetGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipType) GetToken() string { return v.Token }

// GetName returns DefaultAssetGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipType) GetName() *string { return v.Name }

// GetDescription returns DefaultAssetGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipType) GetDescription() *string { return v.Description }

// GetMetadata returns DefaultAssetGroupRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultAssetGroupRelationshipType) GetMetadata() *string { return v.Metadata }

// Content associated with asset relationship response.
type DefaultAssetRelationship struct {
	Id               string                                                        `json:"id"`
	CreatedAt        *string                                                       `json:"createdAt"`
	UpdatedAt        *string                                                       `json:"updatedAt"`
	DeletedAt        *string                                                       `json:"deletedAt"`
	Token            string                                                        `json:"token"`
	SourceAsset      DefaultAssetRelationshipSourceAsset                           `json:"sourceAsset"`
	Targets          DefaultAssetRelationshipTargetsEntityRelationshipTargets      `json:"targets"`
	RelationshipType DefaultAssetRelationshipRelationshipTypeAssetRelationshipType `json:"relationshipType"`
	Metadata         *string                                                       `json:"metadata"`
}

// GetId returns DefaultAssetRelationship.Id, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationship) GetId() string { return v.Id }

// GetCreatedAt returns DefaultAssetRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationship) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultAssetRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationship) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultAssetRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationship) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultAssetRelationship.Token, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationship) GetToken() string { return v.Token }

// GetSourceAsset returns DefaultAssetRelationship.SourceAsset, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationship) GetSourceAsset() DefaultAssetRelationshipSourceAsset {
	return v.SourceAsset
}

// GetTargets returns DefaultAssetRelationship.Targets, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationship) GetTargets() DefaultAssetRelationshipTargetsEntityRelationshipTargets {
	return v.Targets
}

// GetRelationshipType returns DefaultAssetRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationship) GetRelationshipType() DefaultAssetRelationshipRelationshipTypeAssetRelationshipType {
	return v.RelationshipType
}

// GetMetadata returns DefaultAssetRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationship) GetMetadata() *string { return v.Metadata }

// DefaultAssetRelationshipRelationshipTypeAssetRelationshipType includes the requested fields of the GraphQL type AssetRelationshipType.
type DefaultAssetRelationshipRelationshipTypeAssetRelationshipType struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultAssetRelationshipRelationshipTypeAssetRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipRelationshipTypeAssetRelationshipType) GetToken() string {
	return v.Token
}

// GetName returns DefaultAssetRelationshipRelationshipTypeAssetRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipRelationshipTypeAssetRelationshipType) GetName() *string {
	return v.Name
}

// GetDescription returns DefaultAssetRelationshipRelationshipTypeAssetRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipRelationshipTypeAssetRelationshipType) GetDescription() *string {
	return v.Description
}

// DefaultAssetRelationshipSourceAsset includes the requested fields of the GraphQL type Asset.
type DefaultAssetRelationshipSourceAsset struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultAssetRelationshipSourceAsset.Token, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipSourceAsset) GetToken() string { return v.Token }

// GetName returns DefaultAssetRelationshipSourceAsset.Name, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipSourceAsset) GetName() *string { return v.Name }

// GetDescription returns DefaultAssetRelationshipSourceAsset.Description, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipSourceAsset) GetDescription() *string { return v.Description }

// DefaultAssetRelationshipTargetsEntityRelationshipTargets includes the requested fields of the GraphQL type EntityRelationshipTargets.
type DefaultAssetRelationshipTargetsEntityRelationshipTargets struct {
	DefaultRelationshipTargets `json:"-"`
}

// GetTargetDevice returns DefaultAssetRelationshipTargetsEntityRelationshipTargets.TargetDevice, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipTargetsEntityRelationshipTargets) GetTargetDevice() *DefaultRelationshipTargetsTargetDevice {
	return v.DefaultRelationshipTargets.TargetDevice
}

// GetTargetDeviceGroup returns DefaultAssetRelationshipTargetsEntityRelationshipTargets.TargetDeviceGroup, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipTargetsEntityRelationshipTargets) GetTargetDeviceGroup() *DefaultRelationshipTargetsTargetDeviceGroup {
	return v.DefaultRelationshipTargets.TargetDeviceGroup
}

// GetTargetAsset returns DefaultAssetRelationshipTargetsEntityRelationshipTargets.TargetAsset, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipTargetsEntityRelationshipTargets) GetTargetAsset() *DefaultRelationshipTargetsTargetAsset {
	return v.DefaultRelationshipTargets.TargetAsset
}

// GetTargetAssetGroup returns DefaultAssetRelationshipTargetsEntityRelationshipTargets.TargetAssetGroup, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipTargetsEntityRelationshipTargets) GetTargetAssetGroup() *DefaultRelationshipTargetsTargetAssetGroup {
	return v.DefaultRelationshipTargets.TargetAssetGroup
}

// GetTargetArea returns DefaultAssetRelationshipTargetsEntityRelationshipTargets.TargetArea, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipTargetsEntityRelationshipTargets) GetTargetArea() *DefaultRelationshipTargetsTargetArea {
	return v.DefaultRelationshipTargets.TargetArea
}

// GetTargetAreaGroup returns DefaultAssetRelationshipTargetsEntityRelationshipTargets.TargetAreaGroup, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipTargetsEntityRelationshipTargets) GetTargetAreaGroup() *DefaultRelationshipTargetsTargetAreaGroup {
	return v.DefaultRelationshipTargets.TargetAreaGroup
}

// GetTargetCustomer returns DefaultAssetRelationshipTargetsEntityRelationshipTargets.TargetCustomer, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipTargetsEntityRelationshipTargets) GetTargetCustomer() *DefaultRelationshipTargetsTargetCustomer {
	return v.DefaultRelationshipTargets.TargetCustomer
}

// GetTargetCustomerGroup returns DefaultAssetRelationshipTargetsEntityRelationshipTargets.TargetCustomerGroup, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipTargetsEntityRelationshipTargets) GetTargetCustomerGroup() *DefaultRelationshipTargetsTargetCustomerGroup {
	return v.DefaultRelationshipTargets.TargetCustomerGroup
}

func (v *DefaultAssetRelationshipTargetsEntityRelationshipTargets) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DefaultAssetRelationshipTargetsEntityRelationshipTargets
		graphql.NoUnmarshalJSON
	}
	firstPass.DefaultAssetRelationshipTargetsEntityRelationshipTargets = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultRelationshipTargets)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDefaultAssetRelationshipTargetsEntityRelationshipTargets struct {
	TargetDevice *DefaultRelationshipTargetsTargetDevice `json:"targetDevice"`

	TargetDeviceGroup *DefaultRelationshipTargetsTargetDeviceGroup `json:"targetDeviceGroup"`

	TargetAsset *DefaultRelationshipTargetsTargetAsset `json:"targetAsset"`

	TargetAssetGroup *DefaultRelationshipTargetsTargetAssetGroup `json:"targetAssetGroup"`

	TargetArea *DefaultRelationshipTargetsTargetArea `json:"targetArea"`

	TargetAreaGroup *DefaultRelationshipTargetsTargetAreaGroup `json:"targetAreaGroup"`

	TargetCustomer *DefaultRelationshipTargetsTargetCustomer `json:"targetCustomer"`

	TargetCustomerGroup *DefaultRelationshipTargetsTargetCustomerGroup `json:"targetCustomerGroup"`
}

func (v *DefaultAssetRelationshipTargetsEntityRelationshipTargets) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DefaultAssetRelationshipTargetsEntityRelationshipTargets) __premarshalJSON() (*__premarshalDefaultAssetRelationshipTargetsEntityRelationshipTargets, error) {
	var retval __premarshalDefaultAssetRelationshipTargetsEntityRelationshipTargets

	retval.TargetDevice = v.DefaultRelationshipTargets.TargetDevice
	retval.TargetDeviceGroup = v.DefaultRelationshipTargets.TargetDeviceGroup
	retval.TargetAsset = v.DefaultRelationshipTargets.TargetAsset
	retval.TargetAssetGroup = v.DefaultRelationshipTargets.TargetAssetGroup
	retval.TargetArea = v.DefaultRelationshipTargets.TargetArea
	retval.TargetAreaGroup = v.DefaultRelationshipTargets.TargetAreaGroup
	retval.TargetCustomer = v.DefaultRelationshipTargets.TargetCustomer
	retval.TargetCustomerGroup = v.DefaultRelationshipTargets.TargetCustomerGroup
	return &retval, nil
}

// Content associated with asset relationship type response.
type DefaultAssetRelationshipType struct {
	Id          string  `json:"id"`
	CreatedAt   *string `json:"createdAt"`
	UpdatedAt   *string `json:"updatedAt"`
	DeletedAt   *string `json:"deletedAt"`
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Metadata    *string `json:"metadata"`
}

// GetId returns DefaultAssetRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipType) GetId() string { return v.Id }

// GetCreatedAt returns DefaultAssetRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipType) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultAssetRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipType) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultAssetRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipType) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultAssetRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipType) GetToken() string { return v.Token }

// GetName returns DefaultAssetRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipType) GetName() *string { return v.Name }

// GetDescription returns DefaultAssetRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipType) GetDescription() *string { return v.Description }

// GetMetadata returns DefaultAssetRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultAssetRelationshipType) GetMetadata() *string { return v.Metadata }

// Content associated with asset type response.
type DefaultAssetType struct {
	Id              string  `json:"id"`
	CreatedAt       *string `json:"createdAt"`
	UpdatedAt       *string `json:"updatedAt"`
	DeletedAt       *string `json:"deletedAt"`
	Token           string  `json:"token"`
	Name            *string `json:"name"`
	Description     *string `json:"description"`
	ImageUrl        *string `json:"imageUrl"`
	Icon            *string `json:"icon"`
	BackgroundColor *string `json:"backgroundColor"`
	ForegroundColor *string `json:"foregroundColor"`
	BorderColor     *string `json:"borderColor"`
	Metadata        *string `json:"metadata"`
}

// GetId returns DefaultAssetType.Id, and is useful for accessing the field via an interface.
func (v *DefaultAssetType) GetId() string { return v.Id }

// GetCreatedAt returns DefaultAssetType.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetType) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultAssetType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetType) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultAssetType.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultAssetType) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultAssetType.Token, and is useful for accessing the field via an interface.
func (v *DefaultAssetType) GetToken() string { return v.Token }

// GetName returns DefaultAssetType.Name, and is useful for accessing the field via an interface.
func (v *DefaultAssetType) GetName() *string { return v.Name }

// GetDescription returns DefaultAssetType.Description, and is useful for accessing the field via an interface.
func (v *DefaultAssetType) GetDescription() *string { return v.Description }

// GetImageUrl returns DefaultAssetType.ImageUrl, and is useful for accessing the field via an interface.
func (v *DefaultAssetType) GetImageUrl() *string { return v.ImageUrl }

// GetIcon returns DefaultAssetType.Icon, and is useful for accessing the field via an interface.
func (v *DefaultAssetType) GetIcon() *string { return v.Icon }

// GetBackgroundColor returns DefaultAssetType.BackgroundColor, and is useful for accessing the field via an interface.
func (v *DefaultAssetType) GetBackgroundColor() *string { return v.BackgroundColor }

// GetForegroundColor returns DefaultAssetType.ForegroundColor, and is useful for accessing the field via an interface.
func (v *DefaultAssetType) GetForegroundColor() *string { return v.ForegroundColor }

// GetBorderColor returns DefaultAssetType.BorderColor, and is useful for accessing the field via an interface.
func (v *DefaultAssetType) GetBorderColor() *string { return v.BorderColor }

// GetMetadata returns DefaultAssetType.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultAssetType) GetMetadata() *string { return v.Metadata }

// Content associated with customer response.
type DefaultCustomer struct {
	Id           string                      `json:"id"`
	CreatedAt    *string                     `json:"createdAt"`
	UpdatedAt    *string                     `json:"updatedAt"`
	DeletedAt    *string                     `json:"deletedAt"`
	Token        string                      `json:"token"`
	Name         *string                     `json:"name"`
	Description  *string                     `json:"description"`
	CustomerType DefaultCustomerCustomerType `json:"customerType"`
	Metadata     *string                     `json:"metadata"`
}

// GetId returns DefaultCustomer.Id, and is useful for accessing the field via an interface.
func (v *DefaultCustomer) GetId() string { return v.Id }

// GetCreatedAt returns DefaultCustomer.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomer) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultCustomer.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomer) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultCustomer.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomer) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultCustomer.Token, and is useful for accessing the field via an interface.
func (v *DefaultCustomer) GetToken() string { return v.Token }

// GetName returns DefaultCustomer.Name, and is useful for accessing the field via an interface.
func (v *DefaultCustomer) GetName() *string { return v.Name }

// GetDescription returns DefaultCustomer.Description, and is useful for accessing the field via an interface.
func (v *DefaultCustomer) GetDescription() *string { return v.Description }

// GetCustomerType returns DefaultCustomer.CustomerType, and is useful for accessing the field via an interface.
func (v *DefaultCustomer) GetCustomerType() DefaultCustomerCustomerType { return v.CustomerType }

// GetMetadata returns DefaultCustomer.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultCustomer) GetMetadata() *string { return v.Metadata }

// DefaultCustomerCustomerType includes the requested fields of the GraphQL type CustomerType.
type DefaultCustomerCustomerType struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultCustomerCustomerType.Token, and is useful for accessing the field via an interface.
func (v *DefaultCustomerCustomerType) GetToken() string { return v.Token }

// GetName returns DefaultCustomerCustomerType.Name, and is useful for accessing the field via an interface.
func (v *DefaultCustomerCustomerType) GetName() *string { return v.Name }

// GetDescription returns DefaultCustomerCustomerType.Description, and is useful for accessing the field via an interface.
func (v *DefaultCustomerCustomerType) GetDescription() *string { return v.Description }

// Content associated with customer group.
type DefaultCustomerGroup struct {
	Id              string  `json:"id"`
	CreatedAt       *string `json:"createdAt"`
	UpdatedAt       *string `json:"updatedAt"`
	DeletedAt       *string `json:"deletedAt"`
	Token           string  `json:"token"`
	Name            *string `json:"name"`
	Description     *string `json:"description"`
	ImageUrl        *string `json:"imageUrl"`
	Icon            *string `json:"icon"`
	BackgroundColor *string `json:"backgroundColor"`
	ForegroundColor *string `json:"foregroundColor"`
	BorderColor     *string `json:"borderColor"`
	Metadata        *string `json:"metadata"`
}

// GetId returns DefaultCustomerGroup.Id, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroup) GetId() string { return v.Id }

// GetCreatedAt returns DefaultCustomerGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroup) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultCustomerGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroup) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultCustomerGroup.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroup) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultCustomerGroup.Token, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroup) GetToken() string { return v.Token }

// GetName returns DefaultCustomerGroup.Name, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroup) GetName() *string { return v.Name }

// GetDescription returns DefaultCustomerGroup.Description, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroup) GetDescription() *string { return v.Description }

// GetImageUrl returns DefaultCustomerGroup.ImageUrl, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroup) GetImageUrl() *string { return v.ImageUrl }

// GetIcon returns DefaultCustomerGroup.Icon, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroup) GetIcon() *string { return v.Icon }

// GetBackgroundColor returns DefaultCustomerGroup.BackgroundColor, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroup) GetBackgroundColor() *string { return v.BackgroundColor }

// GetForegroundColor returns DefaultCustomerGroup.ForegroundColor, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroup) GetForegroundColor() *string { return v.ForegroundColor }

// GetBorderColor returns DefaultCustomerGroup.BorderColor, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroup) GetBorderColor() *string { return v.BorderColor }

// GetMetadata returns DefaultCustomerGroup.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroup) GetMetadata() *string { return v.Metadata }

// Content associated with customer group relationship.
type DefaultCustomerGroupRelationship struct {
	Id                  string                                                                        `json:"id"`
	CreatedAt           *string                                                                       `json:"createdAt"`
	UpdatedAt           *string                                                                       `json:"updatedAt"`
	DeletedAt           *string                                                                       `json:"deletedAt"`
	Token               string                                                                        `json:"token"`
	SourceCustomerGroup DefaultCustomerGroupRelationshipSourceCustomerGroup                           `json:"sourceCustomerGroup"`
	Targets             DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets              `json:"targets"`
	RelationshipType    DefaultCustomerGroupRelationshipRelationshipTypeCustomerGroupRelationshipType `json:"relationshipType"`
	Metadata            *string                                                                       `json:"metadata"`
}

// GetId returns DefaultCustomerGroupRelationship.Id, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationship) GetId() string { return v.Id }

// GetCreatedAt returns DefaultCustomerGroupRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationship) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultCustomerGroupRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationship) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultCustomerGroupRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationship) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultCustomerGroupRelationship.Token, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationship) GetToken() string { return v.Token }

// GetSourceCustomerGroup returns DefaultCustomerGroupRelationship.SourceCustomerGroup, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationship) GetSourceCustomerGroup() DefaultCustomerGroupRelationshipSourceCustomerGroup {
	return v.SourceCustomerGroup
}

// GetTargets returns DefaultCustomerGroupRelationship.Targets, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationship) GetTargets() DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets {
	return v.Targets
}

// GetRelationshipType returns DefaultCustomerGroupRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationship) GetRelationshipType() DefaultCustomerGroupRelationshipRelationshipTypeCustomerGroupRelationshipType {
	return v.RelationshipType
}

// GetMetadata returns DefaultCustomerGroupRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationship) GetMetadata() *string { return v.Metadata }

// DefaultCustomerGroupRelationshipRelationshipTypeCustomerGroupRelationshipType includes the requested fields of the GraphQL type CustomerGroupRelationshipType.
type DefaultCustomerGroupRelationshipRelationshipTypeCustomerGroupRelationshipType struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultCustomerGroupRelationshipRelationshipTypeCustomerGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipRelationshipTypeCustomerGroupRelationshipType) GetToken() string {
	return v.Token
}

// GetName returns DefaultCustomerGroupRelationshipRelationshipTypeCustomerGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipRelationshipTypeCustomerGroupRelationshipType) GetName() *string {
	return v.Name
}

// GetDescription returns DefaultCustomerGroupRelationshipRelationshipTypeCustomerGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipRelationshipTypeCustomerGroupRelationshipType) GetDescription() *string {
	return v.Description
}

// DefaultCustomerGroupRelationshipSourceCustomerGroup includes the requested fields of the GraphQL type CustomerGroup.
type DefaultCustomerGroupRelationshipSourceCustomerGroup struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultCustomerGroupRelationshipSourceCustomerGroup.Token, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipSourceCustomerGroup) GetToken() string { return v.Token }

// GetName returns DefaultCustomerGroupRelationshipSourceCustomerGroup.Name, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipSourceCustomerGroup) GetName() *string { return v.Name }

// GetDescription returns DefaultCustomerGroupRelationshipSourceCustomerGroup.Description, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipSourceCustomerGroup) GetDescription() *string {
	return v.Description
}

// DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets includes the requested fields of the GraphQL type EntityRelationshipTargets.
type DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets struct {
	DefaultRelationshipTargets `json:"-"`
}

// GetTargetDevice returns DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets.TargetDevice, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets) GetTargetDevice() *DefaultRelationshipTargetsTargetDevice {
	return v.DefaultRelationshipTargets.TargetDevice
}

// GetTargetDeviceGroup returns DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets.TargetDeviceGroup, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets) GetTargetDeviceGroup() *DefaultRelationshipTargetsTargetDeviceGroup {
	return v.DefaultRelationshipTargets.TargetDeviceGroup
}

// GetTargetAsset returns DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets.TargetAsset, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets) GetTargetAsset() *DefaultRelationshipTargetsTargetAsset {
	return v.DefaultRelationshipTargets.TargetAsset
}

// GetTargetAssetGroup returns DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets.TargetAssetGroup, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets) GetTargetAssetGroup() *DefaultRelationshipTargetsTargetAssetGroup {
	return v.DefaultRelationshipTargets.TargetAssetGroup
}

// GetTargetArea returns DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets.TargetArea, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets) GetTargetArea() *DefaultRelationshipTargetsTargetArea {
	return v.DefaultRelationshipTargets.TargetArea
}

// GetTargetAreaGroup returns DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets.TargetAreaGroup, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets) GetTargetAreaGroup() *DefaultRelationshipTargetsTargetAreaGroup {
	return v.DefaultRelationshipTargets.TargetAreaGroup
}

// GetTargetCustomer returns DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets.TargetCustomer, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets) GetTargetCustomer() *DefaultRelationshipTargetsTargetCustomer {
	return v.DefaultRelationshipTargets.TargetCustomer
}

// GetTargetCustomerGroup returns DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets.TargetCustomerGroup, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets) GetTargetCustomerGroup() *DefaultRelationshipTargetsTargetCustomerGroup {
	return v.DefaultRelationshipTargets.TargetCustomerGroup
}

func (v *DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets
		graphql.NoUnmarshalJSON
	}
	firstPass.DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultRelationshipTargets)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets struct {
	TargetDevice *DefaultRelationshipTargetsTargetDevice `json:"targetDevice"`

	TargetDeviceGroup *DefaultRelationshipTargetsTargetDeviceGroup `json:"targetDeviceGroup"`

	TargetAsset *DefaultRelationshipTargetsTargetAsset `json:"targetAsset"`

	TargetAssetGroup *DefaultRelationshipTargetsTargetAssetGroup `json:"targetAssetGroup"`

	TargetArea *DefaultRelationshipTargetsTargetArea `json:"targetArea"`

	TargetAreaGroup *DefaultRelationshipTargetsTargetAreaGroup `json:"targetAreaGroup"`

	TargetCustomer *DefaultRelationshipTargetsTargetCustomer `json:"targetCustomer"`

	TargetCustomerGroup *DefaultRelationshipTargetsTargetCustomerGroup `json:"targetCustomerGroup"`
}

func (v *DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets) __premarshalJSON() (*__premarshalDefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets, error) {
	var retval __premarshalDefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets

	retval.TargetDevice = v.DefaultRelationshipTargets.TargetDevice
	retval.TargetDeviceGroup = v.DefaultRelationshipTargets.TargetDeviceGroup
	retval.TargetAsset = v.DefaultRelationshipTargets.TargetAsset
	retval.TargetAssetGroup = v.DefaultRelationshipTargets.TargetAssetGroup
	retval.TargetArea = v.DefaultRelationshipTargets.TargetArea
	retval.TargetAreaGroup = v.DefaultRelationshipTargets.TargetAreaGroup
	retval.TargetCustomer = v.DefaultRelationshipTargets.TargetCustomer
	retval.TargetCustomerGroup = v.DefaultRelationshipTargets.TargetCustomerGroup
	return &retval, nil
}

// Content associated with customer group relationship type.
type DefaultCustomerGroupRelationshipType struct {
	Id          string  `json:"id"`
	CreatedAt   *string `json:"createdAt"`
	UpdatedAt   *string `json:"updatedAt"`
	DeletedAt   *string `json:"deletedAt"`
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Metadata    *string `json:"metadata"`
}

// GetId returns DefaultCustomerGroupRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipType) GetId() string { return v.Id }

// GetCreatedAt returns DefaultCustomerGroupRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipType) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultCustomerGroupRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipType) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultCustomerGroupRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipType) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultCustomerGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipType) GetToken() string { return v.Token }

// GetName returns DefaultCustomerGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipType) GetName() *string { return v.Name }

// GetDescription returns DefaultCustomerGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipType) GetDescription() *string { return v.Description }

// GetMetadata returns DefaultCustomerGroupRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultCustomerGroupRelationshipType) GetMetadata() *string { return v.Metadata }

// Content associated with customer relationship response.
type DefaultCustomerRelationship struct {
	Id               string                                                              `json:"id"`
	CreatedAt        *string                                                             `json:"createdAt"`
	UpdatedAt        *string                                                             `json:"updatedAt"`
	DeletedAt        *string                                                             `json:"deletedAt"`
	Token            string                                                              `json:"token"`
	SourceCustomer   DefaultCustomerRelationshipSourceCustomer                           `json:"sourceCustomer"`
	Targets          DefaultCustomerRelationshipTargetsEntityRelationshipTargets         `json:"targets"`
	RelationshipType DefaultCustomerRelationshipRelationshipTypeCustomerRelationshipType `json:"relationshipType"`
	Metadata         *string                                                             `json:"metadata"`
}

// GetId returns DefaultCustomerRelationship.Id, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationship) GetId() string { return v.Id }

// GetCreatedAt returns DefaultCustomerRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationship) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultCustomerRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationship) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultCustomerRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationship) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultCustomerRelationship.Token, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationship) GetToken() string { return v.Token }

// GetSourceCustomer returns DefaultCustomerRelationship.SourceCustomer, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationship) GetSourceCustomer() DefaultCustomerRelationshipSourceCustomer {
	return v.SourceCustomer
}

// GetTargets returns DefaultCustomerRelationship.Targets, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationship) GetTargets() DefaultCustomerRelationshipTargetsEntityRelationshipTargets {
	return v.Targets
}

// GetRelationshipType returns DefaultCustomerRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationship) GetRelationshipType() DefaultCustomerRelationshipRelationshipTypeCustomerRelationshipType {
	return v.RelationshipType
}

// GetMetadata returns DefaultCustomerRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationship) GetMetadata() *string { return v.Metadata }

// DefaultCustomerRelationshipRelationshipTypeCustomerRelationshipType includes the requested fields of the GraphQL type CustomerRelationshipType.
type DefaultCustomerRelationshipRelationshipTypeCustomerRelationshipType struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultCustomerRelationshipRelationshipTypeCustomerRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipRelationshipTypeCustomerRelationshipType) GetToken() string {
	return v.Token
}

// GetName returns DefaultCustomerRelationshipRelationshipTypeCustomerRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipRelationshipTypeCustomerRelationshipType) GetName() *string {
	return v.Name
}

// GetDescription returns DefaultCustomerRelationshipRelationshipTypeCustomerRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipRelationshipTypeCustomerRelationshipType) GetDescription() *string {
	return v.Description
}

// DefaultCustomerRelationshipSourceCustomer includes the requested fields of the GraphQL type Customer.
type DefaultCustomerRelationshipSourceCustomer struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultCustomerRelationshipSourceCustomer.Token, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipSourceCustomer) GetToken() string { return v.Token }

// GetName returns DefaultCustomerRelationshipSourceCustomer.Name, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipSourceCustomer) GetName() *string { return v.Name }

// GetDescription returns DefaultCustomerRelationshipSourceCustomer.Description, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipSourceCustomer) GetDescription() *string { return v.Description }

// DefaultCustomerRelationshipTargetsEntityRelationshipTargets includes the requested fields of the GraphQL type EntityRelationshipTargets.
type DefaultCustomerRelationshipTargetsEntityRelationshipTargets struct {
	DefaultRelationshipTargets `json:"-"`
}

// GetTargetDevice returns DefaultCustomerRelationshipTargetsEntityRelationshipTargets.TargetDevice, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipTargetsEntityRelationshipTargets) GetTargetDevice() *DefaultRelationshipTargetsTargetDevice {
	return v.DefaultRelationshipTargets.TargetDevice
}

// GetTargetDeviceGroup returns DefaultCustomerRelationshipTargetsEntityRelationshipTargets.TargetDeviceGroup, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipTargetsEntityRelationshipTargets) GetTargetDeviceGroup() *DefaultRelationshipTargetsTargetDeviceGroup {
	return v.DefaultRelationshipTargets.TargetDeviceGroup
}

// GetTargetAsset returns DefaultCustomerRelationshipTargetsEntityRelationshipTargets.TargetAsset, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipTargetsEntityRelationshipTargets) GetTargetAsset() *DefaultRelationshipTargetsTargetAsset {
	return v.DefaultRelationshipTargets.TargetAsset
}

// GetTargetAssetGroup returns DefaultCustomerRelationshipTargetsEntityRelationshipTargets.TargetAssetGroup, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipTargetsEntityRelationshipTargets) GetTargetAssetGroup() *DefaultRelationshipTargetsTargetAssetGroup {
	return v.DefaultRelationshipTargets.TargetAssetGroup
}

// GetTargetArea returns DefaultCustomerRelationshipTargetsEntityRelationshipTargets.TargetArea, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipTargetsEntityRelationshipTargets) GetTargetArea() *DefaultRelationshipTargetsTargetArea {
	return v.DefaultRelationshipTargets.TargetArea
}

// GetTargetAreaGroup returns DefaultCustomerRelationshipTargetsEntityRelationshipTargets.TargetAreaGroup, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipTargetsEntityRelationshipTargets) GetTargetAreaGroup() *DefaultRelationshipTargetsTargetAreaGroup {
	return v.DefaultRelationshipTargets.TargetAreaGroup
}

// GetTargetCustomer returns DefaultCustomerRelationshipTargetsEntityRelationshipTargets.TargetCustomer, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipTargetsEntityRelationshipTargets) GetTargetCustomer() *DefaultRelationshipTargetsTargetCustomer {
	return v.DefaultRelationshipTargets.TargetCustomer
}

// GetTargetCustomerGroup returns DefaultCustomerRelationshipTargetsEntityRelationshipTargets.TargetCustomerGroup, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipTargetsEntityRelationshipTargets) GetTargetCustomerGroup() *DefaultRelationshipTargetsTargetCustomerGroup {
	return v.DefaultRelationshipTargets.TargetCustomerGroup
}

func (v *DefaultCustomerRelationshipTargetsEntityRelationshipTargets) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DefaultCustomerRelationshipTargetsEntityRelationshipTargets
		graphql.NoUnmarshalJSON
	}
	firstPass.DefaultCustomerRelationshipTargetsEntityRelationshipTargets = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultRelationshipTargets)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDefaultCustomerRelationshipTargetsEntityRelationshipTargets struct {
	TargetDevice *DefaultRelationshipTargetsTargetDevice `json:"targetDevice"`

	TargetDeviceGroup *DefaultRelationshipTargetsTargetDeviceGroup `json:"targetDeviceGroup"`

	TargetAsset *DefaultRelationshipTargetsTargetAsset `json:"targetAsset"`

	TargetAssetGroup *DefaultRelationshipTargetsTargetAssetGroup `json:"targetAssetGroup"`

	TargetArea *DefaultRelationshipTargetsTargetArea `json:"targetArea"`

	TargetAreaGroup *DefaultRelationshipTargetsTargetAreaGroup `json:"targetAreaGroup"`

	TargetCustomer *DefaultRelationshipTargetsTargetCustomer `json:"targetCustomer"`

	TargetCustomerGroup *DefaultRelationshipTargetsTargetCustomerGroup `json:"targetCustomerGroup"`
}

func (v *DefaultCustomerRelationshipTargetsEntityRelationshipTargets) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DefaultCustomerRelationshipTargetsEntityRelationshipTargets) __premarshalJSON() (*__premarshalDefaultCustomerRelationshipTargetsEntityRelationshipTargets, error) {
	var retval __premarshalDefaultCustomerRelationshipTargetsEntityRelationshipTargets

	retval.TargetDevice = v.DefaultRelationshipTargets.TargetDevice
	retval.TargetDeviceGroup = v.DefaultRelationshipTargets.TargetDeviceGroup
	retval.TargetAsset = v.DefaultRelationshipTargets.TargetAsset
	retval.TargetAssetGroup = v.DefaultRelationshipTargets.TargetAssetGroup
	retval.TargetArea = v.DefaultRelationshipTargets.TargetArea
	retval.TargetAreaGroup = v.DefaultRelationshipTargets.TargetAreaGroup
	retval.TargetCustomer = v.DefaultRelationshipTargets.TargetCustomer
	retval.TargetCustomerGroup = v.DefaultRelationshipTargets.TargetCustomerGroup
	return &retval, nil
}

// Content associated with customer relationship type response.
type DefaultCustomerRelationshipType struct {
	Id          string  `json:"id"`
	CreatedAt   *string `json:"createdAt"`
	UpdatedAt   *string `json:"updatedAt"`
	DeletedAt   *string `json:"deletedAt"`
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Metadata    *string `json:"metadata"`
}

// GetId returns DefaultCustomerRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipType) GetId() string { return v.Id }

// GetCreatedAt returns DefaultCustomerRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipType) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultCustomerRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipType) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultCustomerRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipType) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultCustomerRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipType) GetToken() string { return v.Token }

// GetName returns DefaultCustomerRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipType) GetName() *string { return v.Name }

// GetDescription returns DefaultCustomerRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipType) GetDescription() *string { return v.Description }

// GetMetadata returns DefaultCustomerRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultCustomerRelationshipType) GetMetadata() *string { return v.Metadata }

// Content associated with customer type response.
type DefaultCustomerType struct {
	Id              string  `json:"id"`
	CreatedAt       *string `json:"createdAt"`
	UpdatedAt       *string `json:"updatedAt"`
	DeletedAt       *string `json:"deletedAt"`
	Token           string  `json:"token"`
	Name            *string `json:"name"`
	Description     *string `json:"description"`
	ImageUrl        *string `json:"imageUrl"`
	Icon            *string `json:"icon"`
	BackgroundColor *string `json:"backgroundColor"`
	ForegroundColor *string `json:"foregroundColor"`
	BorderColor     *string `json:"borderColor"`
	Metadata        *string `json:"metadata"`
}

// GetId returns DefaultCustomerType.Id, and is useful for accessing the field via an interface.
func (v *DefaultCustomerType) GetId() string { return v.Id }

// GetCreatedAt returns DefaultCustomerType.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerType) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultCustomerType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerType) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultCustomerType.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultCustomerType) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultCustomerType.Token, and is useful for accessing the field via an interface.
func (v *DefaultCustomerType) GetToken() string { return v.Token }

// GetName returns DefaultCustomerType.Name, and is useful for accessing the field via an interface.
func (v *DefaultCustomerType) GetName() *string { return v.Name }

// GetDescription returns DefaultCustomerType.Description, and is useful for accessing the field via an interface.
func (v *DefaultCustomerType) GetDescription() *string { return v.Description }

// GetImageUrl returns DefaultCustomerType.ImageUrl, and is useful for accessing the field via an interface.
func (v *DefaultCustomerType) GetImageUrl() *string { return v.ImageUrl }

// GetIcon returns DefaultCustomerType.Icon, and is useful for accessing the field via an interface.
func (v *DefaultCustomerType) GetIcon() *string { return v.Icon }

// GetBackgroundColor returns DefaultCustomerType.BackgroundColor, and is useful for accessing the field via an interface.
func (v *DefaultCustomerType) GetBackgroundColor() *string { return v.BackgroundColor }

// GetForegroundColor returns DefaultCustomerType.ForegroundColor, and is useful for accessing the field via an interface.
func (v *DefaultCustomerType) GetForegroundColor() *string { return v.ForegroundColor }

// GetBorderColor returns DefaultCustomerType.BorderColor, and is useful for accessing the field via an interface.
func (v *DefaultCustomerType) GetBorderColor() *string { return v.BorderColor }

// GetMetadata returns DefaultCustomerType.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultCustomerType) GetMetadata() *string { return v.Metadata }

// Content associated with a device response.
type DefaultDevice struct {
	Id          string                  `json:"id"`
	CreatedAt   *string                 `json:"createdAt"`
	UpdatedAt   *string                 `json:"updatedAt"`
	DeletedAt   *string                 `json:"deletedAt"`
	Token       string                  `json:"token"`
	Name        *string                 `json:"name"`
	Description *string                 `json:"description"`
	DeviceType  DefaultDeviceDeviceType `json:"deviceType"`
	Metadata    *string                 `json:"metadata"`
}

// GetId returns DefaultDevice.Id, and is useful for accessing the field via an interface.
func (v *DefaultDevice) GetId() string { return v.Id }

// GetCreatedAt returns DefaultDevice.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultDevice) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultDevice.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultDevice) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultDevice.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultDevice) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultDevice.Token, and is useful for accessing the field via an interface.
func (v *DefaultDevice) GetToken() string { return v.Token }

// GetName returns DefaultDevice.Name, and is useful for accessing the field via an interface.
func (v *DefaultDevice) GetName() *string { return v.Name }

// GetDescription returns DefaultDevice.Description, and is useful for accessing the field via an interface.
func (v *DefaultDevice) GetDescription() *string { return v.Description }

// GetDeviceType returns DefaultDevice.DeviceType, and is useful for accessing the field via an interface.
func (v *DefaultDevice) GetDeviceType() DefaultDeviceDeviceType { return v.DeviceType }

// GetMetadata returns DefaultDevice.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultDevice) GetMetadata() *string { return v.Metadata }

// DefaultDeviceDeviceType includes the requested fields of the GraphQL type DeviceType.
type DefaultDeviceDeviceType struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultDeviceDeviceType.Token, and is useful for accessing the field via an interface.
func (v *DefaultDeviceDeviceType) GetToken() string { return v.Token }

// GetName returns DefaultDeviceDeviceType.Name, and is useful for accessing the field via an interface.
func (v *DefaultDeviceDeviceType) GetName() *string { return v.Name }

// GetDescription returns DefaultDeviceDeviceType.Description, and is useful for accessing the field via an interface.
func (v *DefaultDeviceDeviceType) GetDescription() *string { return v.Description }

// Content associated with a device group.
type DefaultDeviceGroup struct {
	Id              string  `json:"id"`
	CreatedAt       *string `json:"createdAt"`
	UpdatedAt       *string `json:"updatedAt"`
	DeletedAt       *string `json:"deletedAt"`
	Token           string  `json:"token"`
	Name            *string `json:"name"`
	Description     *string `json:"description"`
	ImageUrl        *string `json:"imageUrl"`
	Icon            *string `json:"icon"`
	BackgroundColor *string `json:"backgroundColor"`
	ForegroundColor *string `json:"foregroundColor"`
	BorderColor     *string `json:"borderColor"`
	Metadata        *string `json:"metadata"`
}

// GetId returns DefaultDeviceGroup.Id, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroup) GetId() string { return v.Id }

// GetCreatedAt returns DefaultDeviceGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroup) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultDeviceGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroup) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultDeviceGroup.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroup) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultDeviceGroup.Token, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroup) GetToken() string { return v.Token }

// GetName returns DefaultDeviceGroup.Name, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroup) GetName() *string { return v.Name }

// GetDescription returns DefaultDeviceGroup.Description, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroup) GetDescription() *string { return v.Description }

// GetImageUrl returns DefaultDeviceGroup.ImageUrl, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroup) GetImageUrl() *string { return v.ImageUrl }

// GetIcon returns DefaultDeviceGroup.Icon, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroup) GetIcon() *string { return v.Icon }

// GetBackgroundColor returns DefaultDeviceGroup.BackgroundColor, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroup) GetBackgroundColor() *string { return v.BackgroundColor }

// GetForegroundColor returns DefaultDeviceGroup.ForegroundColor, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroup) GetForegroundColor() *string { return v.ForegroundColor }

// GetBorderColor returns DefaultDeviceGroup.BorderColor, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroup) GetBorderColor() *string { return v.BorderColor }

// GetMetadata returns DefaultDeviceGroup.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroup) GetMetadata() *string { return v.Metadata }

// Content associated with a device group relationship.
type DefaultDeviceGroupRelationship struct {
	Id                string                                                                    `json:"id"`
	CreatedAt         *string                                                                   `json:"createdAt"`
	UpdatedAt         *string                                                                   `json:"updatedAt"`
	DeletedAt         *string                                                                   `json:"deletedAt"`
	Token             string                                                                    `json:"token"`
	SourceDeviceGroup DefaultDeviceGroupRelationshipSourceDeviceGroup                           `json:"sourceDeviceGroup"`
	Targets           DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets            `json:"targets"`
	RelationshipType  DefaultDeviceGroupRelationshipRelationshipTypeDeviceGroupRelationshipType `json:"relationshipType"`
	Metadata          *string                                                                   `json:"metadata"`
}

// GetId returns DefaultDeviceGroupRelationship.Id, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationship) GetId() string { return v.Id }

// GetCreatedAt returns DefaultDeviceGroupRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationship) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultDeviceGroupRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationship) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultDeviceGroupRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationship) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultDeviceGroupRelationship.Token, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationship) GetToken() string { return v.Token }

// GetSourceDeviceGroup returns DefaultDeviceGroupRelationship.SourceDeviceGroup, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationship) GetSourceDeviceGroup() DefaultDeviceGroupRelationshipSourceDeviceGroup {
	return v.SourceDeviceGroup
}

// GetTargets returns DefaultDeviceGroupRelationship.Targets, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationship) GetTargets() DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets {
	return v.Targets
}

// GetRelationshipType returns DefaultDeviceGroupRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationship) GetRelationshipType() DefaultDeviceGroupRelationshipRelationshipTypeDeviceGroupRelationshipType {
	return v.RelationshipType
}

// GetMetadata returns DefaultDeviceGroupRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationship) GetMetadata() *string { return v.Metadata }

// DefaultDeviceGroupRelationshipRelationshipTypeDeviceGroupRelationshipType includes the requested fields of the GraphQL type DeviceGroupRelationshipType.
type DefaultDeviceGroupRelationshipRelationshipTypeDeviceGroupRelationshipType struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultDeviceGroupRelationshipRelationshipTypeDeviceGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipRelationshipTypeDeviceGroupRelationshipType) GetToken() string {
	return v.Token
}

// GetName returns DefaultDeviceGroupRelationshipRelationshipTypeDeviceGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipRelationshipTypeDeviceGroupRelationshipType) GetName() *string {
	return v.Name
}

// GetDescription returns DefaultDeviceGroupRelationshipRelationshipTypeDeviceGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipRelationshipTypeDeviceGroupRelationshipType) GetDescription() *string {
	return v.Description
}

// DefaultDeviceGroupRelationshipSourceDeviceGroup includes the requested fields of the GraphQL type DeviceGroup.
type DefaultDeviceGroupRelationshipSourceDeviceGroup struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultDeviceGroupRelationshipSourceDeviceGroup.Token, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipSourceDeviceGroup) GetToken() string { return v.Token }

// GetName returns DefaultDeviceGroupRelationshipSourceDeviceGroup.Name, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipSourceDeviceGroup) GetName() *string { return v.Name }

// GetDescription returns DefaultDeviceGroupRelationshipSourceDeviceGroup.Description, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipSourceDeviceGroup) GetDescription() *string {
	return v.Description
}

// DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets includes the requested fields of the GraphQL type EntityRelationshipTargets.
type DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets struct {
	DefaultRelationshipTargets `json:"-"`
}

// GetTargetDevice returns DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets.TargetDevice, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets) GetTargetDevice() *DefaultRelationshipTargetsTargetDevice {
	return v.DefaultRelationshipTargets.TargetDevice
}

// GetTargetDeviceGroup returns DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets.TargetDeviceGroup, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets) GetTargetDeviceGroup() *DefaultRelationshipTargetsTargetDeviceGroup {
	return v.DefaultRelationshipTargets.TargetDeviceGroup
}

// GetTargetAsset returns DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets.TargetAsset, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets) GetTargetAsset() *DefaultRelationshipTargetsTargetAsset {
	return v.DefaultRelationshipTargets.TargetAsset
}

// GetTargetAssetGroup returns DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets.TargetAssetGroup, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets) GetTargetAssetGroup() *DefaultRelationshipTargetsTargetAssetGroup {
	return v.DefaultRelationshipTargets.TargetAssetGroup
}

// GetTargetArea returns DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets.TargetArea, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets) GetTargetArea() *DefaultRelationshipTargetsTargetArea {
	return v.DefaultRelationshipTargets.TargetArea
}

// GetTargetAreaGroup returns DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets.TargetAreaGroup, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets) GetTargetAreaGroup() *DefaultRelationshipTargetsTargetAreaGroup {
	return v.DefaultRelationshipTargets.TargetAreaGroup
}

// GetTargetCustomer returns DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets.TargetCustomer, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets) GetTargetCustomer() *DefaultRelationshipTargetsTargetCustomer {
	return v.DefaultRelationshipTargets.TargetCustomer
}

// GetTargetCustomerGroup returns DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets.TargetCustomerGroup, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets) GetTargetCustomerGroup() *DefaultRelationshipTargetsTargetCustomerGroup {
	return v.DefaultRelationshipTargets.TargetCustomerGroup
}

func (v *DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets
		graphql.NoUnmarshalJSON
	}
	firstPass.DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultRelationshipTargets)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets struct {
	TargetDevice *DefaultRelationshipTargetsTargetDevice `json:"targetDevice"`

	TargetDeviceGroup *DefaultRelationshipTargetsTargetDeviceGroup `json:"targetDeviceGroup"`

	TargetAsset *DefaultRelationshipTargetsTargetAsset `json:"targetAsset"`

	TargetAssetGroup *DefaultRelationshipTargetsTargetAssetGroup `json:"targetAssetGroup"`

	TargetArea *DefaultRelationshipTargetsTargetArea `json:"targetArea"`

	TargetAreaGroup *DefaultRelationshipTargetsTargetAreaGroup `json:"targetAreaGroup"`

	TargetCustomer *DefaultRelationshipTargetsTargetCustomer `json:"targetCustomer"`

	TargetCustomerGroup *DefaultRelationshipTargetsTargetCustomerGroup `json:"targetCustomerGroup"`
}

func (v *DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets) __premarshalJSON() (*__premarshalDefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets, error) {
	var retval __premarshalDefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets

	retval.TargetDevice = v.DefaultRelationshipTargets.TargetDevice
	retval.TargetDeviceGroup = v.DefaultRelationshipTargets.TargetDeviceGroup
	retval.TargetAsset = v.DefaultRelationshipTargets.TargetAsset
	retval.TargetAssetGroup = v.DefaultRelationshipTargets.TargetAssetGroup
	retval.TargetArea = v.DefaultRelationshipTargets.TargetArea
	retval.TargetAreaGroup = v.DefaultRelationshipTargets.TargetAreaGroup
	retval.TargetCustomer = v.DefaultRelationshipTargets.TargetCustomer
	retval.TargetCustomerGroup = v.DefaultRelationshipTargets.TargetCustomerGroup
	return &retval, nil
}

// Content associated with a device group relationship type.
type DefaultDeviceGroupRelationshipType struct {
	Id          string  `json:"id"`
	CreatedAt   *string `json:"createdAt"`
	UpdatedAt   *string `json:"updatedAt"`
	DeletedAt   *string `json:"deletedAt"`
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Metadata    *string `json:"metadata"`
}

// GetId returns DefaultDeviceGroupRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipType) GetId() string { return v.Id }

// GetCreatedAt returns DefaultDeviceGroupRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipType) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultDeviceGroupRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipType) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultDeviceGroupRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipType) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultDeviceGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipType) GetToken() string { return v.Token }

// GetName returns DefaultDeviceGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipType) GetName() *string { return v.Name }

// GetDescription returns DefaultDeviceGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipType) GetDescription() *string { return v.Description }

// GetMetadata returns DefaultDeviceGroupRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultDeviceGroupRelationshipType) GetMetadata() *string { return v.Metadata }

// Content associated with a device relationship response.
type DefaultDeviceRelationship struct {
	Id               string                                                          `json:"id"`
	CreatedAt        *string                                                         `json:"createdAt"`
	UpdatedAt        *string                                                         `json:"updatedAt"`
	DeletedAt        *string                                                         `json:"deletedAt"`
	Token            string                                                          `json:"token"`
	SourceDevice     DefaultDeviceRelationshipSourceDevice                           `json:"sourceDevice"`
	Targets          DefaultDeviceRelationshipTargetsEntityRelationshipTargets       `json:"targets"`
	RelationshipType DefaultDeviceRelationshipRelationshipTypeDeviceRelationshipType `json:"relationshipType"`
	Metadata         *string                                                         `json:"metadata"`
}

// GetId returns DefaultDeviceRelationship.Id, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationship) GetId() string { return v.Id }

// GetCreatedAt returns DefaultDeviceRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationship) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultDeviceRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationship) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultDeviceRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationship) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultDeviceRelationship.Token, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationship) GetToken() string { return v.Token }

// GetSourceDevice returns DefaultDeviceRelationship.SourceDevice, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationship) GetSourceDevice() DefaultDeviceRelationshipSourceDevice {
	return v.SourceDevice
}

// GetTargets returns DefaultDeviceRelationship.Targets, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationship) GetTargets() DefaultDeviceRelationshipTargetsEntityRelationshipTargets {
	return v.Targets
}

// GetRelationshipType returns DefaultDeviceRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationship) GetRelationshipType() DefaultDeviceRelationshipRelationshipTypeDeviceRelationshipType {
	return v.RelationshipType
}

// GetMetadata returns DefaultDeviceRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationship) GetMetadata() *string { return v.Metadata }

// DefaultDeviceRelationshipRelationshipTypeDeviceRelationshipType includes the requested fields of the GraphQL type DeviceRelationshipType.
type DefaultDeviceRelationshipRelationshipTypeDeviceRelationshipType struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultDeviceRelationshipRelationshipTypeDeviceRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipRelationshipTypeDeviceRelationshipType) GetToken() string {
	return v.Token
}

// GetName returns DefaultDeviceRelationshipRelationshipTypeDeviceRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipRelationshipTypeDeviceRelationshipType) GetName() *string {
	return v.Name
}

// GetDescription returns DefaultDeviceRelationshipRelationshipTypeDeviceRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipRelationshipTypeDeviceRelationshipType) GetDescription() *string {
	return v.Description
}

// DefaultDeviceRelationshipSourceDevice includes the requested fields of the GraphQL type Device.
type DefaultDeviceRelationshipSourceDevice struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

// GetToken returns DefaultDeviceRelationshipSourceDevice.Token, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipSourceDevice) GetToken() string { return v.Token }

// GetName returns DefaultDeviceRelationshipSourceDevice.Name, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipSourceDevice) GetName() *string { return v.Name }

// GetDescription returns DefaultDeviceRelationshipSourceDevice.Description, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipSourceDevice) GetDescription() *string { return v.Description }

// DefaultDeviceRelationshipTargetsEntityRelationshipTargets includes the requested fields of the GraphQL type EntityRelationshipTargets.
type DefaultDeviceRelationshipTargetsEntityRelationshipTargets struct {
	DefaultRelationshipTargets `json:"-"`
}

// GetTargetDevice returns DefaultDeviceRelationshipTargetsEntityRelationshipTargets.TargetDevice, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipTargetsEntityRelationshipTargets) GetTargetDevice() *DefaultRelationshipTargetsTargetDevice {
	return v.DefaultRelationshipTargets.TargetDevice
}

// GetTargetDeviceGroup returns DefaultDeviceRelationshipTargetsEntityRelationshipTargets.TargetDeviceGroup, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipTargetsEntityRelationshipTargets) GetTargetDeviceGroup() *DefaultRelationshipTargetsTargetDeviceGroup {
	return v.DefaultRelationshipTargets.TargetDeviceGroup
}

// GetTargetAsset returns DefaultDeviceRelationshipTargetsEntityRelationshipTargets.TargetAsset, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipTargetsEntityRelationshipTargets) GetTargetAsset() *DefaultRelationshipTargetsTargetAsset {
	return v.DefaultRelationshipTargets.TargetAsset
}

// GetTargetAssetGroup returns DefaultDeviceRelationshipTargetsEntityRelationshipTargets.TargetAssetGroup, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipTargetsEntityRelationshipTargets) GetTargetAssetGroup() *DefaultRelationshipTargetsTargetAssetGroup {
	return v.DefaultRelationshipTargets.TargetAssetGroup
}

// GetTargetArea returns DefaultDeviceRelationshipTargetsEntityRelationshipTargets.TargetArea, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipTargetsEntityRelationshipTargets) GetTargetArea() *DefaultRelationshipTargetsTargetArea {
	return v.DefaultRelationshipTargets.TargetArea
}

// GetTargetAreaGroup returns DefaultDeviceRelationshipTargetsEntityRelationshipTargets.TargetAreaGroup, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipTargetsEntityRelationshipTargets) GetTargetAreaGroup() *DefaultRelationshipTargetsTargetAreaGroup {
	return v.DefaultRelationshipTargets.TargetAreaGroup
}

// GetTargetCustomer returns DefaultDeviceRelationshipTargetsEntityRelationshipTargets.TargetCustomer, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipTargetsEntityRelationshipTargets) GetTargetCustomer() *DefaultRelationshipTargetsTargetCustomer {
	return v.DefaultRelationshipTargets.TargetCustomer
}

// GetTargetCustomerGroup returns DefaultDeviceRelationshipTargetsEntityRelationshipTargets.TargetCustomerGroup, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipTargetsEntityRelationshipTargets) GetTargetCustomerGroup() *DefaultRelationshipTargetsTargetCustomerGroup {
	return v.DefaultRelationshipTargets.TargetCustomerGroup
}

func (v *DefaultDeviceRelationshipTargetsEntityRelationshipTargets) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DefaultDeviceRelationshipTargetsEntityRelationshipTargets
		graphql.NoUnmarshalJSON
	}
	firstPass.DefaultDeviceRelationshipTargetsEntityRelationshipTargets = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultRelationshipTargets)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDefaultDeviceRelationshipTargetsEntityRelationshipTargets struct {
	TargetDevice *DefaultRelationshipTargetsTargetDevice `json:"targetDevice"`

	TargetDeviceGroup *DefaultRelationshipTargetsTargetDeviceGroup `json:"targetDeviceGroup"`

	TargetAsset *DefaultRelationshipTargetsTargetAsset `json:"targetAsset"`

	TargetAssetGroup *DefaultRelationshipTargetsTargetAssetGroup `json:"targetAssetGroup"`

	TargetArea *DefaultRelationshipTargetsTargetArea `json:"targetArea"`

	TargetAreaGroup *DefaultRelationshipTargetsTargetAreaGroup `json:"targetAreaGroup"`

	TargetCustomer *DefaultRelationshipTargetsTargetCustomer `json:"targetCustomer"`

	TargetCustomerGroup *DefaultRelationshipTargetsTargetCustomerGroup `json:"targetCustomerGroup"`
}

func (v *DefaultDeviceRelationshipTargetsEntityRelationshipTargets) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DefaultDeviceRelationshipTargetsEntityRelationshipTargets) __premarshalJSON() (*__premarshalDefaultDeviceRelationshipTargetsEntityRelationshipTargets, error) {
	var retval __premarshalDefaultDeviceRelationshipTargetsEntityRelationshipTargets

	retval.TargetDevice = v.DefaultRelationshipTargets.TargetDevice
	retval.TargetDeviceGroup = v.DefaultRelationshipTargets.TargetDeviceGroup
	retval.TargetAsset = v.DefaultRelationshipTargets.TargetAsset
	retval.TargetAssetGroup = v.DefaultRelationshipTargets.TargetAssetGroup
	retval.TargetArea = v.DefaultRelationshipTargets.TargetArea
	retval.TargetAreaGroup = v.DefaultRelationshipTargets.TargetAreaGroup
	retval.TargetCustomer = v.DefaultRelationshipTargets.TargetCustomer
	retval.TargetCustomerGroup = v.DefaultRelationshipTargets.TargetCustomerGroup
	return &retval, nil
}

// Content associated with a device relationship type response.
type DefaultDeviceRelationshipType struct {
	Id          string  `json:"id"`
	CreatedAt   *string `json:"createdAt"`
	UpdatedAt   *string `json:"updatedAt"`
	DeletedAt   *string `json:"deletedAt"`
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Metadata    *string `json:"metadata"`
	Tracked     bool    `json:"tracked"`
}

// GetId returns DefaultDeviceRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipType) GetId() string { return v.Id }

// GetCreatedAt returns DefaultDeviceRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipType) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultDeviceRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipType) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultDeviceRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipType) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultDeviceRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipType) GetToken() string { return v.Token }

// GetName returns DefaultDeviceRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipType) GetName() *string { return v.Name }

// GetDescription returns DefaultDeviceRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipType) GetDescription() *string { return v.Description }

// GetMetadata returns DefaultDeviceRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipType) GetMetadata() *string { return v.Metadata }

// GetTracked returns DefaultDeviceRelationshipType.Tracked, and is useful for accessing the field via an interface.
func (v *DefaultDeviceRelationshipType) GetTracked() bool { return v.Tracked }

// Content associated with a device type response.
type DefaultDeviceType struct {
	Id              string  `json:"id"`
	CreatedAt       *string `json:"createdAt"`
	UpdatedAt       *string `json:"updatedAt"`
	DeletedAt       *string `json:"deletedAt"`
	Token           string  `json:"token"`
	Name            *string `json:"name"`
	Description     *string `json:"description"`
	ImageUrl        *string `json:"imageUrl"`
	Icon            *string `json:"icon"`
	BackgroundColor *string `json:"backgroundColor"`
	ForegroundColor *string `json:"foregroundColor"`
	BorderColor     *string `json:"borderColor"`
	Metadata        *string `json:"metadata"`
}

// GetId returns DefaultDeviceType.Id, and is useful for accessing the field via an interface.
func (v *DefaultDeviceType) GetId() string { return v.Id }

// GetCreatedAt returns DefaultDeviceType.CreatedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceType) GetCreatedAt() *string { return v.CreatedAt }

// GetUpdatedAt returns DefaultDeviceType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceType) GetUpdatedAt() *string { return v.UpdatedAt }

// GetDeletedAt returns DefaultDeviceType.DeletedAt, and is useful for accessing the field via an interface.
func (v *DefaultDeviceType) GetDeletedAt() *string { return v.DeletedAt }

// GetToken returns DefaultDeviceType.Token, and is useful for accessing the field via an interface.
func (v *DefaultDeviceType) GetToken() string { return v.Token }

// GetName returns DefaultDeviceType.Name, and is useful for accessing the field via an interface.
func (v *DefaultDeviceType) GetName() *string { return v.Name }

// GetDescription returns DefaultDeviceType.Description, and is useful for accessing the field via an interface.
func (v *DefaultDeviceType) GetDescription() *string { return v.Description }

// GetImageUrl returns DefaultDeviceType.ImageUrl, and is useful for accessing the field via an interface.
func (v *DefaultDeviceType) GetImageUrl() *string { return v.ImageUrl }

// GetIcon returns DefaultDeviceType.Icon, and is useful for accessing the field via an interface.
func (v *DefaultDeviceType) GetIcon() *string { return v.Icon }

// GetBackgroundColor returns DefaultDeviceType.BackgroundColor, and is useful for accessing the field via an interface.
func (v *DefaultDeviceType) GetBackgroundColor() *string { return v.BackgroundColor }

// GetForegroundColor returns DefaultDeviceType.ForegroundColor, and is useful for accessing the field via an interface.
func (v *DefaultDeviceType) GetForegroundColor() *string { return v.ForegroundColor }

// GetBorderColor returns DefaultDeviceType.BorderColor, and is useful for accessing the field via an interface.
func (v *DefaultDeviceType) GetBorderColor() *string { return v.BorderColor }

// GetMetadata returns DefaultDeviceType.Metadata, and is useful for accessing the field via an interface.
func (v *DefaultDeviceType) GetMetadata() *string { return v.Metadata }

// Content associated with pagination.
type DefaultPagination struct {
	PageStart    *int `json:"pageStart"`
	PageEnd      *int `json:"pageEnd"`
	TotalRecords *int `json:"totalRecords"`
}

// GetPageStart returns DefaultPagination.PageStart, and is useful for accessing the field via an interface.
func (v *DefaultPagination) GetPageStart() *int { return v.PageStart }

// GetPageEnd returns DefaultPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *DefaultPagination) GetPageEnd() *int { return v.PageEnd }

// GetTotalRecords returns DefaultPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *DefaultPagination) GetTotalRecords() *int { return v.TotalRecords }

// Content associated with relationship targets.
type DefaultRelationshipTargets struct {
	TargetDevice        *DefaultRelationshipTargetsTargetDevice        `json:"targetDevice"`
	TargetDeviceGroup   *DefaultRelationshipTargetsTargetDeviceGroup   `json:"targetDeviceGroup"`
	TargetAsset         *DefaultRelationshipTargetsTargetAsset         `json:"targetAsset"`
	TargetAssetGroup    *DefaultRelationshipTargetsTargetAssetGroup    `json:"targetAssetGroup"`
	TargetArea          *DefaultRelationshipTargetsTargetArea          `json:"targetArea"`
	TargetAreaGroup     *DefaultRelationshipTargetsTargetAreaGroup     `json:"targetAreaGroup"`
	TargetCustomer      *DefaultRelationshipTargetsTargetCustomer      `json:"targetCustomer"`
	TargetCustomerGroup *DefaultRelationshipTargetsTargetCustomerGroup `json:"targetCustomerGroup"`
}

// GetTargetDevice returns DefaultRelationshipTargets.TargetDevice, and is useful for accessing the field via an interface.
func (v *DefaultRelationshipTargets) GetTargetDevice() *DefaultRelationshipTargetsTargetDevice {
	return v.TargetDevice
}

// GetTargetDeviceGroup returns DefaultRelationshipTargets.TargetDeviceGroup, and is useful for accessing the field via an interface.
func (v *DefaultRelationshipTargets) GetTargetDeviceGroup() *DefaultRelationshipTargetsTargetDeviceGroup {
	return v.TargetDeviceGroup
}

// GetTargetAsset returns DefaultRelationshipTargets.TargetAsset, and is useful for accessing the field via an interface.
func (v *DefaultRelationshipTargets) GetTargetAsset() *DefaultRelationshipTargetsTargetAsset {
	return v.TargetAsset
}

// GetTargetAssetGroup returns DefaultRelationshipTargets.TargetAssetGroup, and is useful for accessing the field via an interface.
func (v *DefaultRelationshipTargets) GetTargetAssetGroup() *DefaultRelationshipTargetsTargetAssetGroup {
	return v.TargetAssetGroup
}

// GetTargetArea returns DefaultRelationshipTargets.TargetArea, and is useful for accessing the field via an interface.
func (v *DefaultRelationshipTargets) GetTargetArea() *DefaultRelationshipTargetsTargetArea {
	return v.TargetArea
}

// GetTargetAreaGroup returns DefaultRelationshipTargets.TargetAreaGroup, and is useful for accessing the field via an interface.
func (v *DefaultRelationshipTargets) GetTargetAreaGroup() *DefaultRelationshipTargetsTargetAreaGroup {
	return v.TargetAreaGroup
}

// GetTargetCustomer returns DefaultRelationshipTargets.TargetCustomer, and is useful for accessing the field via an interface.
func (v *DefaultRelationshipTargets) GetTargetCustomer() *DefaultRelationshipTargetsTargetCustomer {
	return v.TargetCustomer
}

// GetTargetCustomerGroup returns DefaultRelationshipTargets.TargetCustomerGroup, and is useful for accessing the field via an interface.
func (v *DefaultRelationshipTargets) GetTargetCustomerGroup() *DefaultRelationshipTargetsTargetCustomerGroup {
	return v.TargetCustomerGroup
}

// DefaultRelationshipTargetsTargetArea includes the requested fields of the GraphQL type Area.
type DefaultRelationshipTargetsTargetArea struct {
	Token string `json:"token"`
}

// GetToken returns DefaultRelationshipTargetsTargetArea.Token, and is useful for accessing the field via an interface.
func (v *DefaultRelationshipTargetsTargetArea) GetToken() string { return v.Token }

// DefaultRelationshipTargetsTargetAreaGroup includes the requested fields of the GraphQL type AreaGroup.
type DefaultRelationshipTargetsTargetAreaGroup struct {
	Token string `json:"token"`
}

// GetToken returns DefaultRelationshipTargetsTargetAreaGroup.Token, and is useful for accessing the field via an interface.
func (v *DefaultRelationshipTargetsTargetAreaGroup) GetToken() string { return v.Token }

// DefaultRelationshipTargetsTargetAsset includes the requested fields of the GraphQL type Asset.
type DefaultRelationshipTargetsTargetAsset struct {
	Token string `json:"token"`
}

// GetToken returns DefaultRelationshipTargetsTargetAsset.Token, and is useful for accessing the field via an interface.
func (v *DefaultRelationshipTargetsTargetAsset) GetToken() string { return v.Token }

// DefaultRelationshipTargetsTargetAssetGroup includes the requested fields of the GraphQL type AssetGroup.
type DefaultRelationshipTargetsTargetAssetGroup struct {
	Token string `json:"token"`
}

// GetToken returns DefaultRelationshipTargetsTargetAssetGroup.Token, and is useful for accessing the field via an interface.
func (v *DefaultRelationshipTargetsTargetAssetGroup) GetToken() string { return v.Token }

// DefaultRelationshipTargetsTargetCustomer includes the requested fields of the GraphQL type Customer.
type DefaultRelationshipTargetsTargetCustomer struct {
	Token string `json:"token"`
}

// GetToken returns DefaultRelationshipTargetsTargetCustomer.Token, and is useful for accessing the field via an interface.
func (v *DefaultRelationshipTargetsTargetCustomer) GetToken() string { return v.Token }

// DefaultRelationshipTargetsTargetCustomerGroup includes the requested fields of the GraphQL type CustomerGroup.
type DefaultRelationshipTargetsTargetCustomerGroup struct {
	Token string `json:"token"`
}

// GetToken returns DefaultRelationshipTargetsTargetCustomerGroup.Token, and is useful for accessing the field via an interface.
func (v *DefaultRelationshipTargetsTargetCustomerGroup) GetToken() string { return v.Token }

// DefaultRelationshipTargetsTargetDevice includes the requested fields of the GraphQL type Device.
type DefaultRelationshipTargetsTargetDevice struct {
	Token string `json:"token"`
}

// GetToken returns DefaultRelationshipTargetsTargetDevice.Token, and is useful for accessing the field via an interface.
func (v *DefaultRelationshipTargetsTargetDevice) GetToken() string { return v.Token }

// DefaultRelationshipTargetsTargetDeviceGroup includes the requested fields of the GraphQL type DeviceGroup.
type DefaultRelationshipTargetsTargetDeviceGroup struct {
	Token string `json:"token"`
}

// GetToken returns DefaultRelationshipTargetsTargetDeviceGroup.Token, and is useful for accessing the field via an interface.
func (v *DefaultRelationshipTargetsTargetDeviceGroup) GetToken() string { return v.Token }

type EntityRelationshipTargetsCreateRequest struct {
	TargetDevice        *string `json:"targetDevice"`
	TargetDeviceGroup   *string `json:"targetDeviceGroup"`
	TargetAsset         *string `json:"targetAsset"`
	TargetAssetGroup    *string `json:"targetAssetGroup"`
	TargetArea          *string `json:"targetArea"`
	TargetAreaGroup     *string `json:"targetAreaGroup"`
	TargetCustomer      *string `json:"targetCustomer"`
	TargetCustomerGroup *string `json:"targetCustomerGroup"`
}

// GetTargetDevice returns EntityRelationshipTargetsCreateRequest.TargetDevice, and is useful for accessing the field via an interface.
func (v *EntityRelationshipTargetsCreateRequest) GetTargetDevice() *string { return v.TargetDevice }

// GetTargetDeviceGroup returns EntityRelationshipTargetsCreateRequest.TargetDeviceGroup, and is useful for accessing the field via an interface.
func (v *EntityRelationshipTargetsCreateRequest) GetTargetDeviceGroup() *string {
	return v.TargetDeviceGroup
}

// GetTargetAsset returns EntityRelationshipTargetsCreateRequest.TargetAsset, and is useful for accessing the field via an interface.
func (v *EntityRelationshipTargetsCreateRequest) GetTargetAsset() *string { return v.TargetAsset }

// GetTargetAssetGroup returns EntityRelationshipTargetsCreateRequest.TargetAssetGroup, and is useful for accessing the field via an interface.
func (v *EntityRelationshipTargetsCreateRequest) GetTargetAssetGroup() *string {
	return v.TargetAssetGroup
}

// GetTargetArea returns EntityRelationshipTargetsCreateRequest.TargetArea, and is useful for accessing the field via an interface.
func (v *EntityRelationshipTargetsCreateRequest) GetTargetArea() *string { return v.TargetArea }

// GetTargetAreaGroup returns EntityRelationshipTargetsCreateRequest.TargetAreaGroup, and is useful for accessing the field via an interface.
func (v *EntityRelationshipTargetsCreateRequest) GetTargetAreaGroup() *string {
	return v.TargetAreaGroup
}

// GetTargetCustomer returns EntityRelationshipTargetsCreateRequest.TargetCustomer, and is useful for accessing the field via an interface.
func (v *EntityRelationshipTargetsCreateRequest) GetTargetCustomer() *string { return v.TargetCustomer }

// GetTargetCustomerGroup returns EntityRelationshipTargetsCreateRequest.TargetCustomerGroup, and is useful for accessing the field via an interface.
func (v *EntityRelationshipTargetsCreateRequest) GetTargetCustomerGroup() *string {
	return v.TargetCustomerGroup
}

// __createAreaGroupInput is used internally by genqlient
type __createAreaGroupInput struct {
	Token           string  `json:"token"`
	Name            *string `json:"name"`
	Description     *string `json:"description"`
	ImageUrl        *string `json:"imageUrl"`
	Icon            *string `json:"icon"`
	BackgroundColor *string `json:"backgroundColor"`
	ForegroundColor *string `json:"foregroundColor"`
	BorderColor     *string `json:"borderColor"`
	Metadata        *string `json:"metadata"`
}

// GetToken returns __createAreaGroupInput.Token, and is useful for accessing the field via an interface.
func (v *__createAreaGroupInput) GetToken() string { return v.Token }

// GetName returns __createAreaGroupInput.Name, and is useful for accessing the field via an interface.
func (v *__createAreaGroupInput) GetName() *string { return v.Name }

// GetDescription returns __createAreaGroupInput.Description, and is useful for accessing the field via an interface.
func (v *__createAreaGroupInput) GetDescription() *string { return v.Description }

// GetImageUrl returns __createAreaGroupInput.ImageUrl, and is useful for accessing the field via an interface.
func (v *__createAreaGroupInput) GetImageUrl() *string { return v.ImageUrl }

// GetIcon returns __createAreaGroupInput.Icon, and is useful for accessing the field via an interface.
func (v *__createAreaGroupInput) GetIcon() *string { return v.Icon }

// GetBackgroundColor returns __createAreaGroupInput.BackgroundColor, and is useful for accessing the field via an interface.
func (v *__createAreaGroupInput) GetBackgroundColor() *string { return v.BackgroundColor }

// GetForegroundColor returns __createAreaGroupInput.ForegroundColor, and is useful for accessing the field via an interface.
func (v *__createAreaGroupInput) GetForegroundColor() *string { return v.ForegroundColor }

// GetBorderColor returns __createAreaGroupInput.BorderColor, and is useful for accessing the field via an interface.
func (v *__createAreaGroupInput) GetBorderColor() *string { return v.BorderColor }

// GetMetadata returns __createAreaGroupInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createAreaGroupInput) GetMetadata() *string { return v.Metadata }

// __createAreaGroupRelationshipInput is used internally by genqlient
type __createAreaGroupRelationshipInput struct {
	Token            string                                 `json:"token"`
	AreaGroup        string                                 `json:"areaGroup"`
	Targets          EntityRelationshipTargetsCreateRequest `json:"targets"`
	RelationshipType string                                 `json:"relationshipType"`
}

// GetToken returns __createAreaGroupRelationshipInput.Token, and is useful for accessing the field via an interface.
func (v *__createAreaGroupRelationshipInput) GetToken() string { return v.Token }

// GetAreaGroup returns __createAreaGroupRelationshipInput.AreaGroup, and is useful for accessing the field via an interface.
func (v *__createAreaGroupRelationshipInput) GetAreaGroup() string { return v.AreaGroup }

// GetTargets returns __createAreaGroupRelationshipInput.Targets, and is useful for accessing the field via an interface.
func (v *__createAreaGroupRelationshipInput) GetTargets() EntityRelationshipTargetsCreateRequest {
	return v.Targets
}

// GetRelationshipType returns __createAreaGroupRelationshipInput.RelationshipType, and is useful for accessing the field via an interface.
func (v *__createAreaGroupRelationshipInput) GetRelationshipType() string { return v.RelationshipType }

// __createAreaGroupRelationshipTypeInput is used internally by genqlient
type __createAreaGroupRelationshipTypeInput struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Metadata    *string `json:"metadata"`
}

// GetToken returns __createAreaGroupRelationshipTypeInput.Token, and is useful for accessing the field via an interface.
func (v *__createAreaGroupRelationshipTypeInput) GetToken() string { return v.Token }

// GetName returns __createAreaGroupRelationshipTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__createAreaGroupRelationshipTypeInput) GetName() *string { return v.Name }

// GetDescription returns __createAreaGroupRelationshipTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__createAreaGroupRelationshipTypeInput) GetDescription() *string { return v.Description }

// GetMetadata returns __createAreaGroupRelationshipTypeInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createAreaGroupRelationshipTypeInput) GetMetadata() *string { return v.Metadata }

// __createAreaInput is used internally by genqlient
type __createAreaInput struct {
	Token         string  `json:"token"`
	AreaTypeToken string  `json:"areaTypeToken"`
	Name          *string `json:"name"`
	Description   *string `json:"description"`
	Metadata      *string `json:"metadata"`
}

// GetToken returns __createAreaInput.Token, and is useful for accessing the field via an interface.
func (v *__createAreaInput) GetToken() string { return v.Token }

// GetAreaTypeToken returns __createAreaInput.AreaTypeToken, and is useful for accessing the field via an interface.
func (v *__createAreaInput) GetAreaTypeToken() string { return v.AreaTypeToken }

// GetName returns __createAreaInput.Name, and is useful for accessing the field via an interface.
func (v *__createAreaInput) GetName() *string { return v.Name }

// GetDescription returns __createAreaInput.Description, and is useful for accessing the field via an interface.
func (v *__createAreaInput) GetDescription() *string { return v.Description }

// GetMetadata returns __createAreaInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createAreaInput) GetMetadata() *string { return v.Metadata }

// __createAreaRelationshipInput is used internally by genqlient
type __createAreaRelationshipInput struct {
	Token            string                                 `json:"token"`
	SourceArea       string                                 `json:"sourceArea"`
	Targets          EntityRelationshipTargetsCreateRequest `json:"targets"`
	RelationshipType string                                 `json:"relationshipType"`
}

// GetToken returns __createAreaRelationshipInput.Token, and is useful for accessing the field via an interface.
func (v *__createAreaRelationshipInput) GetToken() string { return v.Token }

// GetSourceArea returns __createAreaRelationshipInput.SourceArea, and is useful for accessing the field via an interface.
func (v *__createAreaRelationshipInput) GetSourceArea() string { return v.SourceArea }

// GetTargets returns __createAreaRelationshipInput.Targets, and is useful for accessing the field via an interface.
func (v *__createAreaRelationshipInput) GetTargets() EntityRelationshipTargetsCreateRequest {
	return v.Targets
}

// GetRelationshipType returns __createAreaRelationshipInput.RelationshipType, and is useful for accessing the field via an interface.
func (v *__createAreaRelationshipInput) GetRelationshipType() string { return v.RelationshipType }

// __createAreaRelationshipTypeInput is used internally by genqlient
type __createAreaRelationshipTypeInput struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Metadata    *string `json:"metadata"`
}

// GetToken returns __createAreaRelationshipTypeInput.Token, and is useful for accessing the field via an interface.
func (v *__createAreaRelationshipTypeInput) GetToken() string { return v.Token }

// GetName returns __createAreaRelationshipTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__createAreaRelationshipTypeInput) GetName() *string { return v.Name }

// GetDescription returns __createAreaRelationshipTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__createAreaRelationshipTypeInput) GetDescription() *string { return v.Description }

// GetMetadata returns __createAreaRelationshipTypeInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createAreaRelationshipTypeInput) GetMetadata() *string { return v.Metadata }

// __createAreaTypeInput is used internally by genqlient
type __createAreaTypeInput struct {
	Token           string  `json:"token"`
	Name            *string `json:"name"`
	Description     *string `json:"description"`
	ImageUrl        *string `json:"imageUrl"`
	Icon            *string `json:"icon"`
	BackgroundColor *string `json:"backgroundColor"`
	ForegroundColor *string `json:"foregroundColor"`
	BorderColor     *string `json:"borderColor"`
	Metadata        *string `json:"metadata"`
}

// GetToken returns __createAreaTypeInput.Token, and is useful for accessing the field via an interface.
func (v *__createAreaTypeInput) GetToken() string { return v.Token }

// GetName returns __createAreaTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__createAreaTypeInput) GetName() *string { return v.Name }

// GetDescription returns __createAreaTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__createAreaTypeInput) GetDescription() *string { return v.Description }

// GetImageUrl returns __createAreaTypeInput.ImageUrl, and is useful for accessing the field via an interface.
func (v *__createAreaTypeInput) GetImageUrl() *string { return v.ImageUrl }

// GetIcon returns __createAreaTypeInput.Icon, and is useful for accessing the field via an interface.
func (v *__createAreaTypeInput) GetIcon() *string { return v.Icon }

// GetBackgroundColor returns __createAreaTypeInput.BackgroundColor, and is useful for accessing the field via an interface.
func (v *__createAreaTypeInput) GetBackgroundColor() *string { return v.BackgroundColor }

// GetForegroundColor returns __createAreaTypeInput.ForegroundColor, and is useful for accessing the field via an interface.
func (v *__createAreaTypeInput) GetForegroundColor() *string { return v.ForegroundColor }

// GetBorderColor returns __createAreaTypeInput.BorderColor, and is useful for accessing the field via an interface.
func (v *__createAreaTypeInput) GetBorderColor() *string { return v.BorderColor }

// GetMetadata returns __createAreaTypeInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createAreaTypeInput) GetMetadata() *string { return v.Metadata }

// __createAssetGroupInput is used internally by genqlient
type __createAssetGroupInput struct {
	Token           string  `json:"token"`
	Name            *string `json:"name"`
	Description     *string `json:"description"`
	ImageUrl        *string `json:"imageUrl"`
	Icon            *string `json:"icon"`
	BackgroundColor *string `json:"backgroundColor"`
	ForegroundColor *string `json:"foregroundColor"`
	BorderColor     *string `json:"borderColor"`
	Metadata        *string `json:"metadata"`
}

// GetToken returns __createAssetGroupInput.Token, and is useful for accessing the field via an interface.
func (v *__createAssetGroupInput) GetToken() string { return v.Token }

// GetName returns __createAssetGroupInput.Name, and is useful for accessing the field via an interface.
func (v *__createAssetGroupInput) GetName() *string { return v.Name }

// GetDescription returns __createAssetGroupInput.Description, and is useful for accessing the field via an interface.
func (v *__createAssetGroupInput) GetDescription() *string { return v.Description }

// GetImageUrl returns __createAssetGroupInput.ImageUrl, and is useful for accessing the field via an interface.
func (v *__createAssetGroupInput) GetImageUrl() *string { return v.ImageUrl }

// GetIcon returns __createAssetGroupInput.Icon, and is useful for accessing the field via an interface.
func (v *__createAssetGroupInput) GetIcon() *string { return v.Icon }

// GetBackgroundColor returns __createAssetGroupInput.BackgroundColor, and is useful for accessing the field via an interface.
func (v *__createAssetGroupInput) GetBackgroundColor() *string { return v.BackgroundColor }

// GetForegroundColor returns __createAssetGroupInput.ForegroundColor, and is useful for accessing the field via an interface.
func (v *__createAssetGroupInput) GetForegroundColor() *string { return v.ForegroundColor }

// GetBorderColor returns __createAssetGroupInput.BorderColor, and is useful for accessing the field via an interface.
func (v *__createAssetGroupInput) GetBorderColor() *string { return v.BorderColor }

// GetMetadata returns __createAssetGroupInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createAssetGroupInput) GetMetadata() *string { return v.Metadata }

// __createAssetGroupRelationshipInput is used internally by genqlient
type __createAssetGroupRelationshipInput struct {
	Token            string                                 `json:"token"`
	AssetGroup       string                                 `json:"assetGroup"`
	Targets          EntityRelationshipTargetsCreateRequest `json:"targets"`
	RelationshipType string                                 `json:"relationshipType"`
}

// GetToken returns __createAssetGroupRelationshipInput.Token, and is useful for accessing the field via an interface.
func (v *__createAssetGroupRelationshipInput) GetToken() string { return v.Token }

// GetAssetGroup returns __createAssetGroupRelationshipInput.AssetGroup, and is useful for accessing the field via an interface.
func (v *__createAssetGroupRelationshipInput) GetAssetGroup() string { return v.AssetGroup }

// GetTargets returns __createAssetGroupRelationshipInput.Targets, and is useful for accessing the field via an interface.
func (v *__createAssetGroupRelationshipInput) GetTargets() EntityRelationshipTargetsCreateRequest {
	return v.Targets
}

// GetRelationshipType returns __createAssetGroupRelationshipInput.RelationshipType, and is useful for accessing the field via an interface.
func (v *__createAssetGroupRelationshipInput) GetRelationshipType() string { return v.RelationshipType }

// __createAssetGroupRelationshipTypeInput is used internally by genqlient
type __createAssetGroupRelationshipTypeInput struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Metadata    *string `json:"metadata"`
}

// GetToken returns __createAssetGroupRelationshipTypeInput.Token, and is useful for accessing the field via an interface.
func (v *__createAssetGroupRelationshipTypeInput) GetToken() string { return v.Token }

// GetName returns __createAssetGroupRelationshipTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__createAssetGroupRelationshipTypeInput) GetName() *string { return v.Name }

// GetDescription returns __createAssetGroupRelationshipTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__createAssetGroupRelationshipTypeInput) GetDescription() *string { return v.Description }

// GetMetadata returns __createAssetGroupRelationshipTypeInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createAssetGroupRelationshipTypeInput) GetMetadata() *string { return v.Metadata }

// __createAssetInput is used internally by genqlient
type __createAssetInput struct {
	Token          string  `json:"token"`
	AssetTypeToken string  `json:"assetTypeToken"`
	Name           *string `json:"name"`
	Description    *string `json:"description"`
	Metadata       *string `json:"metadata"`
}

// GetToken returns __createAssetInput.Token, and is useful for accessing the field via an interface.
func (v *__createAssetInput) GetToken() string { return v.Token }

// GetAssetTypeToken returns __createAssetInput.AssetTypeToken, and is useful for accessing the field via an interface.
func (v *__createAssetInput) GetAssetTypeToken() string { return v.AssetTypeToken }

// GetName returns __createAssetInput.Name, and is useful for accessing the field via an interface.
func (v *__createAssetInput) GetName() *string { return v.Name }

// GetDescription returns __createAssetInput.Description, and is useful for accessing the field via an interface.
func (v *__createAssetInput) GetDescription() *string { return v.Description }

// GetMetadata returns __createAssetInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createAssetInput) GetMetadata() *string { return v.Metadata }

// __createAssetRelationshipInput is used internally by genqlient
type __createAssetRelationshipInput struct {
	Token            string                                 `json:"token"`
	SourceAsset      string                                 `json:"sourceAsset"`
	Targets          EntityRelationshipTargetsCreateRequest `json:"targets"`
	RelationshipType string                                 `json:"relationshipType"`
}

// GetToken returns __createAssetRelationshipInput.Token, and is useful for accessing the field via an interface.
func (v *__createAssetRelationshipInput) GetToken() string { return v.Token }

// GetSourceAsset returns __createAssetRelationshipInput.SourceAsset, and is useful for accessing the field via an interface.
func (v *__createAssetRelationshipInput) GetSourceAsset() string { return v.SourceAsset }

// GetTargets returns __createAssetRelationshipInput.Targets, and is useful for accessing the field via an interface.
func (v *__createAssetRelationshipInput) GetTargets() EntityRelationshipTargetsCreateRequest {
	return v.Targets
}

// GetRelationshipType returns __createAssetRelationshipInput.RelationshipType, and is useful for accessing the field via an interface.
func (v *__createAssetRelationshipInput) GetRelationshipType() string { return v.RelationshipType }

// __createAssetRelationshipTypeInput is used internally by genqlient
type __createAssetRelationshipTypeInput struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Metadata    *string `json:"metadata"`
}

// GetToken returns __createAssetRelationshipTypeInput.Token, and is useful for accessing the field via an interface.
func (v *__createAssetRelationshipTypeInput) GetToken() string { return v.Token }

// GetName returns __createAssetRelationshipTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__createAssetRelationshipTypeInput) GetName() *string { return v.Name }

// GetDescription returns __createAssetRelationshipTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__createAssetRelationshipTypeInput) GetDescription() *string { return v.Description }

// GetMetadata returns __createAssetRelationshipTypeInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createAssetRelationshipTypeInput) GetMetadata() *string { return v.Metadata }

// __createAssetTypeInput is used internally by genqlient
type __createAssetTypeInput struct {
	Token           string  `json:"token"`
	Name            *string `json:"name"`
	Description     *string `json:"description"`
	ImageUrl        *string `json:"imageUrl"`
	Icon            *string `json:"icon"`
	BackgroundColor *string `json:"backgroundColor"`
	ForegroundColor *string `json:"foregroundColor"`
	BorderColor     *string `json:"borderColor"`
	Metadata        *string `json:"metadata"`
}

// GetToken returns __createAssetTypeInput.Token, and is useful for accessing the field via an interface.
func (v *__createAssetTypeInput) GetToken() string { return v.Token }

// GetName returns __createAssetTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__createAssetTypeInput) GetName() *string { return v.Name }

// GetDescription returns __createAssetTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__createAssetTypeInput) GetDescription() *string { return v.Description }

// GetImageUrl returns __createAssetTypeInput.ImageUrl, and is useful for accessing the field via an interface.
func (v *__createAssetTypeInput) GetImageUrl() *string { return v.ImageUrl }

// GetIcon returns __createAssetTypeInput.Icon, and is useful for accessing the field via an interface.
func (v *__createAssetTypeInput) GetIcon() *string { return v.Icon }

// GetBackgroundColor returns __createAssetTypeInput.BackgroundColor, and is useful for accessing the field via an interface.
func (v *__createAssetTypeInput) GetBackgroundColor() *string { return v.BackgroundColor }

// GetForegroundColor returns __createAssetTypeInput.ForegroundColor, and is useful for accessing the field via an interface.
func (v *__createAssetTypeInput) GetForegroundColor() *string { return v.ForegroundColor }

// GetBorderColor returns __createAssetTypeInput.BorderColor, and is useful for accessing the field via an interface.
func (v *__createAssetTypeInput) GetBorderColor() *string { return v.BorderColor }

// GetMetadata returns __createAssetTypeInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createAssetTypeInput) GetMetadata() *string { return v.Metadata }

// __createCustomerGroupInput is used internally by genqlient
type __createCustomerGroupInput struct {
	Token           string  `json:"token"`
	Name            *string `json:"name"`
	Description     *string `json:"description"`
	ImageUrl        *string `json:"imageUrl"`
	Icon            *string `json:"icon"`
	BackgroundColor *string `json:"backgroundColor"`
	ForegroundColor *string `json:"foregroundColor"`
	BorderColor     *string `json:"borderColor"`
	Metadata        *string `json:"metadata"`
}

// GetToken returns __createCustomerGroupInput.Token, and is useful for accessing the field via an interface.
func (v *__createCustomerGroupInput) GetToken() string { return v.Token }

// GetName returns __createCustomerGroupInput.Name, and is useful for accessing the field via an interface.
func (v *__createCustomerGroupInput) GetName() *string { return v.Name }

// GetDescription returns __createCustomerGroupInput.Description, and is useful for accessing the field via an interface.
func (v *__createCustomerGroupInput) GetDescription() *string { return v.Description }

// GetImageUrl returns __createCustomerGroupInput.ImageUrl, and is useful for accessing the field via an interface.
func (v *__createCustomerGroupInput) GetImageUrl() *string { return v.ImageUrl }

// GetIcon returns __createCustomerGroupInput.Icon, and is useful for accessing the field via an interface.
func (v *__createCustomerGroupInput) GetIcon() *string { return v.Icon }

// GetBackgroundColor returns __createCustomerGroupInput.BackgroundColor, and is useful for accessing the field via an interface.
func (v *__createCustomerGroupInput) GetBackgroundColor() *string { return v.BackgroundColor }

// GetForegroundColor returns __createCustomerGroupInput.ForegroundColor, and is useful for accessing the field via an interface.
func (v *__createCustomerGroupInput) GetForegroundColor() *string { return v.ForegroundColor }

// GetBorderColor returns __createCustomerGroupInput.BorderColor, and is useful for accessing the field via an interface.
func (v *__createCustomerGroupInput) GetBorderColor() *string { return v.BorderColor }

// GetMetadata returns __createCustomerGroupInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createCustomerGroupInput) GetMetadata() *string { return v.Metadata }

// __createCustomerGroupRelationshipInput is used internally by genqlient
type __createCustomerGroupRelationshipInput struct {
	Token            string                                 `json:"token"`
	CustomerGroup    string                                 `json:"customerGroup"`
	Targets          EntityRelationshipTargetsCreateRequest `json:"targets"`
	RelationshipType string                                 `json:"relationshipType"`
}

// GetToken returns __createCustomerGroupRelationshipInput.Token, and is useful for accessing the field via an interface.
func (v *__createCustomerGroupRelationshipInput) GetToken() string { return v.Token }

// GetCustomerGroup returns __createCustomerGroupRelationshipInput.CustomerGroup, and is useful for accessing the field via an interface.
func (v *__createCustomerGroupRelationshipInput) GetCustomerGroup() string { return v.CustomerGroup }

// GetTargets returns __createCustomerGroupRelationshipInput.Targets, and is useful for accessing the field via an interface.
func (v *__createCustomerGroupRelationshipInput) GetTargets() EntityRelationshipTargetsCreateRequest {
	return v.Targets
}

// GetRelationshipType returns __createCustomerGroupRelationshipInput.RelationshipType, and is useful for accessing the field via an interface.
func (v *__createCustomerGroupRelationshipInput) GetRelationshipType() string {
	return v.RelationshipType
}

// __createCustomerGroupRelationshipTypeInput is used internally by genqlient
type __createCustomerGroupRelationshipTypeInput struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Metadata    *string `json:"metadata"`
}

// GetToken returns __createCustomerGroupRelationshipTypeInput.Token, and is useful for accessing the field via an interface.
func (v *__createCustomerGroupRelationshipTypeInput) GetToken() string { return v.Token }

// GetName returns __createCustomerGroupRelationshipTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__createCustomerGroupRelationshipTypeInput) GetName() *string { return v.Name }

// GetDescription returns __createCustomerGroupRelationshipTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__createCustomerGroupRelationshipTypeInput) GetDescription() *string { return v.Description }

// GetMetadata returns __createCustomerGroupRelationshipTypeInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createCustomerGroupRelationshipTypeInput) GetMetadata() *string { return v.Metadata }

// __createCustomerInput is used internally by genqlient
type __createCustomerInput struct {
	Token             string  `json:"token"`
	CustomerTypeToken string  `json:"customerTypeToken"`
	Name              *string `json:"name"`
	Description       *string `json:"description"`
	Metadata          *string `json:"metadata"`
}

// GetToken returns __createCustomerInput.Token, and is useful for accessing the field via an interface.
func (v *__createCustomerInput) GetToken() string { return v.Token }

// GetCustomerTypeToken returns __createCustomerInput.CustomerTypeToken, and is useful for accessing the field via an interface.
func (v *__createCustomerInput) GetCustomerTypeToken() string { return v.CustomerTypeToken }

// GetName returns __createCustomerInput.Name, and is useful for accessing the field via an interface.
func (v *__createCustomerInput) GetName() *string { return v.Name }

// GetDescription returns __createCustomerInput.Description, and is useful for accessing the field via an interface.
func (v *__createCustomerInput) GetDescription() *string { return v.Description }

// GetMetadata returns __createCustomerInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createCustomerInput) GetMetadata() *string { return v.Metadata }

// __createCustomerRelationshipInput is used internally by genqlient
type __createCustomerRelationshipInput struct {
	Token            string                                 `json:"token"`
	SourceCustomer   string                                 `json:"sourceCustomer"`
	Targets          EntityRelationshipTargetsCreateRequest `json:"targets"`
	RelationshipType string                                 `json:"relationshipType"`
}

// GetToken returns __createCustomerRelationshipInput.Token, and is useful for accessing the field via an interface.
func (v *__createCustomerRelationshipInput) GetToken() string { return v.Token }

// GetSourceCustomer returns __createCustomerRelationshipInput.SourceCustomer, and is useful for accessing the field via an interface.
func (v *__createCustomerRelationshipInput) GetSourceCustomer() string { return v.SourceCustomer }

// GetTargets returns __createCustomerRelationshipInput.Targets, and is useful for accessing the field via an interface.
func (v *__createCustomerRelationshipInput) GetTargets() EntityRelationshipTargetsCreateRequest {
	return v.Targets
}

// GetRelationshipType returns __createCustomerRelationshipInput.RelationshipType, and is useful for accessing the field via an interface.
func (v *__createCustomerRelationshipInput) GetRelationshipType() string { return v.RelationshipType }

// __createCustomerRelationshipTypeInput is used internally by genqlient
type __createCustomerRelationshipTypeInput struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Metadata    *string `json:"metadata"`
}

// GetToken returns __createCustomerRelationshipTypeInput.Token, and is useful for accessing the field via an interface.
func (v *__createCustomerRelationshipTypeInput) GetToken() string { return v.Token }

// GetName returns __createCustomerRelationshipTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__createCustomerRelationshipTypeInput) GetName() *string { return v.Name }

// GetDescription returns __createCustomerRelationshipTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__createCustomerRelationshipTypeInput) GetDescription() *string { return v.Description }

// GetMetadata returns __createCustomerRelationshipTypeInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createCustomerRelationshipTypeInput) GetMetadata() *string { return v.Metadata }

// __createCustomerTypeInput is used internally by genqlient
type __createCustomerTypeInput struct {
	Token           string  `json:"token"`
	Name            *string `json:"name"`
	Description     *string `json:"description"`
	ImageUrl        *string `json:"imageUrl"`
	Icon            *string `json:"icon"`
	BackgroundColor *string `json:"backgroundColor"`
	ForegroundColor *string `json:"foregroundColor"`
	BorderColor     *string `json:"borderColor"`
	Metadata        *string `json:"metadata"`
}

// GetToken returns __createCustomerTypeInput.Token, and is useful for accessing the field via an interface.
func (v *__createCustomerTypeInput) GetToken() string { return v.Token }

// GetName returns __createCustomerTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__createCustomerTypeInput) GetName() *string { return v.Name }

// GetDescription returns __createCustomerTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__createCustomerTypeInput) GetDescription() *string { return v.Description }

// GetImageUrl returns __createCustomerTypeInput.ImageUrl, and is useful for accessing the field via an interface.
func (v *__createCustomerTypeInput) GetImageUrl() *string { return v.ImageUrl }

// GetIcon returns __createCustomerTypeInput.Icon, and is useful for accessing the field via an interface.
func (v *__createCustomerTypeInput) GetIcon() *string { return v.Icon }

// GetBackgroundColor returns __createCustomerTypeInput.BackgroundColor, and is useful for accessing the field via an interface.
func (v *__createCustomerTypeInput) GetBackgroundColor() *string { return v.BackgroundColor }

// GetForegroundColor returns __createCustomerTypeInput.ForegroundColor, and is useful for accessing the field via an interface.
func (v *__createCustomerTypeInput) GetForegroundColor() *string { return v.ForegroundColor }

// GetBorderColor returns __createCustomerTypeInput.BorderColor, and is useful for accessing the field via an interface.
func (v *__createCustomerTypeInput) GetBorderColor() *string { return v.BorderColor }

// GetMetadata returns __createCustomerTypeInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createCustomerTypeInput) GetMetadata() *string { return v.Metadata }

// __createDeviceGroupInput is used internally by genqlient
type __createDeviceGroupInput struct {
	Token           string  `json:"token"`
	Name            *string `json:"name"`
	Description     *string `json:"description"`
	ImageUrl        *string `json:"imageUrl"`
	Icon            *string `json:"icon"`
	BackgroundColor *string `json:"backgroundColor"`
	ForegroundColor *string `json:"foregroundColor"`
	BorderColor     *string `json:"borderColor"`
	Metadata        *string `json:"metadata"`
}

// GetToken returns __createDeviceGroupInput.Token, and is useful for accessing the field via an interface.
func (v *__createDeviceGroupInput) GetToken() string { return v.Token }

// GetName returns __createDeviceGroupInput.Name, and is useful for accessing the field via an interface.
func (v *__createDeviceGroupInput) GetName() *string { return v.Name }

// GetDescription returns __createDeviceGroupInput.Description, and is useful for accessing the field via an interface.
func (v *__createDeviceGroupInput) GetDescription() *string { return v.Description }

// GetImageUrl returns __createDeviceGroupInput.ImageUrl, and is useful for accessing the field via an interface.
func (v *__createDeviceGroupInput) GetImageUrl() *string { return v.ImageUrl }

// GetIcon returns __createDeviceGroupInput.Icon, and is useful for accessing the field via an interface.
func (v *__createDeviceGroupInput) GetIcon() *string { return v.Icon }

// GetBackgroundColor returns __createDeviceGroupInput.BackgroundColor, and is useful for accessing the field via an interface.
func (v *__createDeviceGroupInput) GetBackgroundColor() *string { return v.BackgroundColor }

// GetForegroundColor returns __createDeviceGroupInput.ForegroundColor, and is useful for accessing the field via an interface.
func (v *__createDeviceGroupInput) GetForegroundColor() *string { return v.ForegroundColor }

// GetBorderColor returns __createDeviceGroupInput.BorderColor, and is useful for accessing the field via an interface.
func (v *__createDeviceGroupInput) GetBorderColor() *string { return v.BorderColor }

// GetMetadata returns __createDeviceGroupInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createDeviceGroupInput) GetMetadata() *string { return v.Metadata }

// __createDeviceGroupRelationshipInput is used internally by genqlient
type __createDeviceGroupRelationshipInput struct {
	Token             string                                 `json:"token"`
	SourceDeviceGroup string                                 `json:"sourceDeviceGroup"`
	Targets           EntityRelationshipTargetsCreateRequest `json:"targets"`
	RelationshipType  string                                 `json:"relationshipType"`
}

// GetToken returns __createDeviceGroupRelationshipInput.Token, and is useful for accessing the field via an interface.
func (v *__createDeviceGroupRelationshipInput) GetToken() string { return v.Token }

// GetSourceDeviceGroup returns __createDeviceGroupRelationshipInput.SourceDeviceGroup, and is useful for accessing the field via an interface.
func (v *__createDeviceGroupRelationshipInput) GetSourceDeviceGroup() string {
	return v.SourceDeviceGroup
}

// GetTargets returns __createDeviceGroupRelationshipInput.Targets, and is useful for accessing the field via an interface.
func (v *__createDeviceGroupRelationshipInput) GetTargets() EntityRelationshipTargetsCreateRequest {
	return v.Targets
}

// GetRelationshipType returns __createDeviceGroupRelationshipInput.RelationshipType, and is useful for accessing the field via an interface.
func (v *__createDeviceGroupRelationshipInput) GetRelationshipType() string {
	return v.RelationshipType
}

// __createDeviceGroupRelationshipTypeInput is used internally by genqlient
type __createDeviceGroupRelationshipTypeInput struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Metadata    *string `json:"metadata"`
}

// GetToken returns __createDeviceGroupRelationshipTypeInput.Token, and is useful for accessing the field via an interface.
func (v *__createDeviceGroupRelationshipTypeInput) GetToken() string { return v.Token }

// GetName returns __createDeviceGroupRelationshipTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__createDeviceGroupRelationshipTypeInput) GetName() *string { return v.Name }

// GetDescription returns __createDeviceGroupRelationshipTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__createDeviceGroupRelationshipTypeInput) GetDescription() *string { return v.Description }

// GetMetadata returns __createDeviceGroupRelationshipTypeInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createDeviceGroupRelationshipTypeInput) GetMetadata() *string { return v.Metadata }

// __createDeviceInput is used internally by genqlient
type __createDeviceInput struct {
	Token           string  `json:"token"`
	DeviceTypeToken string  `json:"deviceTypeToken"`
	Name            *string `json:"name"`
	Description     *string `json:"description"`
	Metadata        *string `json:"metadata"`
}

// GetToken returns __createDeviceInput.Token, and is useful for accessing the field via an interface.
func (v *__createDeviceInput) GetToken() string { return v.Token }

// GetDeviceTypeToken returns __createDeviceInput.DeviceTypeToken, and is useful for accessing the field via an interface.
func (v *__createDeviceInput) GetDeviceTypeToken() string { return v.DeviceTypeToken }

// GetName returns __createDeviceInput.Name, and is useful for accessing the field via an interface.
func (v *__createDeviceInput) GetName() *string { return v.Name }

// GetDescription returns __createDeviceInput.Description, and is useful for accessing the field via an interface.
func (v *__createDeviceInput) GetDescription() *string { return v.Description }

// GetMetadata returns __createDeviceInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createDeviceInput) GetMetadata() *string { return v.Metadata }

// __createDeviceRelationshipInput is used internally by genqlient
type __createDeviceRelationshipInput struct {
	Token            string                                 `json:"token"`
	SourceDevice     string                                 `json:"sourceDevice"`
	Targets          EntityRelationshipTargetsCreateRequest `json:"targets"`
	RelationshipType string                                 `json:"relationshipType"`
}

// GetToken returns __createDeviceRelationshipInput.Token, and is useful for accessing the field via an interface.
func (v *__createDeviceRelationshipInput) GetToken() string { return v.Token }

// GetSourceDevice returns __createDeviceRelationshipInput.SourceDevice, and is useful for accessing the field via an interface.
func (v *__createDeviceRelationshipInput) GetSourceDevice() string { return v.SourceDevice }

// GetTargets returns __createDeviceRelationshipInput.Targets, and is useful for accessing the field via an interface.
func (v *__createDeviceRelationshipInput) GetTargets() EntityRelationshipTargetsCreateRequest {
	return v.Targets
}

// GetRelationshipType returns __createDeviceRelationshipInput.RelationshipType, and is useful for accessing the field via an interface.
func (v *__createDeviceRelationshipInput) GetRelationshipType() string { return v.RelationshipType }

// __createDeviceRelationshipTypeInput is used internally by genqlient
type __createDeviceRelationshipTypeInput struct {
	Token       string  `json:"token"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Metadata    *string `json:"metadata"`
	Tracked     bool    `json:"tracked"`
}

// GetToken returns __createDeviceRelationshipTypeInput.Token, and is useful for accessing the field via an interface.
func (v *__createDeviceRelationshipTypeInput) GetToken() string { return v.Token }

// GetName returns __createDeviceRelationshipTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__createDeviceRelationshipTypeInput) GetName() *string { return v.Name }

// GetDescription returns __createDeviceRelationshipTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__createDeviceRelationshipTypeInput) GetDescription() *string { return v.Description }

// GetMetadata returns __createDeviceRelationshipTypeInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createDeviceRelationshipTypeInput) GetMetadata() *string { return v.Metadata }

// GetTracked returns __createDeviceRelationshipTypeInput.Tracked, and is useful for accessing the field via an interface.
func (v *__createDeviceRelationshipTypeInput) GetTracked() bool { return v.Tracked }

// __createDeviceTypeInput is used internally by genqlient
type __createDeviceTypeInput struct {
	Token           string  `json:"token"`
	Name            *string `json:"name"`
	Description     *string `json:"description"`
	ImageUrl        *string `json:"imageUrl"`
	Icon            *string `json:"icon"`
	BackgroundColor *string `json:"backgroundColor"`
	ForegroundColor *string `json:"foregroundColor"`
	BorderColor     *string `json:"borderColor"`
	Metadata        *string `json:"metadata"`
}

// GetToken returns __createDeviceTypeInput.Token, and is useful for accessing the field via an interface.
func (v *__createDeviceTypeInput) GetToken() string { return v.Token }

// GetName returns __createDeviceTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__createDeviceTypeInput) GetName() *string { return v.Name }

// GetDescription returns __createDeviceTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__createDeviceTypeInput) GetDescription() *string { return v.Description }

// GetImageUrl returns __createDeviceTypeInput.ImageUrl, and is useful for accessing the field via an interface.
func (v *__createDeviceTypeInput) GetImageUrl() *string { return v.ImageUrl }

// GetIcon returns __createDeviceTypeInput.Icon, and is useful for accessing the field via an interface.
func (v *__createDeviceTypeInput) GetIcon() *string { return v.Icon }

// GetBackgroundColor returns __createDeviceTypeInput.BackgroundColor, and is useful for accessing the field via an interface.
func (v *__createDeviceTypeInput) GetBackgroundColor() *string { return v.BackgroundColor }

// GetForegroundColor returns __createDeviceTypeInput.ForegroundColor, and is useful for accessing the field via an interface.
func (v *__createDeviceTypeInput) GetForegroundColor() *string { return v.ForegroundColor }

// GetBorderColor returns __createDeviceTypeInput.BorderColor, and is useful for accessing the field via an interface.
func (v *__createDeviceTypeInput) GetBorderColor() *string { return v.BorderColor }

// GetMetadata returns __createDeviceTypeInput.Metadata, and is useful for accessing the field via an interface.
func (v *__createDeviceTypeInput) GetMetadata() *string { return v.Metadata }

// __getAreaGroupRelationshipTypesByTokenInput is used internally by genqlient
type __getAreaGroupRelationshipTypesByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getAreaGroupRelationshipTypesByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getAreaGroupRelationshipTypesByTokenInput) GetTokens() []string { return v.Tokens }

// __getAreaGroupRelationshipsByTokenInput is used internally by genqlient
type __getAreaGroupRelationshipsByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getAreaGroupRelationshipsByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getAreaGroupRelationshipsByTokenInput) GetTokens() []string { return v.Tokens }

// __getAreaGroupsByTokenInput is used internally by genqlient
type __getAreaGroupsByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getAreaGroupsByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getAreaGroupsByTokenInput) GetTokens() []string { return v.Tokens }

// __getAreaRelationshipTypesByTokenInput is used internally by genqlient
type __getAreaRelationshipTypesByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getAreaRelationshipTypesByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getAreaRelationshipTypesByTokenInput) GetTokens() []string { return v.Tokens }

// __getAreaRelationshipsByTokenInput is used internally by genqlient
type __getAreaRelationshipsByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getAreaRelationshipsByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getAreaRelationshipsByTokenInput) GetTokens() []string { return v.Tokens }

// __getAreaTypesByTokenInput is used internally by genqlient
type __getAreaTypesByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getAreaTypesByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getAreaTypesByTokenInput) GetTokens() []string { return v.Tokens }

// __getAreasByTokenInput is used internally by genqlient
type __getAreasByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getAreasByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getAreasByTokenInput) GetTokens() []string { return v.Tokens }

// __getAssetGroupRelationshipTypesByTokenInput is used internally by genqlient
type __getAssetGroupRelationshipTypesByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getAssetGroupRelationshipTypesByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getAssetGroupRelationshipTypesByTokenInput) GetTokens() []string { return v.Tokens }

// __getAssetGroupRelationshipsByTokenInput is used internally by genqlient
type __getAssetGroupRelationshipsByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getAssetGroupRelationshipsByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getAssetGroupRelationshipsByTokenInput) GetTokens() []string { return v.Tokens }

// __getAssetGroupsByTokenInput is used internally by genqlient
type __getAssetGroupsByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getAssetGroupsByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getAssetGroupsByTokenInput) GetTokens() []string { return v.Tokens }

// __getAssetRelationshipTypesByTokenInput is used internally by genqlient
type __getAssetRelationshipTypesByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getAssetRelationshipTypesByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getAssetRelationshipTypesByTokenInput) GetTokens() []string { return v.Tokens }

// __getAssetRelationshipsByTokenInput is used internally by genqlient
type __getAssetRelationshipsByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getAssetRelationshipsByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getAssetRelationshipsByTokenInput) GetTokens() []string { return v.Tokens }

// __getAssetTypesByTokenInput is used internally by genqlient
type __getAssetTypesByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getAssetTypesByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getAssetTypesByTokenInput) GetTokens() []string { return v.Tokens }

// __getAssetsByTokenInput is used internally by genqlient
type __getAssetsByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getAssetsByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getAssetsByTokenInput) GetTokens() []string { return v.Tokens }

// __getCustomerGroupRelationshipTypesByTokenInput is used internally by genqlient
type __getCustomerGroupRelationshipTypesByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getCustomerGroupRelationshipTypesByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getCustomerGroupRelationshipTypesByTokenInput) GetTokens() []string { return v.Tokens }

// __getCustomerGroupRelationshipsByTokenInput is used internally by genqlient
type __getCustomerGroupRelationshipsByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getCustomerGroupRelationshipsByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getCustomerGroupRelationshipsByTokenInput) GetTokens() []string { return v.Tokens }

// __getCustomerGroupsByTokenInput is used internally by genqlient
type __getCustomerGroupsByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getCustomerGroupsByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getCustomerGroupsByTokenInput) GetTokens() []string { return v.Tokens }

// __getCustomerRelationshipTypesByTokenInput is used internally by genqlient
type __getCustomerRelationshipTypesByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getCustomerRelationshipTypesByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getCustomerRelationshipTypesByTokenInput) GetTokens() []string { return v.Tokens }

// __getCustomerRelationshipsByTokenInput is used internally by genqlient
type __getCustomerRelationshipsByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getCustomerRelationshipsByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getCustomerRelationshipsByTokenInput) GetTokens() []string { return v.Tokens }

// __getCustomerTypesByTokenInput is used internally by genqlient
type __getCustomerTypesByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getCustomerTypesByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getCustomerTypesByTokenInput) GetTokens() []string { return v.Tokens }

// __getCustomersByTokenInput is used internally by genqlient
type __getCustomersByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getCustomersByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getCustomersByTokenInput) GetTokens() []string { return v.Tokens }

// __getDeviceGroupRelationshipTypesByTokenInput is used internally by genqlient
type __getDeviceGroupRelationshipTypesByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getDeviceGroupRelationshipTypesByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getDeviceGroupRelationshipTypesByTokenInput) GetTokens() []string { return v.Tokens }

// __getDeviceGroupRelationshipsByTokenInput is used internally by genqlient
type __getDeviceGroupRelationshipsByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getDeviceGroupRelationshipsByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getDeviceGroupRelationshipsByTokenInput) GetTokens() []string { return v.Tokens }

// __getDeviceGroupsByTokenInput is used internally by genqlient
type __getDeviceGroupsByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getDeviceGroupsByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getDeviceGroupsByTokenInput) GetTokens() []string { return v.Tokens }

// __getDeviceRelationshipTypesByTokenInput is used internally by genqlient
type __getDeviceRelationshipTypesByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getDeviceRelationshipTypesByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getDeviceRelationshipTypesByTokenInput) GetTokens() []string { return v.Tokens }

// __getDeviceRelationshipsByTokenInput is used internally by genqlient
type __getDeviceRelationshipsByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getDeviceRelationshipsByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getDeviceRelationshipsByTokenInput) GetTokens() []string { return v.Tokens }

// __getDeviceTypesByTokenInput is used internally by genqlient
type __getDeviceTypesByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getDeviceTypesByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getDeviceTypesByTokenInput) GetTokens() []string { return v.Tokens }

// __getDevicesByTokenInput is used internally by genqlient
type __getDevicesByTokenInput struct {
	Tokens []string `json:"tokens"`
}

// GetTokens returns __getDevicesByTokenInput.Tokens, and is useful for accessing the field via an interface.
func (v *__getDevicesByTokenInput) GetTokens() []string { return v.Tokens }

// __listAreaGroupRelationshipTypesInput is used internally by genqlient
type __listAreaGroupRelationshipTypesInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listAreaGroupRelationshipTypesInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listAreaGroupRelationshipTypesInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listAreaGroupRelationshipTypesInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listAreaGroupRelationshipTypesInput) GetPageSize() int { return v.PageSize }

// __listAreaGroupRelationshipsInput is used internally by genqlient
type __listAreaGroupRelationshipsInput struct {
	PageNumber       int     `json:"pageNumber"`
	PageSize         int     `json:"pageSize"`
	SourceAreaGroup  *string `json:"sourceAreaGroup"`
	RelationshipType *string `json:"relationshipType"`
}

// GetPageNumber returns __listAreaGroupRelationshipsInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listAreaGroupRelationshipsInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listAreaGroupRelationshipsInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listAreaGroupRelationshipsInput) GetPageSize() int { return v.PageSize }

// GetSourceAreaGroup returns __listAreaGroupRelationshipsInput.SourceAreaGroup, and is useful for accessing the field via an interface.
func (v *__listAreaGroupRelationshipsInput) GetSourceAreaGroup() *string { return v.SourceAreaGroup }

// GetRelationshipType returns __listAreaGroupRelationshipsInput.RelationshipType, and is useful for accessing the field via an interface.
func (v *__listAreaGroupRelationshipsInput) GetRelationshipType() *string { return v.RelationshipType }

// __listAreaGroupsInput is used internally by genqlient
type __listAreaGroupsInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listAreaGroupsInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listAreaGroupsInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listAreaGroupsInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listAreaGroupsInput) GetPageSize() int { return v.PageSize }

// __listAreaRelationshipTypesInput is used internally by genqlient
type __listAreaRelationshipTypesInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listAreaRelationshipTypesInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listAreaRelationshipTypesInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listAreaRelationshipTypesInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listAreaRelationshipTypesInput) GetPageSize() int { return v.PageSize }

// __listAreaRelationshipsInput is used internally by genqlient
type __listAreaRelationshipsInput struct {
	PageNumber       int     `json:"pageNumber"`
	PageSize         int     `json:"pageSize"`
	SourceArea       *string `json:"sourceArea"`
	RelationshipType *string `json:"relationshipType"`
}

// GetPageNumber returns __listAreaRelationshipsInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listAreaRelationshipsInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listAreaRelationshipsInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listAreaRelationshipsInput) GetPageSize() int { return v.PageSize }

// GetSourceArea returns __listAreaRelationshipsInput.SourceArea, and is useful for accessing the field via an interface.
func (v *__listAreaRelationshipsInput) GetSourceArea() *string { return v.SourceArea }

// GetRelationshipType returns __listAreaRelationshipsInput.RelationshipType, and is useful for accessing the field via an interface.
func (v *__listAreaRelationshipsInput) GetRelationshipType() *string { return v.RelationshipType }

// __listAreaTypesInput is used internally by genqlient
type __listAreaTypesInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listAreaTypesInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listAreaTypesInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listAreaTypesInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listAreaTypesInput) GetPageSize() int { return v.PageSize }

// __listAreasInput is used internally by genqlient
type __listAreasInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listAreasInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listAreasInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listAreasInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listAreasInput) GetPageSize() int { return v.PageSize }

// __listAssetGroupRelationshipTypesInput is used internally by genqlient
type __listAssetGroupRelationshipTypesInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listAssetGroupRelationshipTypesInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listAssetGroupRelationshipTypesInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listAssetGroupRelationshipTypesInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listAssetGroupRelationshipTypesInput) GetPageSize() int { return v.PageSize }

// __listAssetGroupRelationshipsInput is used internally by genqlient
type __listAssetGroupRelationshipsInput struct {
	PageNumber       int     `json:"pageNumber"`
	PageSize         int     `json:"pageSize"`
	SourceAssetGroup *string `json:"sourceAssetGroup"`
	RelationshipType *string `json:"relationshipType"`
}

// GetPageNumber returns __listAssetGroupRelationshipsInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listAssetGroupRelationshipsInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listAssetGroupRelationshipsInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listAssetGroupRelationshipsInput) GetPageSize() int { return v.PageSize }

// GetSourceAssetGroup returns __listAssetGroupRelationshipsInput.SourceAssetGroup, and is useful for accessing the field via an interface.
func (v *__listAssetGroupRelationshipsInput) GetSourceAssetGroup() *string { return v.SourceAssetGroup }

// GetRelationshipType returns __listAssetGroupRelationshipsInput.RelationshipType, and is useful for accessing the field via an interface.
func (v *__listAssetGroupRelationshipsInput) GetRelationshipType() *string { return v.RelationshipType }

// __listAssetGroupsInput is used internally by genqlient
type __listAssetGroupsInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listAssetGroupsInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listAssetGroupsInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listAssetGroupsInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listAssetGroupsInput) GetPageSize() int { return v.PageSize }

// __listAssetRelationshipTypesInput is used internally by genqlient
type __listAssetRelationshipTypesInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listAssetRelationshipTypesInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listAssetRelationshipTypesInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listAssetRelationshipTypesInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listAssetRelationshipTypesInput) GetPageSize() int { return v.PageSize }

// __listAssetRelationshipsInput is used internally by genqlient
type __listAssetRelationshipsInput struct {
	PageNumber       int     `json:"pageNumber"`
	PageSize         int     `json:"pageSize"`
	SourceAsset      *string `json:"sourceAsset"`
	RelationshipType *string `json:"relationshipType"`
}

// GetPageNumber returns __listAssetRelationshipsInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listAssetRelationshipsInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listAssetRelationshipsInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listAssetRelationshipsInput) GetPageSize() int { return v.PageSize }

// GetSourceAsset returns __listAssetRelationshipsInput.SourceAsset, and is useful for accessing the field via an interface.
func (v *__listAssetRelationshipsInput) GetSourceAsset() *string { return v.SourceAsset }

// GetRelationshipType returns __listAssetRelationshipsInput.RelationshipType, and is useful for accessing the field via an interface.
func (v *__listAssetRelationshipsInput) GetRelationshipType() *string { return v.RelationshipType }

// __listAssetTypesInput is used internally by genqlient
type __listAssetTypesInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listAssetTypesInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listAssetTypesInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listAssetTypesInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listAssetTypesInput) GetPageSize() int { return v.PageSize }

// __listAssetsInput is used internally by genqlient
type __listAssetsInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listAssetsInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listAssetsInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listAssetsInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listAssetsInput) GetPageSize() int { return v.PageSize }

// __listCustomerGroupRelationshipTypesInput is used internally by genqlient
type __listCustomerGroupRelationshipTypesInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listCustomerGroupRelationshipTypesInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listCustomerGroupRelationshipTypesInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listCustomerGroupRelationshipTypesInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listCustomerGroupRelationshipTypesInput) GetPageSize() int { return v.PageSize }

// __listCustomerGroupRelationshipsInput is used internally by genqlient
type __listCustomerGroupRelationshipsInput struct {
	PageNumber          int     `json:"pageNumber"`
	PageSize            int     `json:"pageSize"`
	SourceCustomerGroup *string `json:"sourceCustomerGroup"`
	RelationshipType    *string `json:"relationshipType"`
}

// GetPageNumber returns __listCustomerGroupRelationshipsInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listCustomerGroupRelationshipsInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listCustomerGroupRelationshipsInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listCustomerGroupRelationshipsInput) GetPageSize() int { return v.PageSize }

// GetSourceCustomerGroup returns __listCustomerGroupRelationshipsInput.SourceCustomerGroup, and is useful for accessing the field via an interface.
func (v *__listCustomerGroupRelationshipsInput) GetSourceCustomerGroup() *string {
	return v.SourceCustomerGroup
}

// GetRelationshipType returns __listCustomerGroupRelationshipsInput.RelationshipType, and is useful for accessing the field via an interface.
func (v *__listCustomerGroupRelationshipsInput) GetRelationshipType() *string {
	return v.RelationshipType
}

// __listCustomerGroupsInput is used internally by genqlient
type __listCustomerGroupsInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listCustomerGroupsInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listCustomerGroupsInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listCustomerGroupsInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listCustomerGroupsInput) GetPageSize() int { return v.PageSize }

// __listCustomerRelationshipTypesInput is used internally by genqlient
type __listCustomerRelationshipTypesInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listCustomerRelationshipTypesInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listCustomerRelationshipTypesInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listCustomerRelationshipTypesInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listCustomerRelationshipTypesInput) GetPageSize() int { return v.PageSize }

// __listCustomerRelationshipsInput is used internally by genqlient
type __listCustomerRelationshipsInput struct {
	PageNumber       int     `json:"pageNumber"`
	PageSize         int     `json:"pageSize"`
	SourceCustomer   *string `json:"sourceCustomer"`
	RelationshipType *string `json:"relationshipType"`
}

// GetPageNumber returns __listCustomerRelationshipsInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listCustomerRelationshipsInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listCustomerRelationshipsInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listCustomerRelationshipsInput) GetPageSize() int { return v.PageSize }

// GetSourceCustomer returns __listCustomerRelationshipsInput.SourceCustomer, and is useful for accessing the field via an interface.
func (v *__listCustomerRelationshipsInput) GetSourceCustomer() *string { return v.SourceCustomer }

// GetRelationshipType returns __listCustomerRelationshipsInput.RelationshipType, and is useful for accessing the field via an interface.
func (v *__listCustomerRelationshipsInput) GetRelationshipType() *string { return v.RelationshipType }

// __listCustomerTypesInput is used internally by genqlient
type __listCustomerTypesInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listCustomerTypesInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listCustomerTypesInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listCustomerTypesInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listCustomerTypesInput) GetPageSize() int { return v.PageSize }

// __listCustomersInput is used internally by genqlient
type __listCustomersInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listCustomersInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listCustomersInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listCustomersInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listCustomersInput) GetPageSize() int { return v.PageSize }

// __listDeviceGroupRelationshipTypesInput is used internally by genqlient
type __listDeviceGroupRelationshipTypesInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listDeviceGroupRelationshipTypesInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listDeviceGroupRelationshipTypesInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listDeviceGroupRelationshipTypesInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listDeviceGroupRelationshipTypesInput) GetPageSize() int { return v.PageSize }

// __listDeviceGroupRelationshipsInput is used internally by genqlient
type __listDeviceGroupRelationshipsInput struct {
	PageNumber        int     `json:"pageNumber"`
	PageSize          int     `json:"pageSize"`
	SourceDeviceGroup *string `json:"sourceDeviceGroup"`
	RelationshipType  *string `json:"relationshipType"`
}

// GetPageNumber returns __listDeviceGroupRelationshipsInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listDeviceGroupRelationshipsInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listDeviceGroupRelationshipsInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listDeviceGroupRelationshipsInput) GetPageSize() int { return v.PageSize }

// GetSourceDeviceGroup returns __listDeviceGroupRelationshipsInput.SourceDeviceGroup, and is useful for accessing the field via an interface.
func (v *__listDeviceGroupRelationshipsInput) GetSourceDeviceGroup() *string {
	return v.SourceDeviceGroup
}

// GetRelationshipType returns __listDeviceGroupRelationshipsInput.RelationshipType, and is useful for accessing the field via an interface.
func (v *__listDeviceGroupRelationshipsInput) GetRelationshipType() *string {
	return v.RelationshipType
}

// __listDeviceGroupsInput is used internally by genqlient
type __listDeviceGroupsInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listDeviceGroupsInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listDeviceGroupsInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listDeviceGroupsInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listDeviceGroupsInput) GetPageSize() int { return v.PageSize }

// __listDeviceRelationshipTypesInput is used internally by genqlient
type __listDeviceRelationshipTypesInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listDeviceRelationshipTypesInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listDeviceRelationshipTypesInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listDeviceRelationshipTypesInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listDeviceRelationshipTypesInput) GetPageSize() int { return v.PageSize }

// __listDeviceRelationshipsInput is used internally by genqlient
type __listDeviceRelationshipsInput struct {
	PageNumber       int     `json:"pageNumber"`
	PageSize         int     `json:"pageSize"`
	SourceDevice     *string `json:"sourceDevice"`
	RelationshipType *string `json:"relationshipType"`
	Tracked          *bool   `json:"tracked"`
}

// GetPageNumber returns __listDeviceRelationshipsInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listDeviceRelationshipsInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listDeviceRelationshipsInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listDeviceRelationshipsInput) GetPageSize() int { return v.PageSize }

// GetSourceDevice returns __listDeviceRelationshipsInput.SourceDevice, and is useful for accessing the field via an interface.
func (v *__listDeviceRelationshipsInput) GetSourceDevice() *string { return v.SourceDevice }

// GetRelationshipType returns __listDeviceRelationshipsInput.RelationshipType, and is useful for accessing the field via an interface.
func (v *__listDeviceRelationshipsInput) GetRelationshipType() *string { return v.RelationshipType }

// GetTracked returns __listDeviceRelationshipsInput.Tracked, and is useful for accessing the field via an interface.
func (v *__listDeviceRelationshipsInput) GetTracked() *bool { return v.Tracked }

// __listDeviceTypesInput is used internally by genqlient
type __listDeviceTypesInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listDeviceTypesInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listDeviceTypesInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listDeviceTypesInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listDeviceTypesInput) GetPageSize() int { return v.PageSize }

// __listDevicesInput is used internally by genqlient
type __listDevicesInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

// GetPageNumber returns __listDevicesInput.PageNumber, and is useful for accessing the field via an interface.
func (v *__listDevicesInput) GetPageNumber() int { return v.PageNumber }

// GetPageSize returns __listDevicesInput.PageSize, and is useful for accessing the field via an interface.
func (v *__listDevicesInput) GetPageSize() int { return v.PageSize }

// createAreaCreateArea includes the requested fields of the GraphQL type Area.
type createAreaCreateArea struct {
	DefaultArea `json:"-"`
}

// GetId returns createAreaCreateArea.Id, and is useful for accessing the field via an interface.
func (v *createAreaCreateArea) GetId() string { return v.DefaultArea.Id }

// GetCreatedAt returns createAreaCreateArea.CreatedAt, and is useful for accessing the field via an interface.
func (v *createAreaCreateArea) GetCreatedAt() *string { return v.DefaultArea.CreatedAt }

// GetUpdatedAt returns createAreaCreateArea.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createAreaCreateArea) GetUpdatedAt() *string { return v.DefaultArea.UpdatedAt }

// GetDeletedAt returns createAreaCreateArea.DeletedAt, and is useful for accessing the field via an interface.
func (v *createAreaCreateArea) GetDeletedAt() *string { return v.DefaultArea.DeletedAt }

// GetToken returns createAreaCreateArea.Token, and is useful for accessing the field via an interface.
func (v *createAreaCreateArea) GetToken() string { return v.DefaultArea.Token }

// GetName returns createAreaCreateArea.Name, and is useful for accessing the field via an interface.
func (v *createAreaCreateArea) GetName() *string { return v.DefaultArea.Name }

// GetDescription returns createAreaCreateArea.Description, and is useful for accessing the field via an interface.
func (v *createAreaCreateArea) GetDescription() *string { return v.DefaultArea.Description }

// GetAreaType returns createAreaCreateArea.AreaType, and is useful for accessing the field via an interface.
func (v *createAreaCreateArea) GetAreaType() DefaultAreaAreaType { return v.DefaultArea.AreaType }

// GetMetadata returns createAreaCreateArea.Metadata, and is useful for accessing the field via an interface.
func (v *createAreaCreateArea) GetMetadata() *string { return v.DefaultArea.Metadata }

func (v *createAreaCreateArea) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createAreaCreateArea
		graphql.NoUnmarshalJSON
	}
	firstPass.createAreaCreateArea = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultArea)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateAreaCreateArea struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	AreaType DefaultAreaAreaType `json:"areaType"`

	Metadata *string `json:"metadata"`
}

func (v *createAreaCreateArea) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createAreaCreateArea) __premarshalJSON() (*__premarshalcreateAreaCreateArea, error) {
	var retval __premarshalcreateAreaCreateArea

	retval.Id = v.DefaultArea.Id
	retval.CreatedAt = v.DefaultArea.CreatedAt
	retval.UpdatedAt = v.DefaultArea.UpdatedAt
	retval.DeletedAt = v.DefaultArea.DeletedAt
	retval.Token = v.DefaultArea.Token
	retval.Name = v.DefaultArea.Name
	retval.Description = v.DefaultArea.Description
	retval.AreaType = v.DefaultArea.AreaType
	retval.Metadata = v.DefaultArea.Metadata
	return &retval, nil
}

// createAreaGroupCreateAreaGroup includes the requested fields of the GraphQL type AreaGroup.
type createAreaGroupCreateAreaGroup struct {
	DefaultAreaGroup `json:"-"`
}

// GetId returns createAreaGroupCreateAreaGroup.Id, and is useful for accessing the field via an interface.
func (v *createAreaGroupCreateAreaGroup) GetId() string { return v.DefaultAreaGroup.Id }

// GetCreatedAt returns createAreaGroupCreateAreaGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *createAreaGroupCreateAreaGroup) GetCreatedAt() *string { return v.DefaultAreaGroup.CreatedAt }

// GetUpdatedAt returns createAreaGroupCreateAreaGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createAreaGroupCreateAreaGroup) GetUpdatedAt() *string { return v.DefaultAreaGroup.UpdatedAt }

// GetDeletedAt returns createAreaGroupCreateAreaGroup.DeletedAt, and is useful for accessing the field via an interface.
func (v *createAreaGroupCreateAreaGroup) GetDeletedAt() *string { return v.DefaultAreaGroup.DeletedAt }

// GetToken returns createAreaGroupCreateAreaGroup.Token, and is useful for accessing the field via an interface.
func (v *createAreaGroupCreateAreaGroup) GetToken() string { return v.DefaultAreaGroup.Token }

// GetName returns createAreaGroupCreateAreaGroup.Name, and is useful for accessing the field via an interface.
func (v *createAreaGroupCreateAreaGroup) GetName() *string { return v.DefaultAreaGroup.Name }

// GetDescription returns createAreaGroupCreateAreaGroup.Description, and is useful for accessing the field via an interface.
func (v *createAreaGroupCreateAreaGroup) GetDescription() *string {
	return v.DefaultAreaGroup.Description
}

// GetImageUrl returns createAreaGroupCreateAreaGroup.ImageUrl, and is useful for accessing the field via an interface.
func (v *createAreaGroupCreateAreaGroup) GetImageUrl() *string { return v.DefaultAreaGroup.ImageUrl }

// GetIcon returns createAreaGroupCreateAreaGroup.Icon, and is useful for accessing the field via an interface.
func (v *createAreaGroupCreateAreaGroup) GetIcon() *string { return v.DefaultAreaGroup.Icon }

// GetBackgroundColor returns createAreaGroupCreateAreaGroup.BackgroundColor, and is useful for accessing the field via an interface.
func (v *createAreaGroupCreateAreaGroup) GetBackgroundColor() *string {
	return v.DefaultAreaGroup.BackgroundColor
}

// GetForegroundColor returns createAreaGroupCreateAreaGroup.ForegroundColor, and is useful for accessing the field via an interface.
func (v *createAreaGroupCreateAreaGroup) GetForegroundColor() *string {
	return v.DefaultAreaGroup.ForegroundColor
}

// GetBorderColor returns createAreaGroupCreateAreaGroup.BorderColor, and is useful for accessing the field via an interface.
func (v *createAreaGroupCreateAreaGroup) GetBorderColor() *string {
	return v.DefaultAreaGroup.BorderColor
}

// GetMetadata returns createAreaGroupCreateAreaGroup.Metadata, and is useful for accessing the field via an interface.
func (v *createAreaGroupCreateAreaGroup) GetMetadata() *string { return v.DefaultAreaGroup.Metadata }

func (v *createAreaGroupCreateAreaGroup) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createAreaGroupCreateAreaGroup
		graphql.NoUnmarshalJSON
	}
	firstPass.createAreaGroupCreateAreaGroup = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaGroup)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateAreaGroupCreateAreaGroup struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *createAreaGroupCreateAreaGroup) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createAreaGroupCreateAreaGroup) __premarshalJSON() (*__premarshalcreateAreaGroupCreateAreaGroup, error) {
	var retval __premarshalcreateAreaGroupCreateAreaGroup

	retval.Id = v.DefaultAreaGroup.Id
	retval.CreatedAt = v.DefaultAreaGroup.CreatedAt
	retval.UpdatedAt = v.DefaultAreaGroup.UpdatedAt
	retval.DeletedAt = v.DefaultAreaGroup.DeletedAt
	retval.Token = v.DefaultAreaGroup.Token
	retval.Name = v.DefaultAreaGroup.Name
	retval.Description = v.DefaultAreaGroup.Description
	retval.ImageUrl = v.DefaultAreaGroup.ImageUrl
	retval.Icon = v.DefaultAreaGroup.Icon
	retval.BackgroundColor = v.DefaultAreaGroup.BackgroundColor
	retval.ForegroundColor = v.DefaultAreaGroup.ForegroundColor
	retval.BorderColor = v.DefaultAreaGroup.BorderColor
	retval.Metadata = v.DefaultAreaGroup.Metadata
	return &retval, nil
}

// createAreaGroupRelationshipCreateAreaGroupRelationship includes the requested fields of the GraphQL type AreaGroupRelationship.
type createAreaGroupRelationshipCreateAreaGroupRelationship struct {
	DefaultAreaGroupRelationship `json:"-"`
}

// GetId returns createAreaGroupRelationshipCreateAreaGroupRelationship.Id, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipCreateAreaGroupRelationship) GetId() string {
	return v.DefaultAreaGroupRelationship.Id
}

// GetCreatedAt returns createAreaGroupRelationshipCreateAreaGroupRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipCreateAreaGroupRelationship) GetCreatedAt() *string {
	return v.DefaultAreaGroupRelationship.CreatedAt
}

// GetUpdatedAt returns createAreaGroupRelationshipCreateAreaGroupRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipCreateAreaGroupRelationship) GetUpdatedAt() *string {
	return v.DefaultAreaGroupRelationship.UpdatedAt
}

// GetDeletedAt returns createAreaGroupRelationshipCreateAreaGroupRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipCreateAreaGroupRelationship) GetDeletedAt() *string {
	return v.DefaultAreaGroupRelationship.DeletedAt
}

// GetToken returns createAreaGroupRelationshipCreateAreaGroupRelationship.Token, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipCreateAreaGroupRelationship) GetToken() string {
	return v.DefaultAreaGroupRelationship.Token
}

// GetSourceAreaGroup returns createAreaGroupRelationshipCreateAreaGroupRelationship.SourceAreaGroup, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipCreateAreaGroupRelationship) GetSourceAreaGroup() DefaultAreaGroupRelationshipSourceAreaGroup {
	return v.DefaultAreaGroupRelationship.SourceAreaGroup
}

// GetTargets returns createAreaGroupRelationshipCreateAreaGroupRelationship.Targets, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipCreateAreaGroupRelationship) GetTargets() DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultAreaGroupRelationship.Targets
}

// GetRelationshipType returns createAreaGroupRelationshipCreateAreaGroupRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipCreateAreaGroupRelationship) GetRelationshipType() DefaultAreaGroupRelationshipRelationshipTypeAreaGroupRelationshipType {
	return v.DefaultAreaGroupRelationship.RelationshipType
}

// GetMetadata returns createAreaGroupRelationshipCreateAreaGroupRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipCreateAreaGroupRelationship) GetMetadata() *string {
	return v.DefaultAreaGroupRelationship.Metadata
}

func (v *createAreaGroupRelationshipCreateAreaGroupRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createAreaGroupRelationshipCreateAreaGroupRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.createAreaGroupRelationshipCreateAreaGroupRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaGroupRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateAreaGroupRelationshipCreateAreaGroupRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceAreaGroup DefaultAreaGroupRelationshipSourceAreaGroup `json:"sourceAreaGroup"`

	Targets DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultAreaGroupRelationshipRelationshipTypeAreaGroupRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *createAreaGroupRelationshipCreateAreaGroupRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createAreaGroupRelationshipCreateAreaGroupRelationship) __premarshalJSON() (*__premarshalcreateAreaGroupRelationshipCreateAreaGroupRelationship, error) {
	var retval __premarshalcreateAreaGroupRelationshipCreateAreaGroupRelationship

	retval.Id = v.DefaultAreaGroupRelationship.Id
	retval.CreatedAt = v.DefaultAreaGroupRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultAreaGroupRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultAreaGroupRelationship.DeletedAt
	retval.Token = v.DefaultAreaGroupRelationship.Token
	retval.SourceAreaGroup = v.DefaultAreaGroupRelationship.SourceAreaGroup
	retval.Targets = v.DefaultAreaGroupRelationship.Targets
	retval.RelationshipType = v.DefaultAreaGroupRelationship.RelationshipType
	retval.Metadata = v.DefaultAreaGroupRelationship.Metadata
	return &retval, nil
}

// createAreaGroupRelationshipResponse is returned by createAreaGroupRelationship on success.
type createAreaGroupRelationshipResponse struct {
	CreateAreaGroupRelationship createAreaGroupRelationshipCreateAreaGroupRelationship `json:"createAreaGroupRelationship"`
}

// GetCreateAreaGroupRelationship returns createAreaGroupRelationshipResponse.CreateAreaGroupRelationship, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipResponse) GetCreateAreaGroupRelationship() createAreaGroupRelationshipCreateAreaGroupRelationship {
	return v.CreateAreaGroupRelationship
}

// createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType includes the requested fields of the GraphQL type AreaGroupRelationshipType.
type createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType struct {
	DefaultAreaGroupRelationshipType `json:"-"`
}

// GetId returns createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType) GetId() string {
	return v.DefaultAreaGroupRelationshipType.Id
}

// GetCreatedAt returns createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType) GetCreatedAt() *string {
	return v.DefaultAreaGroupRelationshipType.CreatedAt
}

// GetUpdatedAt returns createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType) GetUpdatedAt() *string {
	return v.DefaultAreaGroupRelationshipType.UpdatedAt
}

// GetDeletedAt returns createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType) GetDeletedAt() *string {
	return v.DefaultAreaGroupRelationshipType.DeletedAt
}

// GetToken returns createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType) GetToken() string {
	return v.DefaultAreaGroupRelationshipType.Token
}

// GetName returns createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType) GetName() *string {
	return v.DefaultAreaGroupRelationshipType.Name
}

// GetDescription returns createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType) GetDescription() *string {
	return v.DefaultAreaGroupRelationshipType.Description
}

// GetMetadata returns createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType) GetMetadata() *string {
	return v.DefaultAreaGroupRelationshipType.Metadata
}

func (v *createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaGroupRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateAreaGroupRelationshipTypeCreateAreaGroupRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType) __premarshalJSON() (*__premarshalcreateAreaGroupRelationshipTypeCreateAreaGroupRelationshipType, error) {
	var retval __premarshalcreateAreaGroupRelationshipTypeCreateAreaGroupRelationshipType

	retval.Id = v.DefaultAreaGroupRelationshipType.Id
	retval.CreatedAt = v.DefaultAreaGroupRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultAreaGroupRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultAreaGroupRelationshipType.DeletedAt
	retval.Token = v.DefaultAreaGroupRelationshipType.Token
	retval.Name = v.DefaultAreaGroupRelationshipType.Name
	retval.Description = v.DefaultAreaGroupRelationshipType.Description
	retval.Metadata = v.DefaultAreaGroupRelationshipType.Metadata
	return &retval, nil
}

// createAreaGroupRelationshipTypeResponse is returned by createAreaGroupRelationshipType on success.
type createAreaGroupRelationshipTypeResponse struct {
	CreateAreaGroupRelationshipType createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType `json:"createAreaGroupRelationshipType"`
}

// GetCreateAreaGroupRelationshipType returns createAreaGroupRelationshipTypeResponse.CreateAreaGroupRelationshipType, and is useful for accessing the field via an interface.
func (v *createAreaGroupRelationshipTypeResponse) GetCreateAreaGroupRelationshipType() createAreaGroupRelationshipTypeCreateAreaGroupRelationshipType {
	return v.CreateAreaGroupRelationshipType
}

// createAreaGroupResponse is returned by createAreaGroup on success.
type createAreaGroupResponse struct {
	CreateAreaGroup createAreaGroupCreateAreaGroup `json:"createAreaGroup"`
}

// GetCreateAreaGroup returns createAreaGroupResponse.CreateAreaGroup, and is useful for accessing the field via an interface.
func (v *createAreaGroupResponse) GetCreateAreaGroup() createAreaGroupCreateAreaGroup {
	return v.CreateAreaGroup
}

// createAreaRelationshipCreateAreaRelationship includes the requested fields of the GraphQL type AreaRelationship.
type createAreaRelationshipCreateAreaRelationship struct {
	DefaultAreaRelationship `json:"-"`
}

// GetId returns createAreaRelationshipCreateAreaRelationship.Id, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipCreateAreaRelationship) GetId() string {
	return v.DefaultAreaRelationship.Id
}

// GetCreatedAt returns createAreaRelationshipCreateAreaRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipCreateAreaRelationship) GetCreatedAt() *string {
	return v.DefaultAreaRelationship.CreatedAt
}

// GetUpdatedAt returns createAreaRelationshipCreateAreaRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipCreateAreaRelationship) GetUpdatedAt() *string {
	return v.DefaultAreaRelationship.UpdatedAt
}

// GetDeletedAt returns createAreaRelationshipCreateAreaRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipCreateAreaRelationship) GetDeletedAt() *string {
	return v.DefaultAreaRelationship.DeletedAt
}

// GetToken returns createAreaRelationshipCreateAreaRelationship.Token, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipCreateAreaRelationship) GetToken() string {
	return v.DefaultAreaRelationship.Token
}

// GetSourceArea returns createAreaRelationshipCreateAreaRelationship.SourceArea, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipCreateAreaRelationship) GetSourceArea() DefaultAreaRelationshipSourceArea {
	return v.DefaultAreaRelationship.SourceArea
}

// GetTargets returns createAreaRelationshipCreateAreaRelationship.Targets, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipCreateAreaRelationship) GetTargets() DefaultAreaRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultAreaRelationship.Targets
}

// GetRelationshipType returns createAreaRelationshipCreateAreaRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipCreateAreaRelationship) GetRelationshipType() DefaultAreaRelationshipRelationshipTypeAreaRelationshipType {
	return v.DefaultAreaRelationship.RelationshipType
}

// GetMetadata returns createAreaRelationshipCreateAreaRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipCreateAreaRelationship) GetMetadata() *string {
	return v.DefaultAreaRelationship.Metadata
}

func (v *createAreaRelationshipCreateAreaRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createAreaRelationshipCreateAreaRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.createAreaRelationshipCreateAreaRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateAreaRelationshipCreateAreaRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceArea DefaultAreaRelationshipSourceArea `json:"sourceArea"`

	Targets DefaultAreaRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultAreaRelationshipRelationshipTypeAreaRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *createAreaRelationshipCreateAreaRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createAreaRelationshipCreateAreaRelationship) __premarshalJSON() (*__premarshalcreateAreaRelationshipCreateAreaRelationship, error) {
	var retval __premarshalcreateAreaRelationshipCreateAreaRelationship

	retval.Id = v.DefaultAreaRelationship.Id
	retval.CreatedAt = v.DefaultAreaRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultAreaRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultAreaRelationship.DeletedAt
	retval.Token = v.DefaultAreaRelationship.Token
	retval.SourceArea = v.DefaultAreaRelationship.SourceArea
	retval.Targets = v.DefaultAreaRelationship.Targets
	retval.RelationshipType = v.DefaultAreaRelationship.RelationshipType
	retval.Metadata = v.DefaultAreaRelationship.Metadata
	return &retval, nil
}

// createAreaRelationshipResponse is returned by createAreaRelationship on success.
type createAreaRelationshipResponse struct {
	CreateAreaRelationship createAreaRelationshipCreateAreaRelationship `json:"createAreaRelationship"`
}

// GetCreateAreaRelationship returns createAreaRelationshipResponse.CreateAreaRelationship, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipResponse) GetCreateAreaRelationship() createAreaRelationshipCreateAreaRelationship {
	return v.CreateAreaRelationship
}

// createAreaRelationshipTypeCreateAreaRelationshipType includes the requested fields of the GraphQL type AreaRelationshipType.
type createAreaRelationshipTypeCreateAreaRelationshipType struct {
	DefaultAreaRelationshipType `json:"-"`
}

// GetId returns createAreaRelationshipTypeCreateAreaRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipTypeCreateAreaRelationshipType) GetId() string {
	return v.DefaultAreaRelationshipType.Id
}

// GetCreatedAt returns createAreaRelationshipTypeCreateAreaRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipTypeCreateAreaRelationshipType) GetCreatedAt() *string {
	return v.DefaultAreaRelationshipType.CreatedAt
}

// GetUpdatedAt returns createAreaRelationshipTypeCreateAreaRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipTypeCreateAreaRelationshipType) GetUpdatedAt() *string {
	return v.DefaultAreaRelationshipType.UpdatedAt
}

// GetDeletedAt returns createAreaRelationshipTypeCreateAreaRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipTypeCreateAreaRelationshipType) GetDeletedAt() *string {
	return v.DefaultAreaRelationshipType.DeletedAt
}

// GetToken returns createAreaRelationshipTypeCreateAreaRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipTypeCreateAreaRelationshipType) GetToken() string {
	return v.DefaultAreaRelationshipType.Token
}

// GetName returns createAreaRelationshipTypeCreateAreaRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipTypeCreateAreaRelationshipType) GetName() *string {
	return v.DefaultAreaRelationshipType.Name
}

// GetDescription returns createAreaRelationshipTypeCreateAreaRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipTypeCreateAreaRelationshipType) GetDescription() *string {
	return v.DefaultAreaRelationshipType.Description
}

// GetMetadata returns createAreaRelationshipTypeCreateAreaRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipTypeCreateAreaRelationshipType) GetMetadata() *string {
	return v.DefaultAreaRelationshipType.Metadata
}

func (v *createAreaRelationshipTypeCreateAreaRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createAreaRelationshipTypeCreateAreaRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.createAreaRelationshipTypeCreateAreaRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateAreaRelationshipTypeCreateAreaRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *createAreaRelationshipTypeCreateAreaRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createAreaRelationshipTypeCreateAreaRelationshipType) __premarshalJSON() (*__premarshalcreateAreaRelationshipTypeCreateAreaRelationshipType, error) {
	var retval __premarshalcreateAreaRelationshipTypeCreateAreaRelationshipType

	retval.Id = v.DefaultAreaRelationshipType.Id
	retval.CreatedAt = v.DefaultAreaRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultAreaRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultAreaRelationshipType.DeletedAt
	retval.Token = v.DefaultAreaRelationshipType.Token
	retval.Name = v.DefaultAreaRelationshipType.Name
	retval.Description = v.DefaultAreaRelationshipType.Description
	retval.Metadata = v.DefaultAreaRelationshipType.Metadata
	return &retval, nil
}

// createAreaRelationshipTypeResponse is returned by createAreaRelationshipType on success.
type createAreaRelationshipTypeResponse struct {
	CreateAreaRelationshipType createAreaRelationshipTypeCreateAreaRelationshipType `json:"createAreaRelationshipType"`
}

// GetCreateAreaRelationshipType returns createAreaRelationshipTypeResponse.CreateAreaRelationshipType, and is useful for accessing the field via an interface.
func (v *createAreaRelationshipTypeResponse) GetCreateAreaRelationshipType() createAreaRelationshipTypeCreateAreaRelationshipType {
	return v.CreateAreaRelationshipType
}

// createAreaResponse is returned by createArea on success.
type createAreaResponse struct {
	CreateArea createAreaCreateArea `json:"createArea"`
}

// GetCreateArea returns createAreaResponse.CreateArea, and is useful for accessing the field via an interface.
func (v *createAreaResponse) GetCreateArea() createAreaCreateArea { return v.CreateArea }

// createAreaTypeCreateAreaType includes the requested fields of the GraphQL type AreaType.
type createAreaTypeCreateAreaType struct {
	DefaultAreaType `json:"-"`
}

// GetId returns createAreaTypeCreateAreaType.Id, and is useful for accessing the field via an interface.
func (v *createAreaTypeCreateAreaType) GetId() string { return v.DefaultAreaType.Id }

// GetCreatedAt returns createAreaTypeCreateAreaType.CreatedAt, and is useful for accessing the field via an interface.
func (v *createAreaTypeCreateAreaType) GetCreatedAt() *string { return v.DefaultAreaType.CreatedAt }

// GetUpdatedAt returns createAreaTypeCreateAreaType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createAreaTypeCreateAreaType) GetUpdatedAt() *string { return v.DefaultAreaType.UpdatedAt }

// GetDeletedAt returns createAreaTypeCreateAreaType.DeletedAt, and is useful for accessing the field via an interface.
func (v *createAreaTypeCreateAreaType) GetDeletedAt() *string { return v.DefaultAreaType.DeletedAt }

// GetToken returns createAreaTypeCreateAreaType.Token, and is useful for accessing the field via an interface.
func (v *createAreaTypeCreateAreaType) GetToken() string { return v.DefaultAreaType.Token }

// GetName returns createAreaTypeCreateAreaType.Name, and is useful for accessing the field via an interface.
func (v *createAreaTypeCreateAreaType) GetName() *string { return v.DefaultAreaType.Name }

// GetDescription returns createAreaTypeCreateAreaType.Description, and is useful for accessing the field via an interface.
func (v *createAreaTypeCreateAreaType) GetDescription() *string { return v.DefaultAreaType.Description }

// GetImageUrl returns createAreaTypeCreateAreaType.ImageUrl, and is useful for accessing the field via an interface.
func (v *createAreaTypeCreateAreaType) GetImageUrl() *string { return v.DefaultAreaType.ImageUrl }

// GetIcon returns createAreaTypeCreateAreaType.Icon, and is useful for accessing the field via an interface.
func (v *createAreaTypeCreateAreaType) GetIcon() *string { return v.DefaultAreaType.Icon }

// GetBackgroundColor returns createAreaTypeCreateAreaType.BackgroundColor, and is useful for accessing the field via an interface.
func (v *createAreaTypeCreateAreaType) GetBackgroundColor() *string {
	return v.DefaultAreaType.BackgroundColor
}

// GetForegroundColor returns createAreaTypeCreateAreaType.ForegroundColor, and is useful for accessing the field via an interface.
func (v *createAreaTypeCreateAreaType) GetForegroundColor() *string {
	return v.DefaultAreaType.ForegroundColor
}

// GetBorderColor returns createAreaTypeCreateAreaType.BorderColor, and is useful for accessing the field via an interface.
func (v *createAreaTypeCreateAreaType) GetBorderColor() *string { return v.DefaultAreaType.BorderColor }

// GetMetadata returns createAreaTypeCreateAreaType.Metadata, and is useful for accessing the field via an interface.
func (v *createAreaTypeCreateAreaType) GetMetadata() *string { return v.DefaultAreaType.Metadata }

func (v *createAreaTypeCreateAreaType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createAreaTypeCreateAreaType
		graphql.NoUnmarshalJSON
	}
	firstPass.createAreaTypeCreateAreaType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateAreaTypeCreateAreaType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *createAreaTypeCreateAreaType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createAreaTypeCreateAreaType) __premarshalJSON() (*__premarshalcreateAreaTypeCreateAreaType, error) {
	var retval __premarshalcreateAreaTypeCreateAreaType

	retval.Id = v.DefaultAreaType.Id
	retval.CreatedAt = v.DefaultAreaType.CreatedAt
	retval.UpdatedAt = v.DefaultAreaType.UpdatedAt
	retval.DeletedAt = v.DefaultAreaType.DeletedAt
	retval.Token = v.DefaultAreaType.Token
	retval.Name = v.DefaultAreaType.Name
	retval.Description = v.DefaultAreaType.Description
	retval.ImageUrl = v.DefaultAreaType.ImageUrl
	retval.Icon = v.DefaultAreaType.Icon
	retval.BackgroundColor = v.DefaultAreaType.BackgroundColor
	retval.ForegroundColor = v.DefaultAreaType.ForegroundColor
	retval.BorderColor = v.DefaultAreaType.BorderColor
	retval.Metadata = v.DefaultAreaType.Metadata
	return &retval, nil
}

// createAreaTypeResponse is returned by createAreaType on success.
type createAreaTypeResponse struct {
	CreateAreaType createAreaTypeCreateAreaType `json:"createAreaType"`
}

// GetCreateAreaType returns createAreaTypeResponse.CreateAreaType, and is useful for accessing the field via an interface.
func (v *createAreaTypeResponse) GetCreateAreaType() createAreaTypeCreateAreaType {
	return v.CreateAreaType
}

// createAssetCreateAsset includes the requested fields of the GraphQL type Asset.
type createAssetCreateAsset struct {
	DefaultAsset `json:"-"`
}

// GetId returns createAssetCreateAsset.Id, and is useful for accessing the field via an interface.
func (v *createAssetCreateAsset) GetId() string { return v.DefaultAsset.Id }

// GetCreatedAt returns createAssetCreateAsset.CreatedAt, and is useful for accessing the field via an interface.
func (v *createAssetCreateAsset) GetCreatedAt() *string { return v.DefaultAsset.CreatedAt }

// GetUpdatedAt returns createAssetCreateAsset.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createAssetCreateAsset) GetUpdatedAt() *string { return v.DefaultAsset.UpdatedAt }

// GetDeletedAt returns createAssetCreateAsset.DeletedAt, and is useful for accessing the field via an interface.
func (v *createAssetCreateAsset) GetDeletedAt() *string { return v.DefaultAsset.DeletedAt }

// GetToken returns createAssetCreateAsset.Token, and is useful for accessing the field via an interface.
func (v *createAssetCreateAsset) GetToken() string { return v.DefaultAsset.Token }

// GetName returns createAssetCreateAsset.Name, and is useful for accessing the field via an interface.
func (v *createAssetCreateAsset) GetName() *string { return v.DefaultAsset.Name }

// GetDescription returns createAssetCreateAsset.Description, and is useful for accessing the field via an interface.
func (v *createAssetCreateAsset) GetDescription() *string { return v.DefaultAsset.Description }

// GetAssetType returns createAssetCreateAsset.AssetType, and is useful for accessing the field via an interface.
func (v *createAssetCreateAsset) GetAssetType() DefaultAssetAssetType {
	return v.DefaultAsset.AssetType
}

// GetMetadata returns createAssetCreateAsset.Metadata, and is useful for accessing the field via an interface.
func (v *createAssetCreateAsset) GetMetadata() *string { return v.DefaultAsset.Metadata }

func (v *createAssetCreateAsset) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createAssetCreateAsset
		graphql.NoUnmarshalJSON
	}
	firstPass.createAssetCreateAsset = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAsset)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateAssetCreateAsset struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	AssetType DefaultAssetAssetType `json:"assetType"`

	Metadata *string `json:"metadata"`
}

func (v *createAssetCreateAsset) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createAssetCreateAsset) __premarshalJSON() (*__premarshalcreateAssetCreateAsset, error) {
	var retval __premarshalcreateAssetCreateAsset

	retval.Id = v.DefaultAsset.Id
	retval.CreatedAt = v.DefaultAsset.CreatedAt
	retval.UpdatedAt = v.DefaultAsset.UpdatedAt
	retval.DeletedAt = v.DefaultAsset.DeletedAt
	retval.Token = v.DefaultAsset.Token
	retval.Name = v.DefaultAsset.Name
	retval.Description = v.DefaultAsset.Description
	retval.AssetType = v.DefaultAsset.AssetType
	retval.Metadata = v.DefaultAsset.Metadata
	return &retval, nil
}

// createAssetGroupCreateAssetGroup includes the requested fields of the GraphQL type AssetGroup.
type createAssetGroupCreateAssetGroup struct {
	DefaultAssetGroup `json:"-"`
}

// GetId returns createAssetGroupCreateAssetGroup.Id, and is useful for accessing the field via an interface.
func (v *createAssetGroupCreateAssetGroup) GetId() string { return v.DefaultAssetGroup.Id }

// GetCreatedAt returns createAssetGroupCreateAssetGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *createAssetGroupCreateAssetGroup) GetCreatedAt() *string {
	return v.DefaultAssetGroup.CreatedAt
}

// GetUpdatedAt returns createAssetGroupCreateAssetGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createAssetGroupCreateAssetGroup) GetUpdatedAt() *string {
	return v.DefaultAssetGroup.UpdatedAt
}

// GetDeletedAt returns createAssetGroupCreateAssetGroup.DeletedAt, and is useful for accessing the field via an interface.
func (v *createAssetGroupCreateAssetGroup) GetDeletedAt() *string {
	return v.DefaultAssetGroup.DeletedAt
}

// GetToken returns createAssetGroupCreateAssetGroup.Token, and is useful for accessing the field via an interface.
func (v *createAssetGroupCreateAssetGroup) GetToken() string { return v.DefaultAssetGroup.Token }

// GetName returns createAssetGroupCreateAssetGroup.Name, and is useful for accessing the field via an interface.
func (v *createAssetGroupCreateAssetGroup) GetName() *string { return v.DefaultAssetGroup.Name }

// GetDescription returns createAssetGroupCreateAssetGroup.Description, and is useful for accessing the field via an interface.
func (v *createAssetGroupCreateAssetGroup) GetDescription() *string {
	return v.DefaultAssetGroup.Description
}

// GetImageUrl returns createAssetGroupCreateAssetGroup.ImageUrl, and is useful for accessing the field via an interface.
func (v *createAssetGroupCreateAssetGroup) GetImageUrl() *string { return v.DefaultAssetGroup.ImageUrl }

// GetIcon returns createAssetGroupCreateAssetGroup.Icon, and is useful for accessing the field via an interface.
func (v *createAssetGroupCreateAssetGroup) GetIcon() *string { return v.DefaultAssetGroup.Icon }

// GetBackgroundColor returns createAssetGroupCreateAssetGroup.BackgroundColor, and is useful for accessing the field via an interface.
func (v *createAssetGroupCreateAssetGroup) GetBackgroundColor() *string {
	return v.DefaultAssetGroup.BackgroundColor
}

// GetForegroundColor returns createAssetGroupCreateAssetGroup.ForegroundColor, and is useful for accessing the field via an interface.
func (v *createAssetGroupCreateAssetGroup) GetForegroundColor() *string {
	return v.DefaultAssetGroup.ForegroundColor
}

// GetBorderColor returns createAssetGroupCreateAssetGroup.BorderColor, and is useful for accessing the field via an interface.
func (v *createAssetGroupCreateAssetGroup) GetBorderColor() *string {
	return v.DefaultAssetGroup.BorderColor
}

// GetMetadata returns createAssetGroupCreateAssetGroup.Metadata, and is useful for accessing the field via an interface.
func (v *createAssetGroupCreateAssetGroup) GetMetadata() *string { return v.DefaultAssetGroup.Metadata }

func (v *createAssetGroupCreateAssetGroup) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createAssetGroupCreateAssetGroup
		graphql.NoUnmarshalJSON
	}
	firstPass.createAssetGroupCreateAssetGroup = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetGroup)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateAssetGroupCreateAssetGroup struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *createAssetGroupCreateAssetGroup) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createAssetGroupCreateAssetGroup) __premarshalJSON() (*__premarshalcreateAssetGroupCreateAssetGroup, error) {
	var retval __premarshalcreateAssetGroupCreateAssetGroup

	retval.Id = v.DefaultAssetGroup.Id
	retval.CreatedAt = v.DefaultAssetGroup.CreatedAt
	retval.UpdatedAt = v.DefaultAssetGroup.UpdatedAt
	retval.DeletedAt = v.DefaultAssetGroup.DeletedAt
	retval.Token = v.DefaultAssetGroup.Token
	retval.Name = v.DefaultAssetGroup.Name
	retval.Description = v.DefaultAssetGroup.Description
	retval.ImageUrl = v.DefaultAssetGroup.ImageUrl
	retval.Icon = v.DefaultAssetGroup.Icon
	retval.BackgroundColor = v.DefaultAssetGroup.BackgroundColor
	retval.ForegroundColor = v.DefaultAssetGroup.ForegroundColor
	retval.BorderColor = v.DefaultAssetGroup.BorderColor
	retval.Metadata = v.DefaultAssetGroup.Metadata
	return &retval, nil
}

// createAssetGroupRelationshipCreateAssetGroupRelationship includes the requested fields of the GraphQL type AssetGroupRelationship.
type createAssetGroupRelationshipCreateAssetGroupRelationship struct {
	DefaultAssetGroupRelationship `json:"-"`
}

// GetId returns createAssetGroupRelationshipCreateAssetGroupRelationship.Id, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipCreateAssetGroupRelationship) GetId() string {
	return v.DefaultAssetGroupRelationship.Id
}

// GetCreatedAt returns createAssetGroupRelationshipCreateAssetGroupRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipCreateAssetGroupRelationship) GetCreatedAt() *string {
	return v.DefaultAssetGroupRelationship.CreatedAt
}

// GetUpdatedAt returns createAssetGroupRelationshipCreateAssetGroupRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipCreateAssetGroupRelationship) GetUpdatedAt() *string {
	return v.DefaultAssetGroupRelationship.UpdatedAt
}

// GetDeletedAt returns createAssetGroupRelationshipCreateAssetGroupRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipCreateAssetGroupRelationship) GetDeletedAt() *string {
	return v.DefaultAssetGroupRelationship.DeletedAt
}

// GetToken returns createAssetGroupRelationshipCreateAssetGroupRelationship.Token, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipCreateAssetGroupRelationship) GetToken() string {
	return v.DefaultAssetGroupRelationship.Token
}

// GetSourceAssetGroup returns createAssetGroupRelationshipCreateAssetGroupRelationship.SourceAssetGroup, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipCreateAssetGroupRelationship) GetSourceAssetGroup() DefaultAssetGroupRelationshipSourceAssetGroup {
	return v.DefaultAssetGroupRelationship.SourceAssetGroup
}

// GetTargets returns createAssetGroupRelationshipCreateAssetGroupRelationship.Targets, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipCreateAssetGroupRelationship) GetTargets() DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultAssetGroupRelationship.Targets
}

// GetRelationshipType returns createAssetGroupRelationshipCreateAssetGroupRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipCreateAssetGroupRelationship) GetRelationshipType() DefaultAssetGroupRelationshipRelationshipTypeAssetGroupRelationshipType {
	return v.DefaultAssetGroupRelationship.RelationshipType
}

// GetMetadata returns createAssetGroupRelationshipCreateAssetGroupRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipCreateAssetGroupRelationship) GetMetadata() *string {
	return v.DefaultAssetGroupRelationship.Metadata
}

func (v *createAssetGroupRelationshipCreateAssetGroupRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createAssetGroupRelationshipCreateAssetGroupRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.createAssetGroupRelationshipCreateAssetGroupRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetGroupRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateAssetGroupRelationshipCreateAssetGroupRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceAssetGroup DefaultAssetGroupRelationshipSourceAssetGroup `json:"sourceAssetGroup"`

	Targets DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultAssetGroupRelationshipRelationshipTypeAssetGroupRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *createAssetGroupRelationshipCreateAssetGroupRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createAssetGroupRelationshipCreateAssetGroupRelationship) __premarshalJSON() (*__premarshalcreateAssetGroupRelationshipCreateAssetGroupRelationship, error) {
	var retval __premarshalcreateAssetGroupRelationshipCreateAssetGroupRelationship

	retval.Id = v.DefaultAssetGroupRelationship.Id
	retval.CreatedAt = v.DefaultAssetGroupRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultAssetGroupRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultAssetGroupRelationship.DeletedAt
	retval.Token = v.DefaultAssetGroupRelationship.Token
	retval.SourceAssetGroup = v.DefaultAssetGroupRelationship.SourceAssetGroup
	retval.Targets = v.DefaultAssetGroupRelationship.Targets
	retval.RelationshipType = v.DefaultAssetGroupRelationship.RelationshipType
	retval.Metadata = v.DefaultAssetGroupRelationship.Metadata
	return &retval, nil
}

// createAssetGroupRelationshipResponse is returned by createAssetGroupRelationship on success.
type createAssetGroupRelationshipResponse struct {
	CreateAssetGroupRelationship createAssetGroupRelationshipCreateAssetGroupRelationship `json:"createAssetGroupRelationship"`
}

// GetCreateAssetGroupRelationship returns createAssetGroupRelationshipResponse.CreateAssetGroupRelationship, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipResponse) GetCreateAssetGroupRelationship() createAssetGroupRelationshipCreateAssetGroupRelationship {
	return v.CreateAssetGroupRelationship
}

// createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType includes the requested fields of the GraphQL type AssetGroupRelationshipType.
type createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType struct {
	DefaultAssetGroupRelationshipType `json:"-"`
}

// GetId returns createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType) GetId() string {
	return v.DefaultAssetGroupRelationshipType.Id
}

// GetCreatedAt returns createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType) GetCreatedAt() *string {
	return v.DefaultAssetGroupRelationshipType.CreatedAt
}

// GetUpdatedAt returns createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType) GetUpdatedAt() *string {
	return v.DefaultAssetGroupRelationshipType.UpdatedAt
}

// GetDeletedAt returns createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType) GetDeletedAt() *string {
	return v.DefaultAssetGroupRelationshipType.DeletedAt
}

// GetToken returns createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType) GetToken() string {
	return v.DefaultAssetGroupRelationshipType.Token
}

// GetName returns createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType) GetName() *string {
	return v.DefaultAssetGroupRelationshipType.Name
}

// GetDescription returns createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType) GetDescription() *string {
	return v.DefaultAssetGroupRelationshipType.Description
}

// GetMetadata returns createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType) GetMetadata() *string {
	return v.DefaultAssetGroupRelationshipType.Metadata
}

func (v *createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetGroupRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateAssetGroupRelationshipTypeCreateAssetGroupRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType) __premarshalJSON() (*__premarshalcreateAssetGroupRelationshipTypeCreateAssetGroupRelationshipType, error) {
	var retval __premarshalcreateAssetGroupRelationshipTypeCreateAssetGroupRelationshipType

	retval.Id = v.DefaultAssetGroupRelationshipType.Id
	retval.CreatedAt = v.DefaultAssetGroupRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultAssetGroupRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultAssetGroupRelationshipType.DeletedAt
	retval.Token = v.DefaultAssetGroupRelationshipType.Token
	retval.Name = v.DefaultAssetGroupRelationshipType.Name
	retval.Description = v.DefaultAssetGroupRelationshipType.Description
	retval.Metadata = v.DefaultAssetGroupRelationshipType.Metadata
	return &retval, nil
}

// createAssetGroupRelationshipTypeResponse is returned by createAssetGroupRelationshipType on success.
type createAssetGroupRelationshipTypeResponse struct {
	CreateAssetGroupRelationshipType createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType `json:"createAssetGroupRelationshipType"`
}

// GetCreateAssetGroupRelationshipType returns createAssetGroupRelationshipTypeResponse.CreateAssetGroupRelationshipType, and is useful for accessing the field via an interface.
func (v *createAssetGroupRelationshipTypeResponse) GetCreateAssetGroupRelationshipType() createAssetGroupRelationshipTypeCreateAssetGroupRelationshipType {
	return v.CreateAssetGroupRelationshipType
}

// createAssetGroupResponse is returned by createAssetGroup on success.
type createAssetGroupResponse struct {
	CreateAssetGroup createAssetGroupCreateAssetGroup `json:"createAssetGroup"`
}

// GetCreateAssetGroup returns createAssetGroupResponse.CreateAssetGroup, and is useful for accessing the field via an interface.
func (v *createAssetGroupResponse) GetCreateAssetGroup() createAssetGroupCreateAssetGroup {
	return v.CreateAssetGroup
}

// createAssetRelationshipCreateAssetRelationship includes the requested fields of the GraphQL type AssetRelationship.
type createAssetRelationshipCreateAssetRelationship struct {
	DefaultAssetRelationship `json:"-"`
}

// GetId returns createAssetRelationshipCreateAssetRelationship.Id, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipCreateAssetRelationship) GetId() string {
	return v.DefaultAssetRelationship.Id
}

// GetCreatedAt returns createAssetRelationshipCreateAssetRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipCreateAssetRelationship) GetCreatedAt() *string {
	return v.DefaultAssetRelationship.CreatedAt
}

// GetUpdatedAt returns createAssetRelationshipCreateAssetRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipCreateAssetRelationship) GetUpdatedAt() *string {
	return v.DefaultAssetRelationship.UpdatedAt
}

// GetDeletedAt returns createAssetRelationshipCreateAssetRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipCreateAssetRelationship) GetDeletedAt() *string {
	return v.DefaultAssetRelationship.DeletedAt
}

// GetToken returns createAssetRelationshipCreateAssetRelationship.Token, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipCreateAssetRelationship) GetToken() string {
	return v.DefaultAssetRelationship.Token
}

// GetSourceAsset returns createAssetRelationshipCreateAssetRelationship.SourceAsset, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipCreateAssetRelationship) GetSourceAsset() DefaultAssetRelationshipSourceAsset {
	return v.DefaultAssetRelationship.SourceAsset
}

// GetTargets returns createAssetRelationshipCreateAssetRelationship.Targets, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipCreateAssetRelationship) GetTargets() DefaultAssetRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultAssetRelationship.Targets
}

// GetRelationshipType returns createAssetRelationshipCreateAssetRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipCreateAssetRelationship) GetRelationshipType() DefaultAssetRelationshipRelationshipTypeAssetRelationshipType {
	return v.DefaultAssetRelationship.RelationshipType
}

// GetMetadata returns createAssetRelationshipCreateAssetRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipCreateAssetRelationship) GetMetadata() *string {
	return v.DefaultAssetRelationship.Metadata
}

func (v *createAssetRelationshipCreateAssetRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createAssetRelationshipCreateAssetRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.createAssetRelationshipCreateAssetRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateAssetRelationshipCreateAssetRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceAsset DefaultAssetRelationshipSourceAsset `json:"sourceAsset"`

	Targets DefaultAssetRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultAssetRelationshipRelationshipTypeAssetRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *createAssetRelationshipCreateAssetRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createAssetRelationshipCreateAssetRelationship) __premarshalJSON() (*__premarshalcreateAssetRelationshipCreateAssetRelationship, error) {
	var retval __premarshalcreateAssetRelationshipCreateAssetRelationship

	retval.Id = v.DefaultAssetRelationship.Id
	retval.CreatedAt = v.DefaultAssetRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultAssetRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultAssetRelationship.DeletedAt
	retval.Token = v.DefaultAssetRelationship.Token
	retval.SourceAsset = v.DefaultAssetRelationship.SourceAsset
	retval.Targets = v.DefaultAssetRelationship.Targets
	retval.RelationshipType = v.DefaultAssetRelationship.RelationshipType
	retval.Metadata = v.DefaultAssetRelationship.Metadata
	return &retval, nil
}

// createAssetRelationshipResponse is returned by createAssetRelationship on success.
type createAssetRelationshipResponse struct {
	CreateAssetRelationship createAssetRelationshipCreateAssetRelationship `json:"createAssetRelationship"`
}

// GetCreateAssetRelationship returns createAssetRelationshipResponse.CreateAssetRelationship, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipResponse) GetCreateAssetRelationship() createAssetRelationshipCreateAssetRelationship {
	return v.CreateAssetRelationship
}

// createAssetRelationshipTypeCreateAssetRelationshipType includes the requested fields of the GraphQL type AssetRelationshipType.
type createAssetRelationshipTypeCreateAssetRelationshipType struct {
	DefaultAssetRelationshipType `json:"-"`
}

// GetId returns createAssetRelationshipTypeCreateAssetRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipTypeCreateAssetRelationshipType) GetId() string {
	return v.DefaultAssetRelationshipType.Id
}

// GetCreatedAt returns createAssetRelationshipTypeCreateAssetRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipTypeCreateAssetRelationshipType) GetCreatedAt() *string {
	return v.DefaultAssetRelationshipType.CreatedAt
}

// GetUpdatedAt returns createAssetRelationshipTypeCreateAssetRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipTypeCreateAssetRelationshipType) GetUpdatedAt() *string {
	return v.DefaultAssetRelationshipType.UpdatedAt
}

// GetDeletedAt returns createAssetRelationshipTypeCreateAssetRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipTypeCreateAssetRelationshipType) GetDeletedAt() *string {
	return v.DefaultAssetRelationshipType.DeletedAt
}

// GetToken returns createAssetRelationshipTypeCreateAssetRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipTypeCreateAssetRelationshipType) GetToken() string {
	return v.DefaultAssetRelationshipType.Token
}

// GetName returns createAssetRelationshipTypeCreateAssetRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipTypeCreateAssetRelationshipType) GetName() *string {
	return v.DefaultAssetRelationshipType.Name
}

// GetDescription returns createAssetRelationshipTypeCreateAssetRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipTypeCreateAssetRelationshipType) GetDescription() *string {
	return v.DefaultAssetRelationshipType.Description
}

// GetMetadata returns createAssetRelationshipTypeCreateAssetRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipTypeCreateAssetRelationshipType) GetMetadata() *string {
	return v.DefaultAssetRelationshipType.Metadata
}

func (v *createAssetRelationshipTypeCreateAssetRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createAssetRelationshipTypeCreateAssetRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.createAssetRelationshipTypeCreateAssetRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateAssetRelationshipTypeCreateAssetRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *createAssetRelationshipTypeCreateAssetRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createAssetRelationshipTypeCreateAssetRelationshipType) __premarshalJSON() (*__premarshalcreateAssetRelationshipTypeCreateAssetRelationshipType, error) {
	var retval __premarshalcreateAssetRelationshipTypeCreateAssetRelationshipType

	retval.Id = v.DefaultAssetRelationshipType.Id
	retval.CreatedAt = v.DefaultAssetRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultAssetRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultAssetRelationshipType.DeletedAt
	retval.Token = v.DefaultAssetRelationshipType.Token
	retval.Name = v.DefaultAssetRelationshipType.Name
	retval.Description = v.DefaultAssetRelationshipType.Description
	retval.Metadata = v.DefaultAssetRelationshipType.Metadata
	return &retval, nil
}

// createAssetRelationshipTypeResponse is returned by createAssetRelationshipType on success.
type createAssetRelationshipTypeResponse struct {
	CreateAssetRelationshipType createAssetRelationshipTypeCreateAssetRelationshipType `json:"createAssetRelationshipType"`
}

// GetCreateAssetRelationshipType returns createAssetRelationshipTypeResponse.CreateAssetRelationshipType, and is useful for accessing the field via an interface.
func (v *createAssetRelationshipTypeResponse) GetCreateAssetRelationshipType() createAssetRelationshipTypeCreateAssetRelationshipType {
	return v.CreateAssetRelationshipType
}

// createAssetResponse is returned by createAsset on success.
type createAssetResponse struct {
	CreateAsset createAssetCreateAsset `json:"createAsset"`
}

// GetCreateAsset returns createAssetResponse.CreateAsset, and is useful for accessing the field via an interface.
func (v *createAssetResponse) GetCreateAsset() createAssetCreateAsset { return v.CreateAsset }

// createAssetTypeCreateAssetType includes the requested fields of the GraphQL type AssetType.
type createAssetTypeCreateAssetType struct {
	DefaultAssetType `json:"-"`
}

// GetId returns createAssetTypeCreateAssetType.Id, and is useful for accessing the field via an interface.
func (v *createAssetTypeCreateAssetType) GetId() string { return v.DefaultAssetType.Id }

// GetCreatedAt returns createAssetTypeCreateAssetType.CreatedAt, and is useful for accessing the field via an interface.
func (v *createAssetTypeCreateAssetType) GetCreatedAt() *string { return v.DefaultAssetType.CreatedAt }

// GetUpdatedAt returns createAssetTypeCreateAssetType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createAssetTypeCreateAssetType) GetUpdatedAt() *string { return v.DefaultAssetType.UpdatedAt }

// GetDeletedAt returns createAssetTypeCreateAssetType.DeletedAt, and is useful for accessing the field via an interface.
func (v *createAssetTypeCreateAssetType) GetDeletedAt() *string { return v.DefaultAssetType.DeletedAt }

// GetToken returns createAssetTypeCreateAssetType.Token, and is useful for accessing the field via an interface.
func (v *createAssetTypeCreateAssetType) GetToken() string { return v.DefaultAssetType.Token }

// GetName returns createAssetTypeCreateAssetType.Name, and is useful for accessing the field via an interface.
func (v *createAssetTypeCreateAssetType) GetName() *string { return v.DefaultAssetType.Name }

// GetDescription returns createAssetTypeCreateAssetType.Description, and is useful for accessing the field via an interface.
func (v *createAssetTypeCreateAssetType) GetDescription() *string {
	return v.DefaultAssetType.Description
}

// GetImageUrl returns createAssetTypeCreateAssetType.ImageUrl, and is useful for accessing the field via an interface.
func (v *createAssetTypeCreateAssetType) GetImageUrl() *string { return v.DefaultAssetType.ImageUrl }

// GetIcon returns createAssetTypeCreateAssetType.Icon, and is useful for accessing the field via an interface.
func (v *createAssetTypeCreateAssetType) GetIcon() *string { return v.DefaultAssetType.Icon }

// GetBackgroundColor returns createAssetTypeCreateAssetType.BackgroundColor, and is useful for accessing the field via an interface.
func (v *createAssetTypeCreateAssetType) GetBackgroundColor() *string {
	return v.DefaultAssetType.BackgroundColor
}

// GetForegroundColor returns createAssetTypeCreateAssetType.ForegroundColor, and is useful for accessing the field via an interface.
func (v *createAssetTypeCreateAssetType) GetForegroundColor() *string {
	return v.DefaultAssetType.ForegroundColor
}

// GetBorderColor returns createAssetTypeCreateAssetType.BorderColor, and is useful for accessing the field via an interface.
func (v *createAssetTypeCreateAssetType) GetBorderColor() *string {
	return v.DefaultAssetType.BorderColor
}

// GetMetadata returns createAssetTypeCreateAssetType.Metadata, and is useful for accessing the field via an interface.
func (v *createAssetTypeCreateAssetType) GetMetadata() *string { return v.DefaultAssetType.Metadata }

func (v *createAssetTypeCreateAssetType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createAssetTypeCreateAssetType
		graphql.NoUnmarshalJSON
	}
	firstPass.createAssetTypeCreateAssetType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateAssetTypeCreateAssetType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *createAssetTypeCreateAssetType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createAssetTypeCreateAssetType) __premarshalJSON() (*__premarshalcreateAssetTypeCreateAssetType, error) {
	var retval __premarshalcreateAssetTypeCreateAssetType

	retval.Id = v.DefaultAssetType.Id
	retval.CreatedAt = v.DefaultAssetType.CreatedAt
	retval.UpdatedAt = v.DefaultAssetType.UpdatedAt
	retval.DeletedAt = v.DefaultAssetType.DeletedAt
	retval.Token = v.DefaultAssetType.Token
	retval.Name = v.DefaultAssetType.Name
	retval.Description = v.DefaultAssetType.Description
	retval.ImageUrl = v.DefaultAssetType.ImageUrl
	retval.Icon = v.DefaultAssetType.Icon
	retval.BackgroundColor = v.DefaultAssetType.BackgroundColor
	retval.ForegroundColor = v.DefaultAssetType.ForegroundColor
	retval.BorderColor = v.DefaultAssetType.BorderColor
	retval.Metadata = v.DefaultAssetType.Metadata
	return &retval, nil
}

// createAssetTypeResponse is returned by createAssetType on success.
type createAssetTypeResponse struct {
	CreateAssetType createAssetTypeCreateAssetType `json:"createAssetType"`
}

// GetCreateAssetType returns createAssetTypeResponse.CreateAssetType, and is useful for accessing the field via an interface.
func (v *createAssetTypeResponse) GetCreateAssetType() createAssetTypeCreateAssetType {
	return v.CreateAssetType
}

// createCustomerCreateCustomer includes the requested fields of the GraphQL type Customer.
type createCustomerCreateCustomer struct {
	DefaultCustomer `json:"-"`
}

// GetId returns createCustomerCreateCustomer.Id, and is useful for accessing the field via an interface.
func (v *createCustomerCreateCustomer) GetId() string { return v.DefaultCustomer.Id }

// GetCreatedAt returns createCustomerCreateCustomer.CreatedAt, and is useful for accessing the field via an interface.
func (v *createCustomerCreateCustomer) GetCreatedAt() *string { return v.DefaultCustomer.CreatedAt }

// GetUpdatedAt returns createCustomerCreateCustomer.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createCustomerCreateCustomer) GetUpdatedAt() *string { return v.DefaultCustomer.UpdatedAt }

// GetDeletedAt returns createCustomerCreateCustomer.DeletedAt, and is useful for accessing the field via an interface.
func (v *createCustomerCreateCustomer) GetDeletedAt() *string { return v.DefaultCustomer.DeletedAt }

// GetToken returns createCustomerCreateCustomer.Token, and is useful for accessing the field via an interface.
func (v *createCustomerCreateCustomer) GetToken() string { return v.DefaultCustomer.Token }

// GetName returns createCustomerCreateCustomer.Name, and is useful for accessing the field via an interface.
func (v *createCustomerCreateCustomer) GetName() *string { return v.DefaultCustomer.Name }

// GetDescription returns createCustomerCreateCustomer.Description, and is useful for accessing the field via an interface.
func (v *createCustomerCreateCustomer) GetDescription() *string { return v.DefaultCustomer.Description }

// GetCustomerType returns createCustomerCreateCustomer.CustomerType, and is useful for accessing the field via an interface.
func (v *createCustomerCreateCustomer) GetCustomerType() DefaultCustomerCustomerType {
	return v.DefaultCustomer.CustomerType
}

// GetMetadata returns createCustomerCreateCustomer.Metadata, and is useful for accessing the field via an interface.
func (v *createCustomerCreateCustomer) GetMetadata() *string { return v.DefaultCustomer.Metadata }

func (v *createCustomerCreateCustomer) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createCustomerCreateCustomer
		graphql.NoUnmarshalJSON
	}
	firstPass.createCustomerCreateCustomer = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomer)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateCustomerCreateCustomer struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	CustomerType DefaultCustomerCustomerType `json:"customerType"`

	Metadata *string `json:"metadata"`
}

func (v *createCustomerCreateCustomer) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createCustomerCreateCustomer) __premarshalJSON() (*__premarshalcreateCustomerCreateCustomer, error) {
	var retval __premarshalcreateCustomerCreateCustomer

	retval.Id = v.DefaultCustomer.Id
	retval.CreatedAt = v.DefaultCustomer.CreatedAt
	retval.UpdatedAt = v.DefaultCustomer.UpdatedAt
	retval.DeletedAt = v.DefaultCustomer.DeletedAt
	retval.Token = v.DefaultCustomer.Token
	retval.Name = v.DefaultCustomer.Name
	retval.Description = v.DefaultCustomer.Description
	retval.CustomerType = v.DefaultCustomer.CustomerType
	retval.Metadata = v.DefaultCustomer.Metadata
	return &retval, nil
}

// createCustomerGroupCreateCustomerGroup includes the requested fields of the GraphQL type CustomerGroup.
type createCustomerGroupCreateCustomerGroup struct {
	DefaultCustomerGroup `json:"-"`
}

// GetId returns createCustomerGroupCreateCustomerGroup.Id, and is useful for accessing the field via an interface.
func (v *createCustomerGroupCreateCustomerGroup) GetId() string { return v.DefaultCustomerGroup.Id }

// GetCreatedAt returns createCustomerGroupCreateCustomerGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *createCustomerGroupCreateCustomerGroup) GetCreatedAt() *string {
	return v.DefaultCustomerGroup.CreatedAt
}

// GetUpdatedAt returns createCustomerGroupCreateCustomerGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createCustomerGroupCreateCustomerGroup) GetUpdatedAt() *string {
	return v.DefaultCustomerGroup.UpdatedAt
}

// GetDeletedAt returns createCustomerGroupCreateCustomerGroup.DeletedAt, and is useful for accessing the field via an interface.
func (v *createCustomerGroupCreateCustomerGroup) GetDeletedAt() *string {
	return v.DefaultCustomerGroup.DeletedAt
}

// GetToken returns createCustomerGroupCreateCustomerGroup.Token, and is useful for accessing the field via an interface.
func (v *createCustomerGroupCreateCustomerGroup) GetToken() string {
	return v.DefaultCustomerGroup.Token
}

// GetName returns createCustomerGroupCreateCustomerGroup.Name, and is useful for accessing the field via an interface.
func (v *createCustomerGroupCreateCustomerGroup) GetName() *string {
	return v.DefaultCustomerGroup.Name
}

// GetDescription returns createCustomerGroupCreateCustomerGroup.Description, and is useful for accessing the field via an interface.
func (v *createCustomerGroupCreateCustomerGroup) GetDescription() *string {
	return v.DefaultCustomerGroup.Description
}

// GetImageUrl returns createCustomerGroupCreateCustomerGroup.ImageUrl, and is useful for accessing the field via an interface.
func (v *createCustomerGroupCreateCustomerGroup) GetImageUrl() *string {
	return v.DefaultCustomerGroup.ImageUrl
}

// GetIcon returns createCustomerGroupCreateCustomerGroup.Icon, and is useful for accessing the field via an interface.
func (v *createCustomerGroupCreateCustomerGroup) GetIcon() *string {
	return v.DefaultCustomerGroup.Icon
}

// GetBackgroundColor returns createCustomerGroupCreateCustomerGroup.BackgroundColor, and is useful for accessing the field via an interface.
func (v *createCustomerGroupCreateCustomerGroup) GetBackgroundColor() *string {
	return v.DefaultCustomerGroup.BackgroundColor
}

// GetForegroundColor returns createCustomerGroupCreateCustomerGroup.ForegroundColor, and is useful for accessing the field via an interface.
func (v *createCustomerGroupCreateCustomerGroup) GetForegroundColor() *string {
	return v.DefaultCustomerGroup.ForegroundColor
}

// GetBorderColor returns createCustomerGroupCreateCustomerGroup.BorderColor, and is useful for accessing the field via an interface.
func (v *createCustomerGroupCreateCustomerGroup) GetBorderColor() *string {
	return v.DefaultCustomerGroup.BorderColor
}

// GetMetadata returns createCustomerGroupCreateCustomerGroup.Metadata, and is useful for accessing the field via an interface.
func (v *createCustomerGroupCreateCustomerGroup) GetMetadata() *string {
	return v.DefaultCustomerGroup.Metadata
}

func (v *createCustomerGroupCreateCustomerGroup) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createCustomerGroupCreateCustomerGroup
		graphql.NoUnmarshalJSON
	}
	firstPass.createCustomerGroupCreateCustomerGroup = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerGroup)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateCustomerGroupCreateCustomerGroup struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *createCustomerGroupCreateCustomerGroup) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createCustomerGroupCreateCustomerGroup) __premarshalJSON() (*__premarshalcreateCustomerGroupCreateCustomerGroup, error) {
	var retval __premarshalcreateCustomerGroupCreateCustomerGroup

	retval.Id = v.DefaultCustomerGroup.Id
	retval.CreatedAt = v.DefaultCustomerGroup.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerGroup.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerGroup.DeletedAt
	retval.Token = v.DefaultCustomerGroup.Token
	retval.Name = v.DefaultCustomerGroup.Name
	retval.Description = v.DefaultCustomerGroup.Description
	retval.ImageUrl = v.DefaultCustomerGroup.ImageUrl
	retval.Icon = v.DefaultCustomerGroup.Icon
	retval.BackgroundColor = v.DefaultCustomerGroup.BackgroundColor
	retval.ForegroundColor = v.DefaultCustomerGroup.ForegroundColor
	retval.BorderColor = v.DefaultCustomerGroup.BorderColor
	retval.Metadata = v.DefaultCustomerGroup.Metadata
	return &retval, nil
}

// createCustomerGroupRelationshipCreateCustomerGroupRelationship includes the requested fields of the GraphQL type CustomerGroupRelationship.
type createCustomerGroupRelationshipCreateCustomerGroupRelationship struct {
	DefaultCustomerGroupRelationship `json:"-"`
}

// GetId returns createCustomerGroupRelationshipCreateCustomerGroupRelationship.Id, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipCreateCustomerGroupRelationship) GetId() string {
	return v.DefaultCustomerGroupRelationship.Id
}

// GetCreatedAt returns createCustomerGroupRelationshipCreateCustomerGroupRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipCreateCustomerGroupRelationship) GetCreatedAt() *string {
	return v.DefaultCustomerGroupRelationship.CreatedAt
}

// GetUpdatedAt returns createCustomerGroupRelationshipCreateCustomerGroupRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipCreateCustomerGroupRelationship) GetUpdatedAt() *string {
	return v.DefaultCustomerGroupRelationship.UpdatedAt
}

// GetDeletedAt returns createCustomerGroupRelationshipCreateCustomerGroupRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipCreateCustomerGroupRelationship) GetDeletedAt() *string {
	return v.DefaultCustomerGroupRelationship.DeletedAt
}

// GetToken returns createCustomerGroupRelationshipCreateCustomerGroupRelationship.Token, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipCreateCustomerGroupRelationship) GetToken() string {
	return v.DefaultCustomerGroupRelationship.Token
}

// GetSourceCustomerGroup returns createCustomerGroupRelationshipCreateCustomerGroupRelationship.SourceCustomerGroup, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipCreateCustomerGroupRelationship) GetSourceCustomerGroup() DefaultCustomerGroupRelationshipSourceCustomerGroup {
	return v.DefaultCustomerGroupRelationship.SourceCustomerGroup
}

// GetTargets returns createCustomerGroupRelationshipCreateCustomerGroupRelationship.Targets, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipCreateCustomerGroupRelationship) GetTargets() DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultCustomerGroupRelationship.Targets
}

// GetRelationshipType returns createCustomerGroupRelationshipCreateCustomerGroupRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipCreateCustomerGroupRelationship) GetRelationshipType() DefaultCustomerGroupRelationshipRelationshipTypeCustomerGroupRelationshipType {
	return v.DefaultCustomerGroupRelationship.RelationshipType
}

// GetMetadata returns createCustomerGroupRelationshipCreateCustomerGroupRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipCreateCustomerGroupRelationship) GetMetadata() *string {
	return v.DefaultCustomerGroupRelationship.Metadata
}

func (v *createCustomerGroupRelationshipCreateCustomerGroupRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createCustomerGroupRelationshipCreateCustomerGroupRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.createCustomerGroupRelationshipCreateCustomerGroupRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerGroupRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateCustomerGroupRelationshipCreateCustomerGroupRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceCustomerGroup DefaultCustomerGroupRelationshipSourceCustomerGroup `json:"sourceCustomerGroup"`

	Targets DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultCustomerGroupRelationshipRelationshipTypeCustomerGroupRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *createCustomerGroupRelationshipCreateCustomerGroupRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createCustomerGroupRelationshipCreateCustomerGroupRelationship) __premarshalJSON() (*__premarshalcreateCustomerGroupRelationshipCreateCustomerGroupRelationship, error) {
	var retval __premarshalcreateCustomerGroupRelationshipCreateCustomerGroupRelationship

	retval.Id = v.DefaultCustomerGroupRelationship.Id
	retval.CreatedAt = v.DefaultCustomerGroupRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerGroupRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerGroupRelationship.DeletedAt
	retval.Token = v.DefaultCustomerGroupRelationship.Token
	retval.SourceCustomerGroup = v.DefaultCustomerGroupRelationship.SourceCustomerGroup
	retval.Targets = v.DefaultCustomerGroupRelationship.Targets
	retval.RelationshipType = v.DefaultCustomerGroupRelationship.RelationshipType
	retval.Metadata = v.DefaultCustomerGroupRelationship.Metadata
	return &retval, nil
}

// createCustomerGroupRelationshipResponse is returned by createCustomerGroupRelationship on success.
type createCustomerGroupRelationshipResponse struct {
	CreateCustomerGroupRelationship createCustomerGroupRelationshipCreateCustomerGroupRelationship `json:"createCustomerGroupRelationship"`
}

// GetCreateCustomerGroupRelationship returns createCustomerGroupRelationshipResponse.CreateCustomerGroupRelationship, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipResponse) GetCreateCustomerGroupRelationship() createCustomerGroupRelationshipCreateCustomerGroupRelationship {
	return v.CreateCustomerGroupRelationship
}

// createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType includes the requested fields of the GraphQL type CustomerGroupRelationshipType.
type createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType struct {
	DefaultCustomerGroupRelationshipType `json:"-"`
}

// GetId returns createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType) GetId() string {
	return v.DefaultCustomerGroupRelationshipType.Id
}

// GetCreatedAt returns createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType) GetCreatedAt() *string {
	return v.DefaultCustomerGroupRelationshipType.CreatedAt
}

// GetUpdatedAt returns createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType) GetUpdatedAt() *string {
	return v.DefaultCustomerGroupRelationshipType.UpdatedAt
}

// GetDeletedAt returns createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType) GetDeletedAt() *string {
	return v.DefaultCustomerGroupRelationshipType.DeletedAt
}

// GetToken returns createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType) GetToken() string {
	return v.DefaultCustomerGroupRelationshipType.Token
}

// GetName returns createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType) GetName() *string {
	return v.DefaultCustomerGroupRelationshipType.Name
}

// GetDescription returns createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType) GetDescription() *string {
	return v.DefaultCustomerGroupRelationshipType.Description
}

// GetMetadata returns createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType) GetMetadata() *string {
	return v.DefaultCustomerGroupRelationshipType.Metadata
}

func (v *createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerGroupRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType) __premarshalJSON() (*__premarshalcreateCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType, error) {
	var retval __premarshalcreateCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType

	retval.Id = v.DefaultCustomerGroupRelationshipType.Id
	retval.CreatedAt = v.DefaultCustomerGroupRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerGroupRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerGroupRelationshipType.DeletedAt
	retval.Token = v.DefaultCustomerGroupRelationshipType.Token
	retval.Name = v.DefaultCustomerGroupRelationshipType.Name
	retval.Description = v.DefaultCustomerGroupRelationshipType.Description
	retval.Metadata = v.DefaultCustomerGroupRelationshipType.Metadata
	return &retval, nil
}

// createCustomerGroupRelationshipTypeResponse is returned by createCustomerGroupRelationshipType on success.
type createCustomerGroupRelationshipTypeResponse struct {
	CreateCustomerGroupRelationshipType createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType `json:"createCustomerGroupRelationshipType"`
}

// GetCreateCustomerGroupRelationshipType returns createCustomerGroupRelationshipTypeResponse.CreateCustomerGroupRelationshipType, and is useful for accessing the field via an interface.
func (v *createCustomerGroupRelationshipTypeResponse) GetCreateCustomerGroupRelationshipType() createCustomerGroupRelationshipTypeCreateCustomerGroupRelationshipType {
	return v.CreateCustomerGroupRelationshipType
}

// createCustomerGroupResponse is returned by createCustomerGroup on success.
type createCustomerGroupResponse struct {
	CreateCustomerGroup createCustomerGroupCreateCustomerGroup `json:"createCustomerGroup"`
}

// GetCreateCustomerGroup returns createCustomerGroupResponse.CreateCustomerGroup, and is useful for accessing the field via an interface.
func (v *createCustomerGroupResponse) GetCreateCustomerGroup() createCustomerGroupCreateCustomerGroup {
	return v.CreateCustomerGroup
}

// createCustomerRelationshipCreateCustomerRelationship includes the requested fields of the GraphQL type CustomerRelationship.
type createCustomerRelationshipCreateCustomerRelationship struct {
	DefaultCustomerRelationship `json:"-"`
}

// GetId returns createCustomerRelationshipCreateCustomerRelationship.Id, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipCreateCustomerRelationship) GetId() string {
	return v.DefaultCustomerRelationship.Id
}

// GetCreatedAt returns createCustomerRelationshipCreateCustomerRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipCreateCustomerRelationship) GetCreatedAt() *string {
	return v.DefaultCustomerRelationship.CreatedAt
}

// GetUpdatedAt returns createCustomerRelationshipCreateCustomerRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipCreateCustomerRelationship) GetUpdatedAt() *string {
	return v.DefaultCustomerRelationship.UpdatedAt
}

// GetDeletedAt returns createCustomerRelationshipCreateCustomerRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipCreateCustomerRelationship) GetDeletedAt() *string {
	return v.DefaultCustomerRelationship.DeletedAt
}

// GetToken returns createCustomerRelationshipCreateCustomerRelationship.Token, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipCreateCustomerRelationship) GetToken() string {
	return v.DefaultCustomerRelationship.Token
}

// GetSourceCustomer returns createCustomerRelationshipCreateCustomerRelationship.SourceCustomer, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipCreateCustomerRelationship) GetSourceCustomer() DefaultCustomerRelationshipSourceCustomer {
	return v.DefaultCustomerRelationship.SourceCustomer
}

// GetTargets returns createCustomerRelationshipCreateCustomerRelationship.Targets, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipCreateCustomerRelationship) GetTargets() DefaultCustomerRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultCustomerRelationship.Targets
}

// GetRelationshipType returns createCustomerRelationshipCreateCustomerRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipCreateCustomerRelationship) GetRelationshipType() DefaultCustomerRelationshipRelationshipTypeCustomerRelationshipType {
	return v.DefaultCustomerRelationship.RelationshipType
}

// GetMetadata returns createCustomerRelationshipCreateCustomerRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipCreateCustomerRelationship) GetMetadata() *string {
	return v.DefaultCustomerRelationship.Metadata
}

func (v *createCustomerRelationshipCreateCustomerRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createCustomerRelationshipCreateCustomerRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.createCustomerRelationshipCreateCustomerRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateCustomerRelationshipCreateCustomerRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceCustomer DefaultCustomerRelationshipSourceCustomer `json:"sourceCustomer"`

	Targets DefaultCustomerRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultCustomerRelationshipRelationshipTypeCustomerRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *createCustomerRelationshipCreateCustomerRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createCustomerRelationshipCreateCustomerRelationship) __premarshalJSON() (*__premarshalcreateCustomerRelationshipCreateCustomerRelationship, error) {
	var retval __premarshalcreateCustomerRelationshipCreateCustomerRelationship

	retval.Id = v.DefaultCustomerRelationship.Id
	retval.CreatedAt = v.DefaultCustomerRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerRelationship.DeletedAt
	retval.Token = v.DefaultCustomerRelationship.Token
	retval.SourceCustomer = v.DefaultCustomerRelationship.SourceCustomer
	retval.Targets = v.DefaultCustomerRelationship.Targets
	retval.RelationshipType = v.DefaultCustomerRelationship.RelationshipType
	retval.Metadata = v.DefaultCustomerRelationship.Metadata
	return &retval, nil
}

// createCustomerRelationshipResponse is returned by createCustomerRelationship on success.
type createCustomerRelationshipResponse struct {
	CreateCustomerRelationship createCustomerRelationshipCreateCustomerRelationship `json:"createCustomerRelationship"`
}

// GetCreateCustomerRelationship returns createCustomerRelationshipResponse.CreateCustomerRelationship, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipResponse) GetCreateCustomerRelationship() createCustomerRelationshipCreateCustomerRelationship {
	return v.CreateCustomerRelationship
}

// createCustomerRelationshipTypeCreateCustomerRelationshipType includes the requested fields of the GraphQL type CustomerRelationshipType.
type createCustomerRelationshipTypeCreateCustomerRelationshipType struct {
	DefaultCustomerRelationshipType `json:"-"`
}

// GetId returns createCustomerRelationshipTypeCreateCustomerRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipTypeCreateCustomerRelationshipType) GetId() string {
	return v.DefaultCustomerRelationshipType.Id
}

// GetCreatedAt returns createCustomerRelationshipTypeCreateCustomerRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipTypeCreateCustomerRelationshipType) GetCreatedAt() *string {
	return v.DefaultCustomerRelationshipType.CreatedAt
}

// GetUpdatedAt returns createCustomerRelationshipTypeCreateCustomerRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipTypeCreateCustomerRelationshipType) GetUpdatedAt() *string {
	return v.DefaultCustomerRelationshipType.UpdatedAt
}

// GetDeletedAt returns createCustomerRelationshipTypeCreateCustomerRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipTypeCreateCustomerRelationshipType) GetDeletedAt() *string {
	return v.DefaultCustomerRelationshipType.DeletedAt
}

// GetToken returns createCustomerRelationshipTypeCreateCustomerRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipTypeCreateCustomerRelationshipType) GetToken() string {
	return v.DefaultCustomerRelationshipType.Token
}

// GetName returns createCustomerRelationshipTypeCreateCustomerRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipTypeCreateCustomerRelationshipType) GetName() *string {
	return v.DefaultCustomerRelationshipType.Name
}

// GetDescription returns createCustomerRelationshipTypeCreateCustomerRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipTypeCreateCustomerRelationshipType) GetDescription() *string {
	return v.DefaultCustomerRelationshipType.Description
}

// GetMetadata returns createCustomerRelationshipTypeCreateCustomerRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipTypeCreateCustomerRelationshipType) GetMetadata() *string {
	return v.DefaultCustomerRelationshipType.Metadata
}

func (v *createCustomerRelationshipTypeCreateCustomerRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createCustomerRelationshipTypeCreateCustomerRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.createCustomerRelationshipTypeCreateCustomerRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateCustomerRelationshipTypeCreateCustomerRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *createCustomerRelationshipTypeCreateCustomerRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createCustomerRelationshipTypeCreateCustomerRelationshipType) __premarshalJSON() (*__premarshalcreateCustomerRelationshipTypeCreateCustomerRelationshipType, error) {
	var retval __premarshalcreateCustomerRelationshipTypeCreateCustomerRelationshipType

	retval.Id = v.DefaultCustomerRelationshipType.Id
	retval.CreatedAt = v.DefaultCustomerRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerRelationshipType.DeletedAt
	retval.Token = v.DefaultCustomerRelationshipType.Token
	retval.Name = v.DefaultCustomerRelationshipType.Name
	retval.Description = v.DefaultCustomerRelationshipType.Description
	retval.Metadata = v.DefaultCustomerRelationshipType.Metadata
	return &retval, nil
}

// createCustomerRelationshipTypeResponse is returned by createCustomerRelationshipType on success.
type createCustomerRelationshipTypeResponse struct {
	CreateCustomerRelationshipType createCustomerRelationshipTypeCreateCustomerRelationshipType `json:"createCustomerRelationshipType"`
}

// GetCreateCustomerRelationshipType returns createCustomerRelationshipTypeResponse.CreateCustomerRelationshipType, and is useful for accessing the field via an interface.
func (v *createCustomerRelationshipTypeResponse) GetCreateCustomerRelationshipType() createCustomerRelationshipTypeCreateCustomerRelationshipType {
	return v.CreateCustomerRelationshipType
}

// createCustomerResponse is returned by createCustomer on success.
type createCustomerResponse struct {
	CreateCustomer createCustomerCreateCustomer `json:"createCustomer"`
}

// GetCreateCustomer returns createCustomerResponse.CreateCustomer, and is useful for accessing the field via an interface.
func (v *createCustomerResponse) GetCreateCustomer() createCustomerCreateCustomer {
	return v.CreateCustomer
}

// createCustomerTypeCreateCustomerType includes the requested fields of the GraphQL type CustomerType.
type createCustomerTypeCreateCustomerType struct {
	DefaultCustomerType `json:"-"`
}

// GetId returns createCustomerTypeCreateCustomerType.Id, and is useful for accessing the field via an interface.
func (v *createCustomerTypeCreateCustomerType) GetId() string { return v.DefaultCustomerType.Id }

// GetCreatedAt returns createCustomerTypeCreateCustomerType.CreatedAt, and is useful for accessing the field via an interface.
func (v *createCustomerTypeCreateCustomerType) GetCreatedAt() *string {
	return v.DefaultCustomerType.CreatedAt
}

// GetUpdatedAt returns createCustomerTypeCreateCustomerType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createCustomerTypeCreateCustomerType) GetUpdatedAt() *string {
	return v.DefaultCustomerType.UpdatedAt
}

// GetDeletedAt returns createCustomerTypeCreateCustomerType.DeletedAt, and is useful for accessing the field via an interface.
func (v *createCustomerTypeCreateCustomerType) GetDeletedAt() *string {
	return v.DefaultCustomerType.DeletedAt
}

// GetToken returns createCustomerTypeCreateCustomerType.Token, and is useful for accessing the field via an interface.
func (v *createCustomerTypeCreateCustomerType) GetToken() string { return v.DefaultCustomerType.Token }

// GetName returns createCustomerTypeCreateCustomerType.Name, and is useful for accessing the field via an interface.
func (v *createCustomerTypeCreateCustomerType) GetName() *string { return v.DefaultCustomerType.Name }

// GetDescription returns createCustomerTypeCreateCustomerType.Description, and is useful for accessing the field via an interface.
func (v *createCustomerTypeCreateCustomerType) GetDescription() *string {
	return v.DefaultCustomerType.Description
}

// GetImageUrl returns createCustomerTypeCreateCustomerType.ImageUrl, and is useful for accessing the field via an interface.
func (v *createCustomerTypeCreateCustomerType) GetImageUrl() *string {
	return v.DefaultCustomerType.ImageUrl
}

// GetIcon returns createCustomerTypeCreateCustomerType.Icon, and is useful for accessing the field via an interface.
func (v *createCustomerTypeCreateCustomerType) GetIcon() *string { return v.DefaultCustomerType.Icon }

// GetBackgroundColor returns createCustomerTypeCreateCustomerType.BackgroundColor, and is useful for accessing the field via an interface.
func (v *createCustomerTypeCreateCustomerType) GetBackgroundColor() *string {
	return v.DefaultCustomerType.BackgroundColor
}

// GetForegroundColor returns createCustomerTypeCreateCustomerType.ForegroundColor, and is useful for accessing the field via an interface.
func (v *createCustomerTypeCreateCustomerType) GetForegroundColor() *string {
	return v.DefaultCustomerType.ForegroundColor
}

// GetBorderColor returns createCustomerTypeCreateCustomerType.BorderColor, and is useful for accessing the field via an interface.
func (v *createCustomerTypeCreateCustomerType) GetBorderColor() *string {
	return v.DefaultCustomerType.BorderColor
}

// GetMetadata returns createCustomerTypeCreateCustomerType.Metadata, and is useful for accessing the field via an interface.
func (v *createCustomerTypeCreateCustomerType) GetMetadata() *string {
	return v.DefaultCustomerType.Metadata
}

func (v *createCustomerTypeCreateCustomerType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createCustomerTypeCreateCustomerType
		graphql.NoUnmarshalJSON
	}
	firstPass.createCustomerTypeCreateCustomerType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateCustomerTypeCreateCustomerType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *createCustomerTypeCreateCustomerType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createCustomerTypeCreateCustomerType) __premarshalJSON() (*__premarshalcreateCustomerTypeCreateCustomerType, error) {
	var retval __premarshalcreateCustomerTypeCreateCustomerType

	retval.Id = v.DefaultCustomerType.Id
	retval.CreatedAt = v.DefaultCustomerType.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerType.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerType.DeletedAt
	retval.Token = v.DefaultCustomerType.Token
	retval.Name = v.DefaultCustomerType.Name
	retval.Description = v.DefaultCustomerType.Description
	retval.ImageUrl = v.DefaultCustomerType.ImageUrl
	retval.Icon = v.DefaultCustomerType.Icon
	retval.BackgroundColor = v.DefaultCustomerType.BackgroundColor
	retval.ForegroundColor = v.DefaultCustomerType.ForegroundColor
	retval.BorderColor = v.DefaultCustomerType.BorderColor
	retval.Metadata = v.DefaultCustomerType.Metadata
	return &retval, nil
}

// createCustomerTypeResponse is returned by createCustomerType on success.
type createCustomerTypeResponse struct {
	CreateCustomerType createCustomerTypeCreateCustomerType `json:"createCustomerType"`
}

// GetCreateCustomerType returns createCustomerTypeResponse.CreateCustomerType, and is useful for accessing the field via an interface.
func (v *createCustomerTypeResponse) GetCreateCustomerType() createCustomerTypeCreateCustomerType {
	return v.CreateCustomerType
}

// createDeviceCreateDevice includes the requested fields of the GraphQL type Device.
type createDeviceCreateDevice struct {
	DefaultDevice `json:"-"`
}

// GetId returns createDeviceCreateDevice.Id, and is useful for accessing the field via an interface.
func (v *createDeviceCreateDevice) GetId() string { return v.DefaultDevice.Id }

// GetCreatedAt returns createDeviceCreateDevice.CreatedAt, and is useful for accessing the field via an interface.
func (v *createDeviceCreateDevice) GetCreatedAt() *string { return v.DefaultDevice.CreatedAt }

// GetUpdatedAt returns createDeviceCreateDevice.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createDeviceCreateDevice) GetUpdatedAt() *string { return v.DefaultDevice.UpdatedAt }

// GetDeletedAt returns createDeviceCreateDevice.DeletedAt, and is useful for accessing the field via an interface.
func (v *createDeviceCreateDevice) GetDeletedAt() *string { return v.DefaultDevice.DeletedAt }

// GetToken returns createDeviceCreateDevice.Token, and is useful for accessing the field via an interface.
func (v *createDeviceCreateDevice) GetToken() string { return v.DefaultDevice.Token }

// GetName returns createDeviceCreateDevice.Name, and is useful for accessing the field via an interface.
func (v *createDeviceCreateDevice) GetName() *string { return v.DefaultDevice.Name }

// GetDescription returns createDeviceCreateDevice.Description, and is useful for accessing the field via an interface.
func (v *createDeviceCreateDevice) GetDescription() *string { return v.DefaultDevice.Description }

// GetDeviceType returns createDeviceCreateDevice.DeviceType, and is useful for accessing the field via an interface.
func (v *createDeviceCreateDevice) GetDeviceType() DefaultDeviceDeviceType {
	return v.DefaultDevice.DeviceType
}

// GetMetadata returns createDeviceCreateDevice.Metadata, and is useful for accessing the field via an interface.
func (v *createDeviceCreateDevice) GetMetadata() *string { return v.DefaultDevice.Metadata }

func (v *createDeviceCreateDevice) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createDeviceCreateDevice
		graphql.NoUnmarshalJSON
	}
	firstPass.createDeviceCreateDevice = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDevice)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateDeviceCreateDevice struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	DeviceType DefaultDeviceDeviceType `json:"deviceType"`

	Metadata *string `json:"metadata"`
}

func (v *createDeviceCreateDevice) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createDeviceCreateDevice) __premarshalJSON() (*__premarshalcreateDeviceCreateDevice, error) {
	var retval __premarshalcreateDeviceCreateDevice

	retval.Id = v.DefaultDevice.Id
	retval.CreatedAt = v.DefaultDevice.CreatedAt
	retval.UpdatedAt = v.DefaultDevice.UpdatedAt
	retval.DeletedAt = v.DefaultDevice.DeletedAt
	retval.Token = v.DefaultDevice.Token
	retval.Name = v.DefaultDevice.Name
	retval.Description = v.DefaultDevice.Description
	retval.DeviceType = v.DefaultDevice.DeviceType
	retval.Metadata = v.DefaultDevice.Metadata
	return &retval, nil
}

// createDeviceGroupCreateDeviceGroup includes the requested fields of the GraphQL type DeviceGroup.
type createDeviceGroupCreateDeviceGroup struct {
	DefaultDeviceGroup `json:"-"`
}

// GetId returns createDeviceGroupCreateDeviceGroup.Id, and is useful for accessing the field via an interface.
func (v *createDeviceGroupCreateDeviceGroup) GetId() string { return v.DefaultDeviceGroup.Id }

// GetCreatedAt returns createDeviceGroupCreateDeviceGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *createDeviceGroupCreateDeviceGroup) GetCreatedAt() *string {
	return v.DefaultDeviceGroup.CreatedAt
}

// GetUpdatedAt returns createDeviceGroupCreateDeviceGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createDeviceGroupCreateDeviceGroup) GetUpdatedAt() *string {
	return v.DefaultDeviceGroup.UpdatedAt
}

// GetDeletedAt returns createDeviceGroupCreateDeviceGroup.DeletedAt, and is useful for accessing the field via an interface.
func (v *createDeviceGroupCreateDeviceGroup) GetDeletedAt() *string {
	return v.DefaultDeviceGroup.DeletedAt
}

// GetToken returns createDeviceGroupCreateDeviceGroup.Token, and is useful for accessing the field via an interface.
func (v *createDeviceGroupCreateDeviceGroup) GetToken() string { return v.DefaultDeviceGroup.Token }

// GetName returns createDeviceGroupCreateDeviceGroup.Name, and is useful for accessing the field via an interface.
func (v *createDeviceGroupCreateDeviceGroup) GetName() *string { return v.DefaultDeviceGroup.Name }

// GetDescription returns createDeviceGroupCreateDeviceGroup.Description, and is useful for accessing the field via an interface.
func (v *createDeviceGroupCreateDeviceGroup) GetDescription() *string {
	return v.DefaultDeviceGroup.Description
}

// GetImageUrl returns createDeviceGroupCreateDeviceGroup.ImageUrl, and is useful for accessing the field via an interface.
func (v *createDeviceGroupCreateDeviceGroup) GetImageUrl() *string {
	return v.DefaultDeviceGroup.ImageUrl
}

// GetIcon returns createDeviceGroupCreateDeviceGroup.Icon, and is useful for accessing the field via an interface.
func (v *createDeviceGroupCreateDeviceGroup) GetIcon() *string { return v.DefaultDeviceGroup.Icon }

// GetBackgroundColor returns createDeviceGroupCreateDeviceGroup.BackgroundColor, and is useful for accessing the field via an interface.
func (v *createDeviceGroupCreateDeviceGroup) GetBackgroundColor() *string {
	return v.DefaultDeviceGroup.BackgroundColor
}

// GetForegroundColor returns createDeviceGroupCreateDeviceGroup.ForegroundColor, and is useful for accessing the field via an interface.
func (v *createDeviceGroupCreateDeviceGroup) GetForegroundColor() *string {
	return v.DefaultDeviceGroup.ForegroundColor
}

// GetBorderColor returns createDeviceGroupCreateDeviceGroup.BorderColor, and is useful for accessing the field via an interface.
func (v *createDeviceGroupCreateDeviceGroup) GetBorderColor() *string {
	return v.DefaultDeviceGroup.BorderColor
}

// GetMetadata returns createDeviceGroupCreateDeviceGroup.Metadata, and is useful for accessing the field via an interface.
func (v *createDeviceGroupCreateDeviceGroup) GetMetadata() *string {
	return v.DefaultDeviceGroup.Metadata
}

func (v *createDeviceGroupCreateDeviceGroup) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createDeviceGroupCreateDeviceGroup
		graphql.NoUnmarshalJSON
	}
	firstPass.createDeviceGroupCreateDeviceGroup = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceGroup)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateDeviceGroupCreateDeviceGroup struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *createDeviceGroupCreateDeviceGroup) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createDeviceGroupCreateDeviceGroup) __premarshalJSON() (*__premarshalcreateDeviceGroupCreateDeviceGroup, error) {
	var retval __premarshalcreateDeviceGroupCreateDeviceGroup

	retval.Id = v.DefaultDeviceGroup.Id
	retval.CreatedAt = v.DefaultDeviceGroup.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceGroup.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceGroup.DeletedAt
	retval.Token = v.DefaultDeviceGroup.Token
	retval.Name = v.DefaultDeviceGroup.Name
	retval.Description = v.DefaultDeviceGroup.Description
	retval.ImageUrl = v.DefaultDeviceGroup.ImageUrl
	retval.Icon = v.DefaultDeviceGroup.Icon
	retval.BackgroundColor = v.DefaultDeviceGroup.BackgroundColor
	retval.ForegroundColor = v.DefaultDeviceGroup.ForegroundColor
	retval.BorderColor = v.DefaultDeviceGroup.BorderColor
	retval.Metadata = v.DefaultDeviceGroup.Metadata
	return &retval, nil
}

// createDeviceGroupRelationshipCreateDeviceGroupRelationship includes the requested fields of the GraphQL type DeviceGroupRelationship.
type createDeviceGroupRelationshipCreateDeviceGroupRelationship struct {
	DefaultDeviceGroupRelationship `json:"-"`
}

// GetId returns createDeviceGroupRelationshipCreateDeviceGroupRelationship.Id, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipCreateDeviceGroupRelationship) GetId() string {
	return v.DefaultDeviceGroupRelationship.Id
}

// GetCreatedAt returns createDeviceGroupRelationshipCreateDeviceGroupRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipCreateDeviceGroupRelationship) GetCreatedAt() *string {
	return v.DefaultDeviceGroupRelationship.CreatedAt
}

// GetUpdatedAt returns createDeviceGroupRelationshipCreateDeviceGroupRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipCreateDeviceGroupRelationship) GetUpdatedAt() *string {
	return v.DefaultDeviceGroupRelationship.UpdatedAt
}

// GetDeletedAt returns createDeviceGroupRelationshipCreateDeviceGroupRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipCreateDeviceGroupRelationship) GetDeletedAt() *string {
	return v.DefaultDeviceGroupRelationship.DeletedAt
}

// GetToken returns createDeviceGroupRelationshipCreateDeviceGroupRelationship.Token, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipCreateDeviceGroupRelationship) GetToken() string {
	return v.DefaultDeviceGroupRelationship.Token
}

// GetSourceDeviceGroup returns createDeviceGroupRelationshipCreateDeviceGroupRelationship.SourceDeviceGroup, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipCreateDeviceGroupRelationship) GetSourceDeviceGroup() DefaultDeviceGroupRelationshipSourceDeviceGroup {
	return v.DefaultDeviceGroupRelationship.SourceDeviceGroup
}

// GetTargets returns createDeviceGroupRelationshipCreateDeviceGroupRelationship.Targets, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipCreateDeviceGroupRelationship) GetTargets() DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultDeviceGroupRelationship.Targets
}

// GetRelationshipType returns createDeviceGroupRelationshipCreateDeviceGroupRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipCreateDeviceGroupRelationship) GetRelationshipType() DefaultDeviceGroupRelationshipRelationshipTypeDeviceGroupRelationshipType {
	return v.DefaultDeviceGroupRelationship.RelationshipType
}

// GetMetadata returns createDeviceGroupRelationshipCreateDeviceGroupRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipCreateDeviceGroupRelationship) GetMetadata() *string {
	return v.DefaultDeviceGroupRelationship.Metadata
}

func (v *createDeviceGroupRelationshipCreateDeviceGroupRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createDeviceGroupRelationshipCreateDeviceGroupRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.createDeviceGroupRelationshipCreateDeviceGroupRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceGroupRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateDeviceGroupRelationshipCreateDeviceGroupRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceDeviceGroup DefaultDeviceGroupRelationshipSourceDeviceGroup `json:"sourceDeviceGroup"`

	Targets DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultDeviceGroupRelationshipRelationshipTypeDeviceGroupRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *createDeviceGroupRelationshipCreateDeviceGroupRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createDeviceGroupRelationshipCreateDeviceGroupRelationship) __premarshalJSON() (*__premarshalcreateDeviceGroupRelationshipCreateDeviceGroupRelationship, error) {
	var retval __premarshalcreateDeviceGroupRelationshipCreateDeviceGroupRelationship

	retval.Id = v.DefaultDeviceGroupRelationship.Id
	retval.CreatedAt = v.DefaultDeviceGroupRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceGroupRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceGroupRelationship.DeletedAt
	retval.Token = v.DefaultDeviceGroupRelationship.Token
	retval.SourceDeviceGroup = v.DefaultDeviceGroupRelationship.SourceDeviceGroup
	retval.Targets = v.DefaultDeviceGroupRelationship.Targets
	retval.RelationshipType = v.DefaultDeviceGroupRelationship.RelationshipType
	retval.Metadata = v.DefaultDeviceGroupRelationship.Metadata
	return &retval, nil
}

// createDeviceGroupRelationshipResponse is returned by createDeviceGroupRelationship on success.
type createDeviceGroupRelationshipResponse struct {
	CreateDeviceGroupRelationship createDeviceGroupRelationshipCreateDeviceGroupRelationship `json:"createDeviceGroupRelationship"`
}

// GetCreateDeviceGroupRelationship returns createDeviceGroupRelationshipResponse.CreateDeviceGroupRelationship, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipResponse) GetCreateDeviceGroupRelationship() createDeviceGroupRelationshipCreateDeviceGroupRelationship {
	return v.CreateDeviceGroupRelationship
}

// createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType includes the requested fields of the GraphQL type DeviceGroupRelationshipType.
type createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType struct {
	DefaultDeviceGroupRelationshipType `json:"-"`
}

// GetId returns createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType) GetId() string {
	return v.DefaultDeviceGroupRelationshipType.Id
}

// GetCreatedAt returns createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType) GetCreatedAt() *string {
	return v.DefaultDeviceGroupRelationshipType.CreatedAt
}

// GetUpdatedAt returns createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType) GetUpdatedAt() *string {
	return v.DefaultDeviceGroupRelationshipType.UpdatedAt
}

// GetDeletedAt returns createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType) GetDeletedAt() *string {
	return v.DefaultDeviceGroupRelationshipType.DeletedAt
}

// GetToken returns createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType) GetToken() string {
	return v.DefaultDeviceGroupRelationshipType.Token
}

// GetName returns createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType) GetName() *string {
	return v.DefaultDeviceGroupRelationshipType.Name
}

// GetDescription returns createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType) GetDescription() *string {
	return v.DefaultDeviceGroupRelationshipType.Description
}

// GetMetadata returns createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType) GetMetadata() *string {
	return v.DefaultDeviceGroupRelationshipType.Metadata
}

func (v *createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceGroupRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType) __premarshalJSON() (*__premarshalcreateDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType, error) {
	var retval __premarshalcreateDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType

	retval.Id = v.DefaultDeviceGroupRelationshipType.Id
	retval.CreatedAt = v.DefaultDeviceGroupRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceGroupRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceGroupRelationshipType.DeletedAt
	retval.Token = v.DefaultDeviceGroupRelationshipType.Token
	retval.Name = v.DefaultDeviceGroupRelationshipType.Name
	retval.Description = v.DefaultDeviceGroupRelationshipType.Description
	retval.Metadata = v.DefaultDeviceGroupRelationshipType.Metadata
	return &retval, nil
}

// createDeviceGroupRelationshipTypeResponse is returned by createDeviceGroupRelationshipType on success.
type createDeviceGroupRelationshipTypeResponse struct {
	CreateDeviceGroupRelationshipType createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType `json:"createDeviceGroupRelationshipType"`
}

// GetCreateDeviceGroupRelationshipType returns createDeviceGroupRelationshipTypeResponse.CreateDeviceGroupRelationshipType, and is useful for accessing the field via an interface.
func (v *createDeviceGroupRelationshipTypeResponse) GetCreateDeviceGroupRelationshipType() createDeviceGroupRelationshipTypeCreateDeviceGroupRelationshipType {
	return v.CreateDeviceGroupRelationshipType
}

// createDeviceGroupResponse is returned by createDeviceGroup on success.
type createDeviceGroupResponse struct {
	CreateDeviceGroup createDeviceGroupCreateDeviceGroup `json:"createDeviceGroup"`
}

// GetCreateDeviceGroup returns createDeviceGroupResponse.CreateDeviceGroup, and is useful for accessing the field via an interface.
func (v *createDeviceGroupResponse) GetCreateDeviceGroup() createDeviceGroupCreateDeviceGroup {
	return v.CreateDeviceGroup
}

// createDeviceRelationshipCreateDeviceRelationship includes the requested fields of the GraphQL type DeviceRelationship.
type createDeviceRelationshipCreateDeviceRelationship struct {
	DefaultDeviceRelationship `json:"-"`
}

// GetId returns createDeviceRelationshipCreateDeviceRelationship.Id, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipCreateDeviceRelationship) GetId() string {
	return v.DefaultDeviceRelationship.Id
}

// GetCreatedAt returns createDeviceRelationshipCreateDeviceRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipCreateDeviceRelationship) GetCreatedAt() *string {
	return v.DefaultDeviceRelationship.CreatedAt
}

// GetUpdatedAt returns createDeviceRelationshipCreateDeviceRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipCreateDeviceRelationship) GetUpdatedAt() *string {
	return v.DefaultDeviceRelationship.UpdatedAt
}

// GetDeletedAt returns createDeviceRelationshipCreateDeviceRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipCreateDeviceRelationship) GetDeletedAt() *string {
	return v.DefaultDeviceRelationship.DeletedAt
}

// GetToken returns createDeviceRelationshipCreateDeviceRelationship.Token, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipCreateDeviceRelationship) GetToken() string {
	return v.DefaultDeviceRelationship.Token
}

// GetSourceDevice returns createDeviceRelationshipCreateDeviceRelationship.SourceDevice, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipCreateDeviceRelationship) GetSourceDevice() DefaultDeviceRelationshipSourceDevice {
	return v.DefaultDeviceRelationship.SourceDevice
}

// GetTargets returns createDeviceRelationshipCreateDeviceRelationship.Targets, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipCreateDeviceRelationship) GetTargets() DefaultDeviceRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultDeviceRelationship.Targets
}

// GetRelationshipType returns createDeviceRelationshipCreateDeviceRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipCreateDeviceRelationship) GetRelationshipType() DefaultDeviceRelationshipRelationshipTypeDeviceRelationshipType {
	return v.DefaultDeviceRelationship.RelationshipType
}

// GetMetadata returns createDeviceRelationshipCreateDeviceRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipCreateDeviceRelationship) GetMetadata() *string {
	return v.DefaultDeviceRelationship.Metadata
}

func (v *createDeviceRelationshipCreateDeviceRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createDeviceRelationshipCreateDeviceRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.createDeviceRelationshipCreateDeviceRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateDeviceRelationshipCreateDeviceRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceDevice DefaultDeviceRelationshipSourceDevice `json:"sourceDevice"`

	Targets DefaultDeviceRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultDeviceRelationshipRelationshipTypeDeviceRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *createDeviceRelationshipCreateDeviceRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createDeviceRelationshipCreateDeviceRelationship) __premarshalJSON() (*__premarshalcreateDeviceRelationshipCreateDeviceRelationship, error) {
	var retval __premarshalcreateDeviceRelationshipCreateDeviceRelationship

	retval.Id = v.DefaultDeviceRelationship.Id
	retval.CreatedAt = v.DefaultDeviceRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceRelationship.DeletedAt
	retval.Token = v.DefaultDeviceRelationship.Token
	retval.SourceDevice = v.DefaultDeviceRelationship.SourceDevice
	retval.Targets = v.DefaultDeviceRelationship.Targets
	retval.RelationshipType = v.DefaultDeviceRelationship.RelationshipType
	retval.Metadata = v.DefaultDeviceRelationship.Metadata
	return &retval, nil
}

// createDeviceRelationshipResponse is returned by createDeviceRelationship on success.
type createDeviceRelationshipResponse struct {
	CreateDeviceRelationship createDeviceRelationshipCreateDeviceRelationship `json:"createDeviceRelationship"`
}

// GetCreateDeviceRelationship returns createDeviceRelationshipResponse.CreateDeviceRelationship, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipResponse) GetCreateDeviceRelationship() createDeviceRelationshipCreateDeviceRelationship {
	return v.CreateDeviceRelationship
}

// createDeviceRelationshipTypeCreateDeviceRelationshipType includes the requested fields of the GraphQL type DeviceRelationshipType.
type createDeviceRelationshipTypeCreateDeviceRelationshipType struct {
	DefaultDeviceRelationshipType `json:"-"`
}

// GetId returns createDeviceRelationshipTypeCreateDeviceRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipTypeCreateDeviceRelationshipType) GetId() string {
	return v.DefaultDeviceRelationshipType.Id
}

// GetCreatedAt returns createDeviceRelationshipTypeCreateDeviceRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipTypeCreateDeviceRelationshipType) GetCreatedAt() *string {
	return v.DefaultDeviceRelationshipType.CreatedAt
}

// GetUpdatedAt returns createDeviceRelationshipTypeCreateDeviceRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipTypeCreateDeviceRelationshipType) GetUpdatedAt() *string {
	return v.DefaultDeviceRelationshipType.UpdatedAt
}

// GetDeletedAt returns createDeviceRelationshipTypeCreateDeviceRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipTypeCreateDeviceRelationshipType) GetDeletedAt() *string {
	return v.DefaultDeviceRelationshipType.DeletedAt
}

// GetToken returns createDeviceRelationshipTypeCreateDeviceRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipTypeCreateDeviceRelationshipType) GetToken() string {
	return v.DefaultDeviceRelationshipType.Token
}

// GetName returns createDeviceRelationshipTypeCreateDeviceRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipTypeCreateDeviceRelationshipType) GetName() *string {
	return v.DefaultDeviceRelationshipType.Name
}

// GetDescription returns createDeviceRelationshipTypeCreateDeviceRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipTypeCreateDeviceRelationshipType) GetDescription() *string {
	return v.DefaultDeviceRelationshipType.Description
}

// GetMetadata returns createDeviceRelationshipTypeCreateDeviceRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipTypeCreateDeviceRelationshipType) GetMetadata() *string {
	return v.DefaultDeviceRelationshipType.Metadata
}

// GetTracked returns createDeviceRelationshipTypeCreateDeviceRelationshipType.Tracked, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipTypeCreateDeviceRelationshipType) GetTracked() bool {
	return v.DefaultDeviceRelationshipType.Tracked
}

func (v *createDeviceRelationshipTypeCreateDeviceRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createDeviceRelationshipTypeCreateDeviceRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.createDeviceRelationshipTypeCreateDeviceRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateDeviceRelationshipTypeCreateDeviceRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`

	Tracked bool `json:"tracked"`
}

func (v *createDeviceRelationshipTypeCreateDeviceRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createDeviceRelationshipTypeCreateDeviceRelationshipType) __premarshalJSON() (*__premarshalcreateDeviceRelationshipTypeCreateDeviceRelationshipType, error) {
	var retval __premarshalcreateDeviceRelationshipTypeCreateDeviceRelationshipType

	retval.Id = v.DefaultDeviceRelationshipType.Id
	retval.CreatedAt = v.DefaultDeviceRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceRelationshipType.DeletedAt
	retval.Token = v.DefaultDeviceRelationshipType.Token
	retval.Name = v.DefaultDeviceRelationshipType.Name
	retval.Description = v.DefaultDeviceRelationshipType.Description
	retval.Metadata = v.DefaultDeviceRelationshipType.Metadata
	retval.Tracked = v.DefaultDeviceRelationshipType.Tracked
	return &retval, nil
}

// createDeviceRelationshipTypeResponse is returned by createDeviceRelationshipType on success.
type createDeviceRelationshipTypeResponse struct {
	CreateDeviceRelationshipType createDeviceRelationshipTypeCreateDeviceRelationshipType `json:"createDeviceRelationshipType"`
}

// GetCreateDeviceRelationshipType returns createDeviceRelationshipTypeResponse.CreateDeviceRelationshipType, and is useful for accessing the field via an interface.
func (v *createDeviceRelationshipTypeResponse) GetCreateDeviceRelationshipType() createDeviceRelationshipTypeCreateDeviceRelationshipType {
	return v.CreateDeviceRelationshipType
}

// createDeviceResponse is returned by createDevice on success.
type createDeviceResponse struct {
	CreateDevice createDeviceCreateDevice `json:"createDevice"`
}

// GetCreateDevice returns createDeviceResponse.CreateDevice, and is useful for accessing the field via an interface.
func (v *createDeviceResponse) GetCreateDevice() createDeviceCreateDevice { return v.CreateDevice }

// createDeviceTypeCreateDeviceType includes the requested fields of the GraphQL type DeviceType.
type createDeviceTypeCreateDeviceType struct {
	DefaultDeviceType `json:"-"`
}

// GetId returns createDeviceTypeCreateDeviceType.Id, and is useful for accessing the field via an interface.
func (v *createDeviceTypeCreateDeviceType) GetId() string { return v.DefaultDeviceType.Id }

// GetCreatedAt returns createDeviceTypeCreateDeviceType.CreatedAt, and is useful for accessing the field via an interface.
func (v *createDeviceTypeCreateDeviceType) GetCreatedAt() *string {
	return v.DefaultDeviceType.CreatedAt
}

// GetUpdatedAt returns createDeviceTypeCreateDeviceType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createDeviceTypeCreateDeviceType) GetUpdatedAt() *string {
	return v.DefaultDeviceType.UpdatedAt
}

// GetDeletedAt returns createDeviceTypeCreateDeviceType.DeletedAt, and is useful for accessing the field via an interface.
func (v *createDeviceTypeCreateDeviceType) GetDeletedAt() *string {
	return v.DefaultDeviceType.DeletedAt
}

// GetToken returns createDeviceTypeCreateDeviceType.Token, and is useful for accessing the field via an interface.
func (v *createDeviceTypeCreateDeviceType) GetToken() string { return v.DefaultDeviceType.Token }

// GetName returns createDeviceTypeCreateDeviceType.Name, and is useful for accessing the field via an interface.
func (v *createDeviceTypeCreateDeviceType) GetName() *string { return v.DefaultDeviceType.Name }

// GetDescription returns createDeviceTypeCreateDeviceType.Description, and is useful for accessing the field via an interface.
func (v *createDeviceTypeCreateDeviceType) GetDescription() *string {
	return v.DefaultDeviceType.Description
}

// GetImageUrl returns createDeviceTypeCreateDeviceType.ImageUrl, and is useful for accessing the field via an interface.
func (v *createDeviceTypeCreateDeviceType) GetImageUrl() *string { return v.DefaultDeviceType.ImageUrl }

// GetIcon returns createDeviceTypeCreateDeviceType.Icon, and is useful for accessing the field via an interface.
func (v *createDeviceTypeCreateDeviceType) GetIcon() *string { return v.DefaultDeviceType.Icon }

// GetBackgroundColor returns createDeviceTypeCreateDeviceType.BackgroundColor, and is useful for accessing the field via an interface.
func (v *createDeviceTypeCreateDeviceType) GetBackgroundColor() *string {
	return v.DefaultDeviceType.BackgroundColor
}

// GetForegroundColor returns createDeviceTypeCreateDeviceType.ForegroundColor, and is useful for accessing the field via an interface.
func (v *createDeviceTypeCreateDeviceType) GetForegroundColor() *string {
	return v.DefaultDeviceType.ForegroundColor
}

// GetBorderColor returns createDeviceTypeCreateDeviceType.BorderColor, and is useful for accessing the field via an interface.
func (v *createDeviceTypeCreateDeviceType) GetBorderColor() *string {
	return v.DefaultDeviceType.BorderColor
}

// GetMetadata returns createDeviceTypeCreateDeviceType.Metadata, and is useful for accessing the field via an interface.
func (v *createDeviceTypeCreateDeviceType) GetMetadata() *string { return v.DefaultDeviceType.Metadata }

func (v *createDeviceTypeCreateDeviceType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createDeviceTypeCreateDeviceType
		graphql.NoUnmarshalJSON
	}
	firstPass.createDeviceTypeCreateDeviceType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateDeviceTypeCreateDeviceType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *createDeviceTypeCreateDeviceType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createDeviceTypeCreateDeviceType) __premarshalJSON() (*__premarshalcreateDeviceTypeCreateDeviceType, error) {
	var retval __premarshalcreateDeviceTypeCreateDeviceType

	retval.Id = v.DefaultDeviceType.Id
	retval.CreatedAt = v.DefaultDeviceType.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceType.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceType.DeletedAt
	retval.Token = v.DefaultDeviceType.Token
	retval.Name = v.DefaultDeviceType.Name
	retval.Description = v.DefaultDeviceType.Description
	retval.ImageUrl = v.DefaultDeviceType.ImageUrl
	retval.Icon = v.DefaultDeviceType.Icon
	retval.BackgroundColor = v.DefaultDeviceType.BackgroundColor
	retval.ForegroundColor = v.DefaultDeviceType.ForegroundColor
	retval.BorderColor = v.DefaultDeviceType.BorderColor
	retval.Metadata = v.DefaultDeviceType.Metadata
	return &retval, nil
}

// createDeviceTypeResponse is returned by createDeviceType on success.
type createDeviceTypeResponse struct {
	CreateDeviceType createDeviceTypeCreateDeviceType `json:"createDeviceType"`
}

// GetCreateDeviceType returns createDeviceTypeResponse.CreateDeviceType, and is useful for accessing the field via an interface.
func (v *createDeviceTypeResponse) GetCreateDeviceType() createDeviceTypeCreateDeviceType {
	return v.CreateDeviceType
}

// getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType includes the requested fields of the GraphQL type AreaGroupRelationshipType.
type getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType struct {
	DefaultAreaGroupRelationshipType `json:"-"`
}

// GetId returns getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType) GetId() string {
	return v.DefaultAreaGroupRelationshipType.Id
}

// GetCreatedAt returns getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType) GetCreatedAt() *string {
	return v.DefaultAreaGroupRelationshipType.CreatedAt
}

// GetUpdatedAt returns getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType) GetUpdatedAt() *string {
	return v.DefaultAreaGroupRelationshipType.UpdatedAt
}

// GetDeletedAt returns getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType) GetDeletedAt() *string {
	return v.DefaultAreaGroupRelationshipType.DeletedAt
}

// GetToken returns getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType) GetToken() string {
	return v.DefaultAreaGroupRelationshipType.Token
}

// GetName returns getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType) GetName() *string {
	return v.DefaultAreaGroupRelationshipType.Name
}

// GetDescription returns getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType) GetDescription() *string {
	return v.DefaultAreaGroupRelationshipType.Description
}

// GetMetadata returns getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType) GetMetadata() *string {
	return v.DefaultAreaGroupRelationshipType.Metadata
}

func (v *getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaGroupRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType) __premarshalJSON() (*__premarshalgetAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType, error) {
	var retval __premarshalgetAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType

	retval.Id = v.DefaultAreaGroupRelationshipType.Id
	retval.CreatedAt = v.DefaultAreaGroupRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultAreaGroupRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultAreaGroupRelationshipType.DeletedAt
	retval.Token = v.DefaultAreaGroupRelationshipType.Token
	retval.Name = v.DefaultAreaGroupRelationshipType.Name
	retval.Description = v.DefaultAreaGroupRelationshipType.Description
	retval.Metadata = v.DefaultAreaGroupRelationshipType.Metadata
	return &retval, nil
}

// getAreaGroupRelationshipTypesByTokenResponse is returned by getAreaGroupRelationshipTypesByToken on success.
type getAreaGroupRelationshipTypesByTokenResponse struct {
	AreaGroupRelationshipTypesByToken []getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType `json:"areaGroupRelationshipTypesByToken"`
}

// GetAreaGroupRelationshipTypesByToken returns getAreaGroupRelationshipTypesByTokenResponse.AreaGroupRelationshipTypesByToken, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipTypesByTokenResponse) GetAreaGroupRelationshipTypesByToken() []getAreaGroupRelationshipTypesByTokenAreaGroupRelationshipTypesByTokenAreaGroupRelationshipType {
	return v.AreaGroupRelationshipTypesByToken
}

// getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship includes the requested fields of the GraphQL type AreaGroupRelationship.
type getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship struct {
	DefaultAreaGroupRelationship `json:"-"`
}

// GetId returns getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship.Id, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship) GetId() string {
	return v.DefaultAreaGroupRelationship.Id
}

// GetCreatedAt returns getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship) GetCreatedAt() *string {
	return v.DefaultAreaGroupRelationship.CreatedAt
}

// GetUpdatedAt returns getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship) GetUpdatedAt() *string {
	return v.DefaultAreaGroupRelationship.UpdatedAt
}

// GetDeletedAt returns getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship) GetDeletedAt() *string {
	return v.DefaultAreaGroupRelationship.DeletedAt
}

// GetToken returns getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship.Token, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship) GetToken() string {
	return v.DefaultAreaGroupRelationship.Token
}

// GetSourceAreaGroup returns getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship.SourceAreaGroup, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship) GetSourceAreaGroup() DefaultAreaGroupRelationshipSourceAreaGroup {
	return v.DefaultAreaGroupRelationship.SourceAreaGroup
}

// GetTargets returns getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship.Targets, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship) GetTargets() DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultAreaGroupRelationship.Targets
}

// GetRelationshipType returns getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship) GetRelationshipType() DefaultAreaGroupRelationshipRelationshipTypeAreaGroupRelationshipType {
	return v.DefaultAreaGroupRelationship.RelationshipType
}

// GetMetadata returns getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship) GetMetadata() *string {
	return v.DefaultAreaGroupRelationship.Metadata
}

func (v *getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaGroupRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceAreaGroup DefaultAreaGroupRelationshipSourceAreaGroup `json:"sourceAreaGroup"`

	Targets DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultAreaGroupRelationshipRelationshipTypeAreaGroupRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship) __premarshalJSON() (*__premarshalgetAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship, error) {
	var retval __premarshalgetAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship

	retval.Id = v.DefaultAreaGroupRelationship.Id
	retval.CreatedAt = v.DefaultAreaGroupRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultAreaGroupRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultAreaGroupRelationship.DeletedAt
	retval.Token = v.DefaultAreaGroupRelationship.Token
	retval.SourceAreaGroup = v.DefaultAreaGroupRelationship.SourceAreaGroup
	retval.Targets = v.DefaultAreaGroupRelationship.Targets
	retval.RelationshipType = v.DefaultAreaGroupRelationship.RelationshipType
	retval.Metadata = v.DefaultAreaGroupRelationship.Metadata
	return &retval, nil
}

// getAreaGroupRelationshipsByTokenResponse is returned by getAreaGroupRelationshipsByToken on success.
type getAreaGroupRelationshipsByTokenResponse struct {
	AreaGroupRelationshipsByToken []getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship `json:"areaGroupRelationshipsByToken"`
}

// GetAreaGroupRelationshipsByToken returns getAreaGroupRelationshipsByTokenResponse.AreaGroupRelationshipsByToken, and is useful for accessing the field via an interface.
func (v *getAreaGroupRelationshipsByTokenResponse) GetAreaGroupRelationshipsByToken() []getAreaGroupRelationshipsByTokenAreaGroupRelationshipsByTokenAreaGroupRelationship {
	return v.AreaGroupRelationshipsByToken
}

// getAreaGroupsByTokenAreaGroupsByTokenAreaGroup includes the requested fields of the GraphQL type AreaGroup.
type getAreaGroupsByTokenAreaGroupsByTokenAreaGroup struct {
	DefaultAreaGroup `json:"-"`
}

// GetId returns getAreaGroupsByTokenAreaGroupsByTokenAreaGroup.Id, and is useful for accessing the field via an interface.
func (v *getAreaGroupsByTokenAreaGroupsByTokenAreaGroup) GetId() string { return v.DefaultAreaGroup.Id }

// GetCreatedAt returns getAreaGroupsByTokenAreaGroupsByTokenAreaGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *getAreaGroupsByTokenAreaGroupsByTokenAreaGroup) GetCreatedAt() *string {
	return v.DefaultAreaGroup.CreatedAt
}

// GetUpdatedAt returns getAreaGroupsByTokenAreaGroupsByTokenAreaGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getAreaGroupsByTokenAreaGroupsByTokenAreaGroup) GetUpdatedAt() *string {
	return v.DefaultAreaGroup.UpdatedAt
}

// GetDeletedAt returns getAreaGroupsByTokenAreaGroupsByTokenAreaGroup.DeletedAt, and is useful for accessing the field via an interface.
func (v *getAreaGroupsByTokenAreaGroupsByTokenAreaGroup) GetDeletedAt() *string {
	return v.DefaultAreaGroup.DeletedAt
}

// GetToken returns getAreaGroupsByTokenAreaGroupsByTokenAreaGroup.Token, and is useful for accessing the field via an interface.
func (v *getAreaGroupsByTokenAreaGroupsByTokenAreaGroup) GetToken() string {
	return v.DefaultAreaGroup.Token
}

// GetName returns getAreaGroupsByTokenAreaGroupsByTokenAreaGroup.Name, and is useful for accessing the field via an interface.
func (v *getAreaGroupsByTokenAreaGroupsByTokenAreaGroup) GetName() *string {
	return v.DefaultAreaGroup.Name
}

// GetDescription returns getAreaGroupsByTokenAreaGroupsByTokenAreaGroup.Description, and is useful for accessing the field via an interface.
func (v *getAreaGroupsByTokenAreaGroupsByTokenAreaGroup) GetDescription() *string {
	return v.DefaultAreaGroup.Description
}

// GetImageUrl returns getAreaGroupsByTokenAreaGroupsByTokenAreaGroup.ImageUrl, and is useful for accessing the field via an interface.
func (v *getAreaGroupsByTokenAreaGroupsByTokenAreaGroup) GetImageUrl() *string {
	return v.DefaultAreaGroup.ImageUrl
}

// GetIcon returns getAreaGroupsByTokenAreaGroupsByTokenAreaGroup.Icon, and is useful for accessing the field via an interface.
func (v *getAreaGroupsByTokenAreaGroupsByTokenAreaGroup) GetIcon() *string {
	return v.DefaultAreaGroup.Icon
}

// GetBackgroundColor returns getAreaGroupsByTokenAreaGroupsByTokenAreaGroup.BackgroundColor, and is useful for accessing the field via an interface.
func (v *getAreaGroupsByTokenAreaGroupsByTokenAreaGroup) GetBackgroundColor() *string {
	return v.DefaultAreaGroup.BackgroundColor
}

// GetForegroundColor returns getAreaGroupsByTokenAreaGroupsByTokenAreaGroup.ForegroundColor, and is useful for accessing the field via an interface.
func (v *getAreaGroupsByTokenAreaGroupsByTokenAreaGroup) GetForegroundColor() *string {
	return v.DefaultAreaGroup.ForegroundColor
}

// GetBorderColor returns getAreaGroupsByTokenAreaGroupsByTokenAreaGroup.BorderColor, and is useful for accessing the field via an interface.
func (v *getAreaGroupsByTokenAreaGroupsByTokenAreaGroup) GetBorderColor() *string {
	return v.DefaultAreaGroup.BorderColor
}

// GetMetadata returns getAreaGroupsByTokenAreaGroupsByTokenAreaGroup.Metadata, and is useful for accessing the field via an interface.
func (v *getAreaGroupsByTokenAreaGroupsByTokenAreaGroup) GetMetadata() *string {
	return v.DefaultAreaGroup.Metadata
}

func (v *getAreaGroupsByTokenAreaGroupsByTokenAreaGroup) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAreaGroupsByTokenAreaGroupsByTokenAreaGroup
		graphql.NoUnmarshalJSON
	}
	firstPass.getAreaGroupsByTokenAreaGroupsByTokenAreaGroup = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaGroup)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetAreaGroupsByTokenAreaGroupsByTokenAreaGroup struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *getAreaGroupsByTokenAreaGroupsByTokenAreaGroup) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAreaGroupsByTokenAreaGroupsByTokenAreaGroup) __premarshalJSON() (*__premarshalgetAreaGroupsByTokenAreaGroupsByTokenAreaGroup, error) {
	var retval __premarshalgetAreaGroupsByTokenAreaGroupsByTokenAreaGroup

	retval.Id = v.DefaultAreaGroup.Id
	retval.CreatedAt = v.DefaultAreaGroup.CreatedAt
	retval.UpdatedAt = v.DefaultAreaGroup.UpdatedAt
	retval.DeletedAt = v.DefaultAreaGroup.DeletedAt
	retval.Token = v.DefaultAreaGroup.Token
	retval.Name = v.DefaultAreaGroup.Name
	retval.Description = v.DefaultAreaGroup.Description
	retval.ImageUrl = v.DefaultAreaGroup.ImageUrl
	retval.Icon = v.DefaultAreaGroup.Icon
	retval.BackgroundColor = v.DefaultAreaGroup.BackgroundColor
	retval.ForegroundColor = v.DefaultAreaGroup.ForegroundColor
	retval.BorderColor = v.DefaultAreaGroup.BorderColor
	retval.Metadata = v.DefaultAreaGroup.Metadata
	return &retval, nil
}

// getAreaGroupsByTokenResponse is returned by getAreaGroupsByToken on success.
type getAreaGroupsByTokenResponse struct {
	AreaGroupsByToken []getAreaGroupsByTokenAreaGroupsByTokenAreaGroup `json:"areaGroupsByToken"`
}

// GetAreaGroupsByToken returns getAreaGroupsByTokenResponse.AreaGroupsByToken, and is useful for accessing the field via an interface.
func (v *getAreaGroupsByTokenResponse) GetAreaGroupsByToken() []getAreaGroupsByTokenAreaGroupsByTokenAreaGroup {
	return v.AreaGroupsByToken
}

// getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType includes the requested fields of the GraphQL type AreaRelationshipType.
type getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType struct {
	DefaultAreaRelationshipType `json:"-"`
}

// GetId returns getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType) GetId() string {
	return v.DefaultAreaRelationshipType.Id
}

// GetCreatedAt returns getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType) GetCreatedAt() *string {
	return v.DefaultAreaRelationshipType.CreatedAt
}

// GetUpdatedAt returns getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType) GetUpdatedAt() *string {
	return v.DefaultAreaRelationshipType.UpdatedAt
}

// GetDeletedAt returns getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType) GetDeletedAt() *string {
	return v.DefaultAreaRelationshipType.DeletedAt
}

// GetToken returns getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType) GetToken() string {
	return v.DefaultAreaRelationshipType.Token
}

// GetName returns getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType) GetName() *string {
	return v.DefaultAreaRelationshipType.Name
}

// GetDescription returns getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType) GetDescription() *string {
	return v.DefaultAreaRelationshipType.Description
}

// GetMetadata returns getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType) GetMetadata() *string {
	return v.DefaultAreaRelationshipType.Metadata
}

func (v *getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType) __premarshalJSON() (*__premarshalgetAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType, error) {
	var retval __premarshalgetAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType

	retval.Id = v.DefaultAreaRelationshipType.Id
	retval.CreatedAt = v.DefaultAreaRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultAreaRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultAreaRelationshipType.DeletedAt
	retval.Token = v.DefaultAreaRelationshipType.Token
	retval.Name = v.DefaultAreaRelationshipType.Name
	retval.Description = v.DefaultAreaRelationshipType.Description
	retval.Metadata = v.DefaultAreaRelationshipType.Metadata
	return &retval, nil
}

// getAreaRelationshipTypesByTokenResponse is returned by getAreaRelationshipTypesByToken on success.
type getAreaRelationshipTypesByTokenResponse struct {
	AreaRelationshipTypesByToken []getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType `json:"areaRelationshipTypesByToken"`
}

// GetAreaRelationshipTypesByToken returns getAreaRelationshipTypesByTokenResponse.AreaRelationshipTypesByToken, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipTypesByTokenResponse) GetAreaRelationshipTypesByToken() []getAreaRelationshipTypesByTokenAreaRelationshipTypesByTokenAreaRelationshipType {
	return v.AreaRelationshipTypesByToken
}

// getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship includes the requested fields of the GraphQL type AreaRelationship.
type getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship struct {
	DefaultAreaRelationship `json:"-"`
}

// GetId returns getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship.Id, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship) GetId() string {
	return v.DefaultAreaRelationship.Id
}

// GetCreatedAt returns getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship) GetCreatedAt() *string {
	return v.DefaultAreaRelationship.CreatedAt
}

// GetUpdatedAt returns getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship) GetUpdatedAt() *string {
	return v.DefaultAreaRelationship.UpdatedAt
}

// GetDeletedAt returns getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship) GetDeletedAt() *string {
	return v.DefaultAreaRelationship.DeletedAt
}

// GetToken returns getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship.Token, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship) GetToken() string {
	return v.DefaultAreaRelationship.Token
}

// GetSourceArea returns getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship.SourceArea, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship) GetSourceArea() DefaultAreaRelationshipSourceArea {
	return v.DefaultAreaRelationship.SourceArea
}

// GetTargets returns getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship.Targets, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship) GetTargets() DefaultAreaRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultAreaRelationship.Targets
}

// GetRelationshipType returns getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship) GetRelationshipType() DefaultAreaRelationshipRelationshipTypeAreaRelationshipType {
	return v.DefaultAreaRelationship.RelationshipType
}

// GetMetadata returns getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship) GetMetadata() *string {
	return v.DefaultAreaRelationship.Metadata
}

func (v *getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceArea DefaultAreaRelationshipSourceArea `json:"sourceArea"`

	Targets DefaultAreaRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultAreaRelationshipRelationshipTypeAreaRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship) __premarshalJSON() (*__premarshalgetAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship, error) {
	var retval __premarshalgetAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship

	retval.Id = v.DefaultAreaRelationship.Id
	retval.CreatedAt = v.DefaultAreaRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultAreaRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultAreaRelationship.DeletedAt
	retval.Token = v.DefaultAreaRelationship.Token
	retval.SourceArea = v.DefaultAreaRelationship.SourceArea
	retval.Targets = v.DefaultAreaRelationship.Targets
	retval.RelationshipType = v.DefaultAreaRelationship.RelationshipType
	retval.Metadata = v.DefaultAreaRelationship.Metadata
	return &retval, nil
}

// getAreaRelationshipsByTokenResponse is returned by getAreaRelationshipsByToken on success.
type getAreaRelationshipsByTokenResponse struct {
	AreaRelationshipsByToken []getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship `json:"areaRelationshipsByToken"`
}

// GetAreaRelationshipsByToken returns getAreaRelationshipsByTokenResponse.AreaRelationshipsByToken, and is useful for accessing the field via an interface.
func (v *getAreaRelationshipsByTokenResponse) GetAreaRelationshipsByToken() []getAreaRelationshipsByTokenAreaRelationshipsByTokenAreaRelationship {
	return v.AreaRelationshipsByToken
}

// getAreaTypesByTokenAreaTypesByTokenAreaType includes the requested fields of the GraphQL type AreaType.
type getAreaTypesByTokenAreaTypesByTokenAreaType struct {
	DefaultAreaType `json:"-"`
}

// GetId returns getAreaTypesByTokenAreaTypesByTokenAreaType.Id, and is useful for accessing the field via an interface.
func (v *getAreaTypesByTokenAreaTypesByTokenAreaType) GetId() string { return v.DefaultAreaType.Id }

// GetCreatedAt returns getAreaTypesByTokenAreaTypesByTokenAreaType.CreatedAt, and is useful for accessing the field via an interface.
func (v *getAreaTypesByTokenAreaTypesByTokenAreaType) GetCreatedAt() *string {
	return v.DefaultAreaType.CreatedAt
}

// GetUpdatedAt returns getAreaTypesByTokenAreaTypesByTokenAreaType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getAreaTypesByTokenAreaTypesByTokenAreaType) GetUpdatedAt() *string {
	return v.DefaultAreaType.UpdatedAt
}

// GetDeletedAt returns getAreaTypesByTokenAreaTypesByTokenAreaType.DeletedAt, and is useful for accessing the field via an interface.
func (v *getAreaTypesByTokenAreaTypesByTokenAreaType) GetDeletedAt() *string {
	return v.DefaultAreaType.DeletedAt
}

// GetToken returns getAreaTypesByTokenAreaTypesByTokenAreaType.Token, and is useful for accessing the field via an interface.
func (v *getAreaTypesByTokenAreaTypesByTokenAreaType) GetToken() string {
	return v.DefaultAreaType.Token
}

// GetName returns getAreaTypesByTokenAreaTypesByTokenAreaType.Name, and is useful for accessing the field via an interface.
func (v *getAreaTypesByTokenAreaTypesByTokenAreaType) GetName() *string {
	return v.DefaultAreaType.Name
}

// GetDescription returns getAreaTypesByTokenAreaTypesByTokenAreaType.Description, and is useful for accessing the field via an interface.
func (v *getAreaTypesByTokenAreaTypesByTokenAreaType) GetDescription() *string {
	return v.DefaultAreaType.Description
}

// GetImageUrl returns getAreaTypesByTokenAreaTypesByTokenAreaType.ImageUrl, and is useful for accessing the field via an interface.
func (v *getAreaTypesByTokenAreaTypesByTokenAreaType) GetImageUrl() *string {
	return v.DefaultAreaType.ImageUrl
}

// GetIcon returns getAreaTypesByTokenAreaTypesByTokenAreaType.Icon, and is useful for accessing the field via an interface.
func (v *getAreaTypesByTokenAreaTypesByTokenAreaType) GetIcon() *string {
	return v.DefaultAreaType.Icon
}

// GetBackgroundColor returns getAreaTypesByTokenAreaTypesByTokenAreaType.BackgroundColor, and is useful for accessing the field via an interface.
func (v *getAreaTypesByTokenAreaTypesByTokenAreaType) GetBackgroundColor() *string {
	return v.DefaultAreaType.BackgroundColor
}

// GetForegroundColor returns getAreaTypesByTokenAreaTypesByTokenAreaType.ForegroundColor, and is useful for accessing the field via an interface.
func (v *getAreaTypesByTokenAreaTypesByTokenAreaType) GetForegroundColor() *string {
	return v.DefaultAreaType.ForegroundColor
}

// GetBorderColor returns getAreaTypesByTokenAreaTypesByTokenAreaType.BorderColor, and is useful for accessing the field via an interface.
func (v *getAreaTypesByTokenAreaTypesByTokenAreaType) GetBorderColor() *string {
	return v.DefaultAreaType.BorderColor
}

// GetMetadata returns getAreaTypesByTokenAreaTypesByTokenAreaType.Metadata, and is useful for accessing the field via an interface.
func (v *getAreaTypesByTokenAreaTypesByTokenAreaType) GetMetadata() *string {
	return v.DefaultAreaType.Metadata
}

func (v *getAreaTypesByTokenAreaTypesByTokenAreaType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAreaTypesByTokenAreaTypesByTokenAreaType
		graphql.NoUnmarshalJSON
	}
	firstPass.getAreaTypesByTokenAreaTypesByTokenAreaType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetAreaTypesByTokenAreaTypesByTokenAreaType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *getAreaTypesByTokenAreaTypesByTokenAreaType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAreaTypesByTokenAreaTypesByTokenAreaType) __premarshalJSON() (*__premarshalgetAreaTypesByTokenAreaTypesByTokenAreaType, error) {
	var retval __premarshalgetAreaTypesByTokenAreaTypesByTokenAreaType

	retval.Id = v.DefaultAreaType.Id
	retval.CreatedAt = v.DefaultAreaType.CreatedAt
	retval.UpdatedAt = v.DefaultAreaType.UpdatedAt
	retval.DeletedAt = v.DefaultAreaType.DeletedAt
	retval.Token = v.DefaultAreaType.Token
	retval.Name = v.DefaultAreaType.Name
	retval.Description = v.DefaultAreaType.Description
	retval.ImageUrl = v.DefaultAreaType.ImageUrl
	retval.Icon = v.DefaultAreaType.Icon
	retval.BackgroundColor = v.DefaultAreaType.BackgroundColor
	retval.ForegroundColor = v.DefaultAreaType.ForegroundColor
	retval.BorderColor = v.DefaultAreaType.BorderColor
	retval.Metadata = v.DefaultAreaType.Metadata
	return &retval, nil
}

// getAreaTypesByTokenResponse is returned by getAreaTypesByToken on success.
type getAreaTypesByTokenResponse struct {
	AreaTypesByToken []getAreaTypesByTokenAreaTypesByTokenAreaType `json:"areaTypesByToken"`
}

// GetAreaTypesByToken returns getAreaTypesByTokenResponse.AreaTypesByToken, and is useful for accessing the field via an interface.
func (v *getAreaTypesByTokenResponse) GetAreaTypesByToken() []getAreaTypesByTokenAreaTypesByTokenAreaType {
	return v.AreaTypesByToken
}

// getAreasByTokenAreasByTokenArea includes the requested fields of the GraphQL type Area.
type getAreasByTokenAreasByTokenArea struct {
	DefaultArea `json:"-"`
}

// GetId returns getAreasByTokenAreasByTokenArea.Id, and is useful for accessing the field via an interface.
func (v *getAreasByTokenAreasByTokenArea) GetId() string { return v.DefaultArea.Id }

// GetCreatedAt returns getAreasByTokenAreasByTokenArea.CreatedAt, and is useful for accessing the field via an interface.
func (v *getAreasByTokenAreasByTokenArea) GetCreatedAt() *string { return v.DefaultArea.CreatedAt }

// GetUpdatedAt returns getAreasByTokenAreasByTokenArea.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getAreasByTokenAreasByTokenArea) GetUpdatedAt() *string { return v.DefaultArea.UpdatedAt }

// GetDeletedAt returns getAreasByTokenAreasByTokenArea.DeletedAt, and is useful for accessing the field via an interface.
func (v *getAreasByTokenAreasByTokenArea) GetDeletedAt() *string { return v.DefaultArea.DeletedAt }

// GetToken returns getAreasByTokenAreasByTokenArea.Token, and is useful for accessing the field via an interface.
func (v *getAreasByTokenAreasByTokenArea) GetToken() string { return v.DefaultArea.Token }

// GetName returns getAreasByTokenAreasByTokenArea.Name, and is useful for accessing the field via an interface.
func (v *getAreasByTokenAreasByTokenArea) GetName() *string { return v.DefaultArea.Name }

// GetDescription returns getAreasByTokenAreasByTokenArea.Description, and is useful for accessing the field via an interface.
func (v *getAreasByTokenAreasByTokenArea) GetDescription() *string { return v.DefaultArea.Description }

// GetAreaType returns getAreasByTokenAreasByTokenArea.AreaType, and is useful for accessing the field via an interface.
func (v *getAreasByTokenAreasByTokenArea) GetAreaType() DefaultAreaAreaType {
	return v.DefaultArea.AreaType
}

// GetMetadata returns getAreasByTokenAreasByTokenArea.Metadata, and is useful for accessing the field via an interface.
func (v *getAreasByTokenAreasByTokenArea) GetMetadata() *string { return v.DefaultArea.Metadata }

func (v *getAreasByTokenAreasByTokenArea) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAreasByTokenAreasByTokenArea
		graphql.NoUnmarshalJSON
	}
	firstPass.getAreasByTokenAreasByTokenArea = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultArea)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetAreasByTokenAreasByTokenArea struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	AreaType DefaultAreaAreaType `json:"areaType"`

	Metadata *string `json:"metadata"`
}

func (v *getAreasByTokenAreasByTokenArea) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAreasByTokenAreasByTokenArea) __premarshalJSON() (*__premarshalgetAreasByTokenAreasByTokenArea, error) {
	var retval __premarshalgetAreasByTokenAreasByTokenArea

	retval.Id = v.DefaultArea.Id
	retval.CreatedAt = v.DefaultArea.CreatedAt
	retval.UpdatedAt = v.DefaultArea.UpdatedAt
	retval.DeletedAt = v.DefaultArea.DeletedAt
	retval.Token = v.DefaultArea.Token
	retval.Name = v.DefaultArea.Name
	retval.Description = v.DefaultArea.Description
	retval.AreaType = v.DefaultArea.AreaType
	retval.Metadata = v.DefaultArea.Metadata
	return &retval, nil
}

// getAreasByTokenResponse is returned by getAreasByToken on success.
type getAreasByTokenResponse struct {
	AreasByToken []getAreasByTokenAreasByTokenArea `json:"areasByToken"`
}

// GetAreasByToken returns getAreasByTokenResponse.AreasByToken, and is useful for accessing the field via an interface.
func (v *getAreasByTokenResponse) GetAreasByToken() []getAreasByTokenAreasByTokenArea {
	return v.AreasByToken
}

// getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType includes the requested fields of the GraphQL type AssetGroupRelationshipType.
type getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType struct {
	DefaultAssetGroupRelationshipType `json:"-"`
}

// GetId returns getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType) GetId() string {
	return v.DefaultAssetGroupRelationshipType.Id
}

// GetCreatedAt returns getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType) GetCreatedAt() *string {
	return v.DefaultAssetGroupRelationshipType.CreatedAt
}

// GetUpdatedAt returns getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType) GetUpdatedAt() *string {
	return v.DefaultAssetGroupRelationshipType.UpdatedAt
}

// GetDeletedAt returns getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType) GetDeletedAt() *string {
	return v.DefaultAssetGroupRelationshipType.DeletedAt
}

// GetToken returns getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType) GetToken() string {
	return v.DefaultAssetGroupRelationshipType.Token
}

// GetName returns getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType) GetName() *string {
	return v.DefaultAssetGroupRelationshipType.Name
}

// GetDescription returns getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType) GetDescription() *string {
	return v.DefaultAssetGroupRelationshipType.Description
}

// GetMetadata returns getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType) GetMetadata() *string {
	return v.DefaultAssetGroupRelationshipType.Metadata
}

func (v *getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetGroupRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType) __premarshalJSON() (*__premarshalgetAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType, error) {
	var retval __premarshalgetAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType

	retval.Id = v.DefaultAssetGroupRelationshipType.Id
	retval.CreatedAt = v.DefaultAssetGroupRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultAssetGroupRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultAssetGroupRelationshipType.DeletedAt
	retval.Token = v.DefaultAssetGroupRelationshipType.Token
	retval.Name = v.DefaultAssetGroupRelationshipType.Name
	retval.Description = v.DefaultAssetGroupRelationshipType.Description
	retval.Metadata = v.DefaultAssetGroupRelationshipType.Metadata
	return &retval, nil
}

// getAssetGroupRelationshipTypesByTokenResponse is returned by getAssetGroupRelationshipTypesByToken on success.
type getAssetGroupRelationshipTypesByTokenResponse struct {
	AssetGroupRelationshipTypesByToken []getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType `json:"assetGroupRelationshipTypesByToken"`
}

// GetAssetGroupRelationshipTypesByToken returns getAssetGroupRelationshipTypesByTokenResponse.AssetGroupRelationshipTypesByToken, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipTypesByTokenResponse) GetAssetGroupRelationshipTypesByToken() []getAssetGroupRelationshipTypesByTokenAssetGroupRelationshipTypesByTokenAssetGroupRelationshipType {
	return v.AssetGroupRelationshipTypesByToken
}

// getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship includes the requested fields of the GraphQL type AssetGroupRelationship.
type getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship struct {
	DefaultAssetGroupRelationship `json:"-"`
}

// GetId returns getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship.Id, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship) GetId() string {
	return v.DefaultAssetGroupRelationship.Id
}

// GetCreatedAt returns getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship) GetCreatedAt() *string {
	return v.DefaultAssetGroupRelationship.CreatedAt
}

// GetUpdatedAt returns getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship) GetUpdatedAt() *string {
	return v.DefaultAssetGroupRelationship.UpdatedAt
}

// GetDeletedAt returns getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship) GetDeletedAt() *string {
	return v.DefaultAssetGroupRelationship.DeletedAt
}

// GetToken returns getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship.Token, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship) GetToken() string {
	return v.DefaultAssetGroupRelationship.Token
}

// GetSourceAssetGroup returns getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship.SourceAssetGroup, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship) GetSourceAssetGroup() DefaultAssetGroupRelationshipSourceAssetGroup {
	return v.DefaultAssetGroupRelationship.SourceAssetGroup
}

// GetTargets returns getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship.Targets, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship) GetTargets() DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultAssetGroupRelationship.Targets
}

// GetRelationshipType returns getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship) GetRelationshipType() DefaultAssetGroupRelationshipRelationshipTypeAssetGroupRelationshipType {
	return v.DefaultAssetGroupRelationship.RelationshipType
}

// GetMetadata returns getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship) GetMetadata() *string {
	return v.DefaultAssetGroupRelationship.Metadata
}

func (v *getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetGroupRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceAssetGroup DefaultAssetGroupRelationshipSourceAssetGroup `json:"sourceAssetGroup"`

	Targets DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultAssetGroupRelationshipRelationshipTypeAssetGroupRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship) __premarshalJSON() (*__premarshalgetAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship, error) {
	var retval __premarshalgetAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship

	retval.Id = v.DefaultAssetGroupRelationship.Id
	retval.CreatedAt = v.DefaultAssetGroupRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultAssetGroupRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultAssetGroupRelationship.DeletedAt
	retval.Token = v.DefaultAssetGroupRelationship.Token
	retval.SourceAssetGroup = v.DefaultAssetGroupRelationship.SourceAssetGroup
	retval.Targets = v.DefaultAssetGroupRelationship.Targets
	retval.RelationshipType = v.DefaultAssetGroupRelationship.RelationshipType
	retval.Metadata = v.DefaultAssetGroupRelationship.Metadata
	return &retval, nil
}

// getAssetGroupRelationshipsByTokenResponse is returned by getAssetGroupRelationshipsByToken on success.
type getAssetGroupRelationshipsByTokenResponse struct {
	AssetGroupRelationshipsByToken []getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship `json:"assetGroupRelationshipsByToken"`
}

// GetAssetGroupRelationshipsByToken returns getAssetGroupRelationshipsByTokenResponse.AssetGroupRelationshipsByToken, and is useful for accessing the field via an interface.
func (v *getAssetGroupRelationshipsByTokenResponse) GetAssetGroupRelationshipsByToken() []getAssetGroupRelationshipsByTokenAssetGroupRelationshipsByTokenAssetGroupRelationship {
	return v.AssetGroupRelationshipsByToken
}

// getAssetGroupsByTokenAssetGroupsByTokenAssetGroup includes the requested fields of the GraphQL type AssetGroup.
type getAssetGroupsByTokenAssetGroupsByTokenAssetGroup struct {
	DefaultAssetGroup `json:"-"`
}

// GetId returns getAssetGroupsByTokenAssetGroupsByTokenAssetGroup.Id, and is useful for accessing the field via an interface.
func (v *getAssetGroupsByTokenAssetGroupsByTokenAssetGroup) GetId() string {
	return v.DefaultAssetGroup.Id
}

// GetCreatedAt returns getAssetGroupsByTokenAssetGroupsByTokenAssetGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *getAssetGroupsByTokenAssetGroupsByTokenAssetGroup) GetCreatedAt() *string {
	return v.DefaultAssetGroup.CreatedAt
}

// GetUpdatedAt returns getAssetGroupsByTokenAssetGroupsByTokenAssetGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getAssetGroupsByTokenAssetGroupsByTokenAssetGroup) GetUpdatedAt() *string {
	return v.DefaultAssetGroup.UpdatedAt
}

// GetDeletedAt returns getAssetGroupsByTokenAssetGroupsByTokenAssetGroup.DeletedAt, and is useful for accessing the field via an interface.
func (v *getAssetGroupsByTokenAssetGroupsByTokenAssetGroup) GetDeletedAt() *string {
	return v.DefaultAssetGroup.DeletedAt
}

// GetToken returns getAssetGroupsByTokenAssetGroupsByTokenAssetGroup.Token, and is useful for accessing the field via an interface.
func (v *getAssetGroupsByTokenAssetGroupsByTokenAssetGroup) GetToken() string {
	return v.DefaultAssetGroup.Token
}

// GetName returns getAssetGroupsByTokenAssetGroupsByTokenAssetGroup.Name, and is useful for accessing the field via an interface.
func (v *getAssetGroupsByTokenAssetGroupsByTokenAssetGroup) GetName() *string {
	return v.DefaultAssetGroup.Name
}

// GetDescription returns getAssetGroupsByTokenAssetGroupsByTokenAssetGroup.Description, and is useful for accessing the field via an interface.
func (v *getAssetGroupsByTokenAssetGroupsByTokenAssetGroup) GetDescription() *string {
	return v.DefaultAssetGroup.Description
}

// GetImageUrl returns getAssetGroupsByTokenAssetGroupsByTokenAssetGroup.ImageUrl, and is useful for accessing the field via an interface.
func (v *getAssetGroupsByTokenAssetGroupsByTokenAssetGroup) GetImageUrl() *string {
	return v.DefaultAssetGroup.ImageUrl
}

// GetIcon returns getAssetGroupsByTokenAssetGroupsByTokenAssetGroup.Icon, and is useful for accessing the field via an interface.
func (v *getAssetGroupsByTokenAssetGroupsByTokenAssetGroup) GetIcon() *string {
	return v.DefaultAssetGroup.Icon
}

// GetBackgroundColor returns getAssetGroupsByTokenAssetGroupsByTokenAssetGroup.BackgroundColor, and is useful for accessing the field via an interface.
func (v *getAssetGroupsByTokenAssetGroupsByTokenAssetGroup) GetBackgroundColor() *string {
	return v.DefaultAssetGroup.BackgroundColor
}

// GetForegroundColor returns getAssetGroupsByTokenAssetGroupsByTokenAssetGroup.ForegroundColor, and is useful for accessing the field via an interface.
func (v *getAssetGroupsByTokenAssetGroupsByTokenAssetGroup) GetForegroundColor() *string {
	return v.DefaultAssetGroup.ForegroundColor
}

// GetBorderColor returns getAssetGroupsByTokenAssetGroupsByTokenAssetGroup.BorderColor, and is useful for accessing the field via an interface.
func (v *getAssetGroupsByTokenAssetGroupsByTokenAssetGroup) GetBorderColor() *string {
	return v.DefaultAssetGroup.BorderColor
}

// GetMetadata returns getAssetGroupsByTokenAssetGroupsByTokenAssetGroup.Metadata, and is useful for accessing the field via an interface.
func (v *getAssetGroupsByTokenAssetGroupsByTokenAssetGroup) GetMetadata() *string {
	return v.DefaultAssetGroup.Metadata
}

func (v *getAssetGroupsByTokenAssetGroupsByTokenAssetGroup) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAssetGroupsByTokenAssetGroupsByTokenAssetGroup
		graphql.NoUnmarshalJSON
	}
	firstPass.getAssetGroupsByTokenAssetGroupsByTokenAssetGroup = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetGroup)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetAssetGroupsByTokenAssetGroupsByTokenAssetGroup struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *getAssetGroupsByTokenAssetGroupsByTokenAssetGroup) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAssetGroupsByTokenAssetGroupsByTokenAssetGroup) __premarshalJSON() (*__premarshalgetAssetGroupsByTokenAssetGroupsByTokenAssetGroup, error) {
	var retval __premarshalgetAssetGroupsByTokenAssetGroupsByTokenAssetGroup

	retval.Id = v.DefaultAssetGroup.Id
	retval.CreatedAt = v.DefaultAssetGroup.CreatedAt
	retval.UpdatedAt = v.DefaultAssetGroup.UpdatedAt
	retval.DeletedAt = v.DefaultAssetGroup.DeletedAt
	retval.Token = v.DefaultAssetGroup.Token
	retval.Name = v.DefaultAssetGroup.Name
	retval.Description = v.DefaultAssetGroup.Description
	retval.ImageUrl = v.DefaultAssetGroup.ImageUrl
	retval.Icon = v.DefaultAssetGroup.Icon
	retval.BackgroundColor = v.DefaultAssetGroup.BackgroundColor
	retval.ForegroundColor = v.DefaultAssetGroup.ForegroundColor
	retval.BorderColor = v.DefaultAssetGroup.BorderColor
	retval.Metadata = v.DefaultAssetGroup.Metadata
	return &retval, nil
}

// getAssetGroupsByTokenResponse is returned by getAssetGroupsByToken on success.
type getAssetGroupsByTokenResponse struct {
	AssetGroupsByToken []getAssetGroupsByTokenAssetGroupsByTokenAssetGroup `json:"assetGroupsByToken"`
}

// GetAssetGroupsByToken returns getAssetGroupsByTokenResponse.AssetGroupsByToken, and is useful for accessing the field via an interface.
func (v *getAssetGroupsByTokenResponse) GetAssetGroupsByToken() []getAssetGroupsByTokenAssetGroupsByTokenAssetGroup {
	return v.AssetGroupsByToken
}

// getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType includes the requested fields of the GraphQL type AssetRelationshipType.
type getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType struct {
	DefaultAssetRelationshipType `json:"-"`
}

// GetId returns getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType) GetId() string {
	return v.DefaultAssetRelationshipType.Id
}

// GetCreatedAt returns getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType) GetCreatedAt() *string {
	return v.DefaultAssetRelationshipType.CreatedAt
}

// GetUpdatedAt returns getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType) GetUpdatedAt() *string {
	return v.DefaultAssetRelationshipType.UpdatedAt
}

// GetDeletedAt returns getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType) GetDeletedAt() *string {
	return v.DefaultAssetRelationshipType.DeletedAt
}

// GetToken returns getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType) GetToken() string {
	return v.DefaultAssetRelationshipType.Token
}

// GetName returns getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType) GetName() *string {
	return v.DefaultAssetRelationshipType.Name
}

// GetDescription returns getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType) GetDescription() *string {
	return v.DefaultAssetRelationshipType.Description
}

// GetMetadata returns getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType) GetMetadata() *string {
	return v.DefaultAssetRelationshipType.Metadata
}

func (v *getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType) __premarshalJSON() (*__premarshalgetAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType, error) {
	var retval __premarshalgetAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType

	retval.Id = v.DefaultAssetRelationshipType.Id
	retval.CreatedAt = v.DefaultAssetRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultAssetRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultAssetRelationshipType.DeletedAt
	retval.Token = v.DefaultAssetRelationshipType.Token
	retval.Name = v.DefaultAssetRelationshipType.Name
	retval.Description = v.DefaultAssetRelationshipType.Description
	retval.Metadata = v.DefaultAssetRelationshipType.Metadata
	return &retval, nil
}

// getAssetRelationshipTypesByTokenResponse is returned by getAssetRelationshipTypesByToken on success.
type getAssetRelationshipTypesByTokenResponse struct {
	AssetRelationshipTypesByToken []getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType `json:"assetRelationshipTypesByToken"`
}

// GetAssetRelationshipTypesByToken returns getAssetRelationshipTypesByTokenResponse.AssetRelationshipTypesByToken, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipTypesByTokenResponse) GetAssetRelationshipTypesByToken() []getAssetRelationshipTypesByTokenAssetRelationshipTypesByTokenAssetRelationshipType {
	return v.AssetRelationshipTypesByToken
}

// getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship includes the requested fields of the GraphQL type AssetRelationship.
type getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship struct {
	DefaultAssetRelationship `json:"-"`
}

// GetId returns getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship.Id, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship) GetId() string {
	return v.DefaultAssetRelationship.Id
}

// GetCreatedAt returns getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship) GetCreatedAt() *string {
	return v.DefaultAssetRelationship.CreatedAt
}

// GetUpdatedAt returns getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship) GetUpdatedAt() *string {
	return v.DefaultAssetRelationship.UpdatedAt
}

// GetDeletedAt returns getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship) GetDeletedAt() *string {
	return v.DefaultAssetRelationship.DeletedAt
}

// GetToken returns getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship.Token, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship) GetToken() string {
	return v.DefaultAssetRelationship.Token
}

// GetSourceAsset returns getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship.SourceAsset, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship) GetSourceAsset() DefaultAssetRelationshipSourceAsset {
	return v.DefaultAssetRelationship.SourceAsset
}

// GetTargets returns getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship.Targets, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship) GetTargets() DefaultAssetRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultAssetRelationship.Targets
}

// GetRelationshipType returns getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship) GetRelationshipType() DefaultAssetRelationshipRelationshipTypeAssetRelationshipType {
	return v.DefaultAssetRelationship.RelationshipType
}

// GetMetadata returns getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship) GetMetadata() *string {
	return v.DefaultAssetRelationship.Metadata
}

func (v *getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceAsset DefaultAssetRelationshipSourceAsset `json:"sourceAsset"`

	Targets DefaultAssetRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultAssetRelationshipRelationshipTypeAssetRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship) __premarshalJSON() (*__premarshalgetAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship, error) {
	var retval __premarshalgetAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship

	retval.Id = v.DefaultAssetRelationship.Id
	retval.CreatedAt = v.DefaultAssetRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultAssetRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultAssetRelationship.DeletedAt
	retval.Token = v.DefaultAssetRelationship.Token
	retval.SourceAsset = v.DefaultAssetRelationship.SourceAsset
	retval.Targets = v.DefaultAssetRelationship.Targets
	retval.RelationshipType = v.DefaultAssetRelationship.RelationshipType
	retval.Metadata = v.DefaultAssetRelationship.Metadata
	return &retval, nil
}

// getAssetRelationshipsByTokenResponse is returned by getAssetRelationshipsByToken on success.
type getAssetRelationshipsByTokenResponse struct {
	AssetRelationshipsByToken []getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship `json:"assetRelationshipsByToken"`
}

// GetAssetRelationshipsByToken returns getAssetRelationshipsByTokenResponse.AssetRelationshipsByToken, and is useful for accessing the field via an interface.
func (v *getAssetRelationshipsByTokenResponse) GetAssetRelationshipsByToken() []getAssetRelationshipsByTokenAssetRelationshipsByTokenAssetRelationship {
	return v.AssetRelationshipsByToken
}

// getAssetTypesByTokenAssetTypesByTokenAssetType includes the requested fields of the GraphQL type AssetType.
type getAssetTypesByTokenAssetTypesByTokenAssetType struct {
	DefaultAssetType `json:"-"`
}

// GetId returns getAssetTypesByTokenAssetTypesByTokenAssetType.Id, and is useful for accessing the field via an interface.
func (v *getAssetTypesByTokenAssetTypesByTokenAssetType) GetId() string { return v.DefaultAssetType.Id }

// GetCreatedAt returns getAssetTypesByTokenAssetTypesByTokenAssetType.CreatedAt, and is useful for accessing the field via an interface.
func (v *getAssetTypesByTokenAssetTypesByTokenAssetType) GetCreatedAt() *string {
	return v.DefaultAssetType.CreatedAt
}

// GetUpdatedAt returns getAssetTypesByTokenAssetTypesByTokenAssetType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getAssetTypesByTokenAssetTypesByTokenAssetType) GetUpdatedAt() *string {
	return v.DefaultAssetType.UpdatedAt
}

// GetDeletedAt returns getAssetTypesByTokenAssetTypesByTokenAssetType.DeletedAt, and is useful for accessing the field via an interface.
func (v *getAssetTypesByTokenAssetTypesByTokenAssetType) GetDeletedAt() *string {
	return v.DefaultAssetType.DeletedAt
}

// GetToken returns getAssetTypesByTokenAssetTypesByTokenAssetType.Token, and is useful for accessing the field via an interface.
func (v *getAssetTypesByTokenAssetTypesByTokenAssetType) GetToken() string {
	return v.DefaultAssetType.Token
}

// GetName returns getAssetTypesByTokenAssetTypesByTokenAssetType.Name, and is useful for accessing the field via an interface.
func (v *getAssetTypesByTokenAssetTypesByTokenAssetType) GetName() *string {
	return v.DefaultAssetType.Name
}

// GetDescription returns getAssetTypesByTokenAssetTypesByTokenAssetType.Description, and is useful for accessing the field via an interface.
func (v *getAssetTypesByTokenAssetTypesByTokenAssetType) GetDescription() *string {
	return v.DefaultAssetType.Description
}

// GetImageUrl returns getAssetTypesByTokenAssetTypesByTokenAssetType.ImageUrl, and is useful for accessing the field via an interface.
func (v *getAssetTypesByTokenAssetTypesByTokenAssetType) GetImageUrl() *string {
	return v.DefaultAssetType.ImageUrl
}

// GetIcon returns getAssetTypesByTokenAssetTypesByTokenAssetType.Icon, and is useful for accessing the field via an interface.
func (v *getAssetTypesByTokenAssetTypesByTokenAssetType) GetIcon() *string {
	return v.DefaultAssetType.Icon
}

// GetBackgroundColor returns getAssetTypesByTokenAssetTypesByTokenAssetType.BackgroundColor, and is useful for accessing the field via an interface.
func (v *getAssetTypesByTokenAssetTypesByTokenAssetType) GetBackgroundColor() *string {
	return v.DefaultAssetType.BackgroundColor
}

// GetForegroundColor returns getAssetTypesByTokenAssetTypesByTokenAssetType.ForegroundColor, and is useful for accessing the field via an interface.
func (v *getAssetTypesByTokenAssetTypesByTokenAssetType) GetForegroundColor() *string {
	return v.DefaultAssetType.ForegroundColor
}

// GetBorderColor returns getAssetTypesByTokenAssetTypesByTokenAssetType.BorderColor, and is useful for accessing the field via an interface.
func (v *getAssetTypesByTokenAssetTypesByTokenAssetType) GetBorderColor() *string {
	return v.DefaultAssetType.BorderColor
}

// GetMetadata returns getAssetTypesByTokenAssetTypesByTokenAssetType.Metadata, and is useful for accessing the field via an interface.
func (v *getAssetTypesByTokenAssetTypesByTokenAssetType) GetMetadata() *string {
	return v.DefaultAssetType.Metadata
}

func (v *getAssetTypesByTokenAssetTypesByTokenAssetType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAssetTypesByTokenAssetTypesByTokenAssetType
		graphql.NoUnmarshalJSON
	}
	firstPass.getAssetTypesByTokenAssetTypesByTokenAssetType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetAssetTypesByTokenAssetTypesByTokenAssetType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *getAssetTypesByTokenAssetTypesByTokenAssetType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAssetTypesByTokenAssetTypesByTokenAssetType) __premarshalJSON() (*__premarshalgetAssetTypesByTokenAssetTypesByTokenAssetType, error) {
	var retval __premarshalgetAssetTypesByTokenAssetTypesByTokenAssetType

	retval.Id = v.DefaultAssetType.Id
	retval.CreatedAt = v.DefaultAssetType.CreatedAt
	retval.UpdatedAt = v.DefaultAssetType.UpdatedAt
	retval.DeletedAt = v.DefaultAssetType.DeletedAt
	retval.Token = v.DefaultAssetType.Token
	retval.Name = v.DefaultAssetType.Name
	retval.Description = v.DefaultAssetType.Description
	retval.ImageUrl = v.DefaultAssetType.ImageUrl
	retval.Icon = v.DefaultAssetType.Icon
	retval.BackgroundColor = v.DefaultAssetType.BackgroundColor
	retval.ForegroundColor = v.DefaultAssetType.ForegroundColor
	retval.BorderColor = v.DefaultAssetType.BorderColor
	retval.Metadata = v.DefaultAssetType.Metadata
	return &retval, nil
}

// getAssetTypesByTokenResponse is returned by getAssetTypesByToken on success.
type getAssetTypesByTokenResponse struct {
	AssetTypesByToken []getAssetTypesByTokenAssetTypesByTokenAssetType `json:"assetTypesByToken"`
}

// GetAssetTypesByToken returns getAssetTypesByTokenResponse.AssetTypesByToken, and is useful for accessing the field via an interface.
func (v *getAssetTypesByTokenResponse) GetAssetTypesByToken() []getAssetTypesByTokenAssetTypesByTokenAssetType {
	return v.AssetTypesByToken
}

// getAssetsByTokenAssetsByTokenAsset includes the requested fields of the GraphQL type Asset.
type getAssetsByTokenAssetsByTokenAsset struct {
	DefaultAsset `json:"-"`
}

// GetId returns getAssetsByTokenAssetsByTokenAsset.Id, and is useful for accessing the field via an interface.
func (v *getAssetsByTokenAssetsByTokenAsset) GetId() string { return v.DefaultAsset.Id }

// GetCreatedAt returns getAssetsByTokenAssetsByTokenAsset.CreatedAt, and is useful for accessing the field via an interface.
func (v *getAssetsByTokenAssetsByTokenAsset) GetCreatedAt() *string { return v.DefaultAsset.CreatedAt }

// GetUpdatedAt returns getAssetsByTokenAssetsByTokenAsset.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getAssetsByTokenAssetsByTokenAsset) GetUpdatedAt() *string { return v.DefaultAsset.UpdatedAt }

// GetDeletedAt returns getAssetsByTokenAssetsByTokenAsset.DeletedAt, and is useful for accessing the field via an interface.
func (v *getAssetsByTokenAssetsByTokenAsset) GetDeletedAt() *string { return v.DefaultAsset.DeletedAt }

// GetToken returns getAssetsByTokenAssetsByTokenAsset.Token, and is useful for accessing the field via an interface.
func (v *getAssetsByTokenAssetsByTokenAsset) GetToken() string { return v.DefaultAsset.Token }

// GetName returns getAssetsByTokenAssetsByTokenAsset.Name, and is useful for accessing the field via an interface.
func (v *getAssetsByTokenAssetsByTokenAsset) GetName() *string { return v.DefaultAsset.Name }

// GetDescription returns getAssetsByTokenAssetsByTokenAsset.Description, and is useful for accessing the field via an interface.
func (v *getAssetsByTokenAssetsByTokenAsset) GetDescription() *string {
	return v.DefaultAsset.Description
}

// GetAssetType returns getAssetsByTokenAssetsByTokenAsset.AssetType, and is useful for accessing the field via an interface.
func (v *getAssetsByTokenAssetsByTokenAsset) GetAssetType() DefaultAssetAssetType {
	return v.DefaultAsset.AssetType
}

// GetMetadata returns getAssetsByTokenAssetsByTokenAsset.Metadata, and is useful for accessing the field via an interface.
func (v *getAssetsByTokenAssetsByTokenAsset) GetMetadata() *string { return v.DefaultAsset.Metadata }

func (v *getAssetsByTokenAssetsByTokenAsset) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAssetsByTokenAssetsByTokenAsset
		graphql.NoUnmarshalJSON
	}
	firstPass.getAssetsByTokenAssetsByTokenAsset = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAsset)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetAssetsByTokenAssetsByTokenAsset struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	AssetType DefaultAssetAssetType `json:"assetType"`

	Metadata *string `json:"metadata"`
}

func (v *getAssetsByTokenAssetsByTokenAsset) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAssetsByTokenAssetsByTokenAsset) __premarshalJSON() (*__premarshalgetAssetsByTokenAssetsByTokenAsset, error) {
	var retval __premarshalgetAssetsByTokenAssetsByTokenAsset

	retval.Id = v.DefaultAsset.Id
	retval.CreatedAt = v.DefaultAsset.CreatedAt
	retval.UpdatedAt = v.DefaultAsset.UpdatedAt
	retval.DeletedAt = v.DefaultAsset.DeletedAt
	retval.Token = v.DefaultAsset.Token
	retval.Name = v.DefaultAsset.Name
	retval.Description = v.DefaultAsset.Description
	retval.AssetType = v.DefaultAsset.AssetType
	retval.Metadata = v.DefaultAsset.Metadata
	return &retval, nil
}

// getAssetsByTokenResponse is returned by getAssetsByToken on success.
type getAssetsByTokenResponse struct {
	AssetsByToken []getAssetsByTokenAssetsByTokenAsset `json:"assetsByToken"`
}

// GetAssetsByToken returns getAssetsByTokenResponse.AssetsByToken, and is useful for accessing the field via an interface.
func (v *getAssetsByTokenResponse) GetAssetsByToken() []getAssetsByTokenAssetsByTokenAsset {
	return v.AssetsByToken
}

// getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType includes the requested fields of the GraphQL type CustomerGroupRelationshipType.
type getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType struct {
	DefaultCustomerGroupRelationshipType `json:"-"`
}

// GetId returns getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType) GetId() string {
	return v.DefaultCustomerGroupRelationshipType.Id
}

// GetCreatedAt returns getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType) GetCreatedAt() *string {
	return v.DefaultCustomerGroupRelationshipType.CreatedAt
}

// GetUpdatedAt returns getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType) GetUpdatedAt() *string {
	return v.DefaultCustomerGroupRelationshipType.UpdatedAt
}

// GetDeletedAt returns getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType) GetDeletedAt() *string {
	return v.DefaultCustomerGroupRelationshipType.DeletedAt
}

// GetToken returns getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType) GetToken() string {
	return v.DefaultCustomerGroupRelationshipType.Token
}

// GetName returns getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType) GetName() *string {
	return v.DefaultCustomerGroupRelationshipType.Name
}

// GetDescription returns getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType) GetDescription() *string {
	return v.DefaultCustomerGroupRelationshipType.Description
}

// GetMetadata returns getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType) GetMetadata() *string {
	return v.DefaultCustomerGroupRelationshipType.Metadata
}

func (v *getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerGroupRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType) __premarshalJSON() (*__premarshalgetCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType, error) {
	var retval __premarshalgetCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType

	retval.Id = v.DefaultCustomerGroupRelationshipType.Id
	retval.CreatedAt = v.DefaultCustomerGroupRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerGroupRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerGroupRelationshipType.DeletedAt
	retval.Token = v.DefaultCustomerGroupRelationshipType.Token
	retval.Name = v.DefaultCustomerGroupRelationshipType.Name
	retval.Description = v.DefaultCustomerGroupRelationshipType.Description
	retval.Metadata = v.DefaultCustomerGroupRelationshipType.Metadata
	return &retval, nil
}

// getCustomerGroupRelationshipTypesByTokenResponse is returned by getCustomerGroupRelationshipTypesByToken on success.
type getCustomerGroupRelationshipTypesByTokenResponse struct {
	CustomerGroupRelationshipTypesByToken []getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType `json:"customerGroupRelationshipTypesByToken"`
}

// GetCustomerGroupRelationshipTypesByToken returns getCustomerGroupRelationshipTypesByTokenResponse.CustomerGroupRelationshipTypesByToken, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipTypesByTokenResponse) GetCustomerGroupRelationshipTypesByToken() []getCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipTypesByTokenCustomerGroupRelationshipType {
	return v.CustomerGroupRelationshipTypesByToken
}

// getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship includes the requested fields of the GraphQL type CustomerGroupRelationship.
type getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship struct {
	DefaultCustomerGroupRelationship `json:"-"`
}

// GetId returns getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship.Id, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship) GetId() string {
	return v.DefaultCustomerGroupRelationship.Id
}

// GetCreatedAt returns getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship) GetCreatedAt() *string {
	return v.DefaultCustomerGroupRelationship.CreatedAt
}

// GetUpdatedAt returns getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship) GetUpdatedAt() *string {
	return v.DefaultCustomerGroupRelationship.UpdatedAt
}

// GetDeletedAt returns getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship) GetDeletedAt() *string {
	return v.DefaultCustomerGroupRelationship.DeletedAt
}

// GetToken returns getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship.Token, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship) GetToken() string {
	return v.DefaultCustomerGroupRelationship.Token
}

// GetSourceCustomerGroup returns getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship.SourceCustomerGroup, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship) GetSourceCustomerGroup() DefaultCustomerGroupRelationshipSourceCustomerGroup {
	return v.DefaultCustomerGroupRelationship.SourceCustomerGroup
}

// GetTargets returns getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship.Targets, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship) GetTargets() DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultCustomerGroupRelationship.Targets
}

// GetRelationshipType returns getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship) GetRelationshipType() DefaultCustomerGroupRelationshipRelationshipTypeCustomerGroupRelationshipType {
	return v.DefaultCustomerGroupRelationship.RelationshipType
}

// GetMetadata returns getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship) GetMetadata() *string {
	return v.DefaultCustomerGroupRelationship.Metadata
}

func (v *getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerGroupRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceCustomerGroup DefaultCustomerGroupRelationshipSourceCustomerGroup `json:"sourceCustomerGroup"`

	Targets DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultCustomerGroupRelationshipRelationshipTypeCustomerGroupRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship) __premarshalJSON() (*__premarshalgetCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship, error) {
	var retval __premarshalgetCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship

	retval.Id = v.DefaultCustomerGroupRelationship.Id
	retval.CreatedAt = v.DefaultCustomerGroupRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerGroupRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerGroupRelationship.DeletedAt
	retval.Token = v.DefaultCustomerGroupRelationship.Token
	retval.SourceCustomerGroup = v.DefaultCustomerGroupRelationship.SourceCustomerGroup
	retval.Targets = v.DefaultCustomerGroupRelationship.Targets
	retval.RelationshipType = v.DefaultCustomerGroupRelationship.RelationshipType
	retval.Metadata = v.DefaultCustomerGroupRelationship.Metadata
	return &retval, nil
}

// getCustomerGroupRelationshipsByTokenResponse is returned by getCustomerGroupRelationshipsByToken on success.
type getCustomerGroupRelationshipsByTokenResponse struct {
	CustomerGroupRelationshipsByToken []getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship `json:"customerGroupRelationshipsByToken"`
}

// GetCustomerGroupRelationshipsByToken returns getCustomerGroupRelationshipsByTokenResponse.CustomerGroupRelationshipsByToken, and is useful for accessing the field via an interface.
func (v *getCustomerGroupRelationshipsByTokenResponse) GetCustomerGroupRelationshipsByToken() []getCustomerGroupRelationshipsByTokenCustomerGroupRelationshipsByTokenCustomerGroupRelationship {
	return v.CustomerGroupRelationshipsByToken
}

// getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup includes the requested fields of the GraphQL type CustomerGroup.
type getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup struct {
	DefaultCustomerGroup `json:"-"`
}

// GetId returns getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup.Id, and is useful for accessing the field via an interface.
func (v *getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup) GetId() string {
	return v.DefaultCustomerGroup.Id
}

// GetCreatedAt returns getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup) GetCreatedAt() *string {
	return v.DefaultCustomerGroup.CreatedAt
}

// GetUpdatedAt returns getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup) GetUpdatedAt() *string {
	return v.DefaultCustomerGroup.UpdatedAt
}

// GetDeletedAt returns getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup.DeletedAt, and is useful for accessing the field via an interface.
func (v *getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup) GetDeletedAt() *string {
	return v.DefaultCustomerGroup.DeletedAt
}

// GetToken returns getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup.Token, and is useful for accessing the field via an interface.
func (v *getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup) GetToken() string {
	return v.DefaultCustomerGroup.Token
}

// GetName returns getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup.Name, and is useful for accessing the field via an interface.
func (v *getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup) GetName() *string {
	return v.DefaultCustomerGroup.Name
}

// GetDescription returns getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup.Description, and is useful for accessing the field via an interface.
func (v *getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup) GetDescription() *string {
	return v.DefaultCustomerGroup.Description
}

// GetImageUrl returns getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup.ImageUrl, and is useful for accessing the field via an interface.
func (v *getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup) GetImageUrl() *string {
	return v.DefaultCustomerGroup.ImageUrl
}

// GetIcon returns getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup.Icon, and is useful for accessing the field via an interface.
func (v *getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup) GetIcon() *string {
	return v.DefaultCustomerGroup.Icon
}

// GetBackgroundColor returns getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup.BackgroundColor, and is useful for accessing the field via an interface.
func (v *getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup) GetBackgroundColor() *string {
	return v.DefaultCustomerGroup.BackgroundColor
}

// GetForegroundColor returns getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup.ForegroundColor, and is useful for accessing the field via an interface.
func (v *getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup) GetForegroundColor() *string {
	return v.DefaultCustomerGroup.ForegroundColor
}

// GetBorderColor returns getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup.BorderColor, and is useful for accessing the field via an interface.
func (v *getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup) GetBorderColor() *string {
	return v.DefaultCustomerGroup.BorderColor
}

// GetMetadata returns getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup.Metadata, and is useful for accessing the field via an interface.
func (v *getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup) GetMetadata() *string {
	return v.DefaultCustomerGroup.Metadata
}

func (v *getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup
		graphql.NoUnmarshalJSON
	}
	firstPass.getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerGroup)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup) __premarshalJSON() (*__premarshalgetCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup, error) {
	var retval __premarshalgetCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup

	retval.Id = v.DefaultCustomerGroup.Id
	retval.CreatedAt = v.DefaultCustomerGroup.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerGroup.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerGroup.DeletedAt
	retval.Token = v.DefaultCustomerGroup.Token
	retval.Name = v.DefaultCustomerGroup.Name
	retval.Description = v.DefaultCustomerGroup.Description
	retval.ImageUrl = v.DefaultCustomerGroup.ImageUrl
	retval.Icon = v.DefaultCustomerGroup.Icon
	retval.BackgroundColor = v.DefaultCustomerGroup.BackgroundColor
	retval.ForegroundColor = v.DefaultCustomerGroup.ForegroundColor
	retval.BorderColor = v.DefaultCustomerGroup.BorderColor
	retval.Metadata = v.DefaultCustomerGroup.Metadata
	return &retval, nil
}

// getCustomerGroupsByTokenResponse is returned by getCustomerGroupsByToken on success.
type getCustomerGroupsByTokenResponse struct {
	CustomerGroupsByToken []getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup `json:"customerGroupsByToken"`
}

// GetCustomerGroupsByToken returns getCustomerGroupsByTokenResponse.CustomerGroupsByToken, and is useful for accessing the field via an interface.
func (v *getCustomerGroupsByTokenResponse) GetCustomerGroupsByToken() []getCustomerGroupsByTokenCustomerGroupsByTokenCustomerGroup {
	return v.CustomerGroupsByToken
}

// getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType includes the requested fields of the GraphQL type CustomerRelationshipType.
type getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType struct {
	DefaultCustomerRelationshipType `json:"-"`
}

// GetId returns getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType) GetId() string {
	return v.DefaultCustomerRelationshipType.Id
}

// GetCreatedAt returns getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType) GetCreatedAt() *string {
	return v.DefaultCustomerRelationshipType.CreatedAt
}

// GetUpdatedAt returns getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType) GetUpdatedAt() *string {
	return v.DefaultCustomerRelationshipType.UpdatedAt
}

// GetDeletedAt returns getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType) GetDeletedAt() *string {
	return v.DefaultCustomerRelationshipType.DeletedAt
}

// GetToken returns getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType) GetToken() string {
	return v.DefaultCustomerRelationshipType.Token
}

// GetName returns getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType) GetName() *string {
	return v.DefaultCustomerRelationshipType.Name
}

// GetDescription returns getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType) GetDescription() *string {
	return v.DefaultCustomerRelationshipType.Description
}

// GetMetadata returns getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType) GetMetadata() *string {
	return v.DefaultCustomerRelationshipType.Metadata
}

func (v *getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType) __premarshalJSON() (*__premarshalgetCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType, error) {
	var retval __premarshalgetCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType

	retval.Id = v.DefaultCustomerRelationshipType.Id
	retval.CreatedAt = v.DefaultCustomerRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerRelationshipType.DeletedAt
	retval.Token = v.DefaultCustomerRelationshipType.Token
	retval.Name = v.DefaultCustomerRelationshipType.Name
	retval.Description = v.DefaultCustomerRelationshipType.Description
	retval.Metadata = v.DefaultCustomerRelationshipType.Metadata
	return &retval, nil
}

// getCustomerRelationshipTypesByTokenResponse is returned by getCustomerRelationshipTypesByToken on success.
type getCustomerRelationshipTypesByTokenResponse struct {
	CustomerRelationshipTypesByToken []getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType `json:"customerRelationshipTypesByToken"`
}

// GetCustomerRelationshipTypesByToken returns getCustomerRelationshipTypesByTokenResponse.CustomerRelationshipTypesByToken, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipTypesByTokenResponse) GetCustomerRelationshipTypesByToken() []getCustomerRelationshipTypesByTokenCustomerRelationshipTypesByTokenCustomerRelationshipType {
	return v.CustomerRelationshipTypesByToken
}

// getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship includes the requested fields of the GraphQL type CustomerRelationship.
type getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship struct {
	DefaultCustomerRelationship `json:"-"`
}

// GetId returns getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship.Id, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship) GetId() string {
	return v.DefaultCustomerRelationship.Id
}

// GetCreatedAt returns getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship) GetCreatedAt() *string {
	return v.DefaultCustomerRelationship.CreatedAt
}

// GetUpdatedAt returns getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship) GetUpdatedAt() *string {
	return v.DefaultCustomerRelationship.UpdatedAt
}

// GetDeletedAt returns getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship) GetDeletedAt() *string {
	return v.DefaultCustomerRelationship.DeletedAt
}

// GetToken returns getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship.Token, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship) GetToken() string {
	return v.DefaultCustomerRelationship.Token
}

// GetSourceCustomer returns getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship.SourceCustomer, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship) GetSourceCustomer() DefaultCustomerRelationshipSourceCustomer {
	return v.DefaultCustomerRelationship.SourceCustomer
}

// GetTargets returns getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship.Targets, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship) GetTargets() DefaultCustomerRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultCustomerRelationship.Targets
}

// GetRelationshipType returns getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship) GetRelationshipType() DefaultCustomerRelationshipRelationshipTypeCustomerRelationshipType {
	return v.DefaultCustomerRelationship.RelationshipType
}

// GetMetadata returns getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship) GetMetadata() *string {
	return v.DefaultCustomerRelationship.Metadata
}

func (v *getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceCustomer DefaultCustomerRelationshipSourceCustomer `json:"sourceCustomer"`

	Targets DefaultCustomerRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultCustomerRelationshipRelationshipTypeCustomerRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship) __premarshalJSON() (*__premarshalgetCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship, error) {
	var retval __premarshalgetCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship

	retval.Id = v.DefaultCustomerRelationship.Id
	retval.CreatedAt = v.DefaultCustomerRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerRelationship.DeletedAt
	retval.Token = v.DefaultCustomerRelationship.Token
	retval.SourceCustomer = v.DefaultCustomerRelationship.SourceCustomer
	retval.Targets = v.DefaultCustomerRelationship.Targets
	retval.RelationshipType = v.DefaultCustomerRelationship.RelationshipType
	retval.Metadata = v.DefaultCustomerRelationship.Metadata
	return &retval, nil
}

// getCustomerRelationshipsByTokenResponse is returned by getCustomerRelationshipsByToken on success.
type getCustomerRelationshipsByTokenResponse struct {
	CustomerRelationshipsByToken []getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship `json:"customerRelationshipsByToken"`
}

// GetCustomerRelationshipsByToken returns getCustomerRelationshipsByTokenResponse.CustomerRelationshipsByToken, and is useful for accessing the field via an interface.
func (v *getCustomerRelationshipsByTokenResponse) GetCustomerRelationshipsByToken() []getCustomerRelationshipsByTokenCustomerRelationshipsByTokenCustomerRelationship {
	return v.CustomerRelationshipsByToken
}

// getCustomerTypesByTokenCustomerTypesByTokenCustomerType includes the requested fields of the GraphQL type CustomerType.
type getCustomerTypesByTokenCustomerTypesByTokenCustomerType struct {
	DefaultCustomerType `json:"-"`
}

// GetId returns getCustomerTypesByTokenCustomerTypesByTokenCustomerType.Id, and is useful for accessing the field via an interface.
func (v *getCustomerTypesByTokenCustomerTypesByTokenCustomerType) GetId() string {
	return v.DefaultCustomerType.Id
}

// GetCreatedAt returns getCustomerTypesByTokenCustomerTypesByTokenCustomerType.CreatedAt, and is useful for accessing the field via an interface.
func (v *getCustomerTypesByTokenCustomerTypesByTokenCustomerType) GetCreatedAt() *string {
	return v.DefaultCustomerType.CreatedAt
}

// GetUpdatedAt returns getCustomerTypesByTokenCustomerTypesByTokenCustomerType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getCustomerTypesByTokenCustomerTypesByTokenCustomerType) GetUpdatedAt() *string {
	return v.DefaultCustomerType.UpdatedAt
}

// GetDeletedAt returns getCustomerTypesByTokenCustomerTypesByTokenCustomerType.DeletedAt, and is useful for accessing the field via an interface.
func (v *getCustomerTypesByTokenCustomerTypesByTokenCustomerType) GetDeletedAt() *string {
	return v.DefaultCustomerType.DeletedAt
}

// GetToken returns getCustomerTypesByTokenCustomerTypesByTokenCustomerType.Token, and is useful for accessing the field via an interface.
func (v *getCustomerTypesByTokenCustomerTypesByTokenCustomerType) GetToken() string {
	return v.DefaultCustomerType.Token
}

// GetName returns getCustomerTypesByTokenCustomerTypesByTokenCustomerType.Name, and is useful for accessing the field via an interface.
func (v *getCustomerTypesByTokenCustomerTypesByTokenCustomerType) GetName() *string {
	return v.DefaultCustomerType.Name
}

// GetDescription returns getCustomerTypesByTokenCustomerTypesByTokenCustomerType.Description, and is useful for accessing the field via an interface.
func (v *getCustomerTypesByTokenCustomerTypesByTokenCustomerType) GetDescription() *string {
	return v.DefaultCustomerType.Description
}

// GetImageUrl returns getCustomerTypesByTokenCustomerTypesByTokenCustomerType.ImageUrl, and is useful for accessing the field via an interface.
func (v *getCustomerTypesByTokenCustomerTypesByTokenCustomerType) GetImageUrl() *string {
	return v.DefaultCustomerType.ImageUrl
}

// GetIcon returns getCustomerTypesByTokenCustomerTypesByTokenCustomerType.Icon, and is useful for accessing the field via an interface.
func (v *getCustomerTypesByTokenCustomerTypesByTokenCustomerType) GetIcon() *string {
	return v.DefaultCustomerType.Icon
}

// GetBackgroundColor returns getCustomerTypesByTokenCustomerTypesByTokenCustomerType.BackgroundColor, and is useful for accessing the field via an interface.
func (v *getCustomerTypesByTokenCustomerTypesByTokenCustomerType) GetBackgroundColor() *string {
	return v.DefaultCustomerType.BackgroundColor
}

// GetForegroundColor returns getCustomerTypesByTokenCustomerTypesByTokenCustomerType.ForegroundColor, and is useful for accessing the field via an interface.
func (v *getCustomerTypesByTokenCustomerTypesByTokenCustomerType) GetForegroundColor() *string {
	return v.DefaultCustomerType.ForegroundColor
}

// GetBorderColor returns getCustomerTypesByTokenCustomerTypesByTokenCustomerType.BorderColor, and is useful for accessing the field via an interface.
func (v *getCustomerTypesByTokenCustomerTypesByTokenCustomerType) GetBorderColor() *string {
	return v.DefaultCustomerType.BorderColor
}

// GetMetadata returns getCustomerTypesByTokenCustomerTypesByTokenCustomerType.Metadata, and is useful for accessing the field via an interface.
func (v *getCustomerTypesByTokenCustomerTypesByTokenCustomerType) GetMetadata() *string {
	return v.DefaultCustomerType.Metadata
}

func (v *getCustomerTypesByTokenCustomerTypesByTokenCustomerType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getCustomerTypesByTokenCustomerTypesByTokenCustomerType
		graphql.NoUnmarshalJSON
	}
	firstPass.getCustomerTypesByTokenCustomerTypesByTokenCustomerType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetCustomerTypesByTokenCustomerTypesByTokenCustomerType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *getCustomerTypesByTokenCustomerTypesByTokenCustomerType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getCustomerTypesByTokenCustomerTypesByTokenCustomerType) __premarshalJSON() (*__premarshalgetCustomerTypesByTokenCustomerTypesByTokenCustomerType, error) {
	var retval __premarshalgetCustomerTypesByTokenCustomerTypesByTokenCustomerType

	retval.Id = v.DefaultCustomerType.Id
	retval.CreatedAt = v.DefaultCustomerType.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerType.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerType.DeletedAt
	retval.Token = v.DefaultCustomerType.Token
	retval.Name = v.DefaultCustomerType.Name
	retval.Description = v.DefaultCustomerType.Description
	retval.ImageUrl = v.DefaultCustomerType.ImageUrl
	retval.Icon = v.DefaultCustomerType.Icon
	retval.BackgroundColor = v.DefaultCustomerType.BackgroundColor
	retval.ForegroundColor = v.DefaultCustomerType.ForegroundColor
	retval.BorderColor = v.DefaultCustomerType.BorderColor
	retval.Metadata = v.DefaultCustomerType.Metadata
	return &retval, nil
}

// getCustomerTypesByTokenResponse is returned by getCustomerTypesByToken on success.
type getCustomerTypesByTokenResponse struct {
	CustomerTypesByToken []getCustomerTypesByTokenCustomerTypesByTokenCustomerType `json:"customerTypesByToken"`
}

// GetCustomerTypesByToken returns getCustomerTypesByTokenResponse.CustomerTypesByToken, and is useful for accessing the field via an interface.
func (v *getCustomerTypesByTokenResponse) GetCustomerTypesByToken() []getCustomerTypesByTokenCustomerTypesByTokenCustomerType {
	return v.CustomerTypesByToken
}

// getCustomersByTokenCustomersByTokenCustomer includes the requested fields of the GraphQL type Customer.
type getCustomersByTokenCustomersByTokenCustomer struct {
	DefaultCustomer `json:"-"`
}

// GetId returns getCustomersByTokenCustomersByTokenCustomer.Id, and is useful for accessing the field via an interface.
func (v *getCustomersByTokenCustomersByTokenCustomer) GetId() string { return v.DefaultCustomer.Id }

// GetCreatedAt returns getCustomersByTokenCustomersByTokenCustomer.CreatedAt, and is useful for accessing the field via an interface.
func (v *getCustomersByTokenCustomersByTokenCustomer) GetCreatedAt() *string {
	return v.DefaultCustomer.CreatedAt
}

// GetUpdatedAt returns getCustomersByTokenCustomersByTokenCustomer.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getCustomersByTokenCustomersByTokenCustomer) GetUpdatedAt() *string {
	return v.DefaultCustomer.UpdatedAt
}

// GetDeletedAt returns getCustomersByTokenCustomersByTokenCustomer.DeletedAt, and is useful for accessing the field via an interface.
func (v *getCustomersByTokenCustomersByTokenCustomer) GetDeletedAt() *string {
	return v.DefaultCustomer.DeletedAt
}

// GetToken returns getCustomersByTokenCustomersByTokenCustomer.Token, and is useful for accessing the field via an interface.
func (v *getCustomersByTokenCustomersByTokenCustomer) GetToken() string {
	return v.DefaultCustomer.Token
}

// GetName returns getCustomersByTokenCustomersByTokenCustomer.Name, and is useful for accessing the field via an interface.
func (v *getCustomersByTokenCustomersByTokenCustomer) GetName() *string {
	return v.DefaultCustomer.Name
}

// GetDescription returns getCustomersByTokenCustomersByTokenCustomer.Description, and is useful for accessing the field via an interface.
func (v *getCustomersByTokenCustomersByTokenCustomer) GetDescription() *string {
	return v.DefaultCustomer.Description
}

// GetCustomerType returns getCustomersByTokenCustomersByTokenCustomer.CustomerType, and is useful for accessing the field via an interface.
func (v *getCustomersByTokenCustomersByTokenCustomer) GetCustomerType() DefaultCustomerCustomerType {
	return v.DefaultCustomer.CustomerType
}

// GetMetadata returns getCustomersByTokenCustomersByTokenCustomer.Metadata, and is useful for accessing the field via an interface.
func (v *getCustomersByTokenCustomersByTokenCustomer) GetMetadata() *string {
	return v.DefaultCustomer.Metadata
}

func (v *getCustomersByTokenCustomersByTokenCustomer) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getCustomersByTokenCustomersByTokenCustomer
		graphql.NoUnmarshalJSON
	}
	firstPass.getCustomersByTokenCustomersByTokenCustomer = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomer)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetCustomersByTokenCustomersByTokenCustomer struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	CustomerType DefaultCustomerCustomerType `json:"customerType"`

	Metadata *string `json:"metadata"`
}

func (v *getCustomersByTokenCustomersByTokenCustomer) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getCustomersByTokenCustomersByTokenCustomer) __premarshalJSON() (*__premarshalgetCustomersByTokenCustomersByTokenCustomer, error) {
	var retval __premarshalgetCustomersByTokenCustomersByTokenCustomer

	retval.Id = v.DefaultCustomer.Id
	retval.CreatedAt = v.DefaultCustomer.CreatedAt
	retval.UpdatedAt = v.DefaultCustomer.UpdatedAt
	retval.DeletedAt = v.DefaultCustomer.DeletedAt
	retval.Token = v.DefaultCustomer.Token
	retval.Name = v.DefaultCustomer.Name
	retval.Description = v.DefaultCustomer.Description
	retval.CustomerType = v.DefaultCustomer.CustomerType
	retval.Metadata = v.DefaultCustomer.Metadata
	return &retval, nil
}

// getCustomersByTokenResponse is returned by getCustomersByToken on success.
type getCustomersByTokenResponse struct {
	CustomersByToken []getCustomersByTokenCustomersByTokenCustomer `json:"customersByToken"`
}

// GetCustomersByToken returns getCustomersByTokenResponse.CustomersByToken, and is useful for accessing the field via an interface.
func (v *getCustomersByTokenResponse) GetCustomersByToken() []getCustomersByTokenCustomersByTokenCustomer {
	return v.CustomersByToken
}

// getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType includes the requested fields of the GraphQL type DeviceGroupRelationshipType.
type getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType struct {
	DefaultDeviceGroupRelationshipType `json:"-"`
}

// GetId returns getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType) GetId() string {
	return v.DefaultDeviceGroupRelationshipType.Id
}

// GetCreatedAt returns getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType) GetCreatedAt() *string {
	return v.DefaultDeviceGroupRelationshipType.CreatedAt
}

// GetUpdatedAt returns getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType) GetUpdatedAt() *string {
	return v.DefaultDeviceGroupRelationshipType.UpdatedAt
}

// GetDeletedAt returns getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType) GetDeletedAt() *string {
	return v.DefaultDeviceGroupRelationshipType.DeletedAt
}

// GetToken returns getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType) GetToken() string {
	return v.DefaultDeviceGroupRelationshipType.Token
}

// GetName returns getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType) GetName() *string {
	return v.DefaultDeviceGroupRelationshipType.Name
}

// GetDescription returns getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType) GetDescription() *string {
	return v.DefaultDeviceGroupRelationshipType.Description
}

// GetMetadata returns getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType) GetMetadata() *string {
	return v.DefaultDeviceGroupRelationshipType.Metadata
}

func (v *getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceGroupRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType) __premarshalJSON() (*__premarshalgetDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType, error) {
	var retval __premarshalgetDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType

	retval.Id = v.DefaultDeviceGroupRelationshipType.Id
	retval.CreatedAt = v.DefaultDeviceGroupRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceGroupRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceGroupRelationshipType.DeletedAt
	retval.Token = v.DefaultDeviceGroupRelationshipType.Token
	retval.Name = v.DefaultDeviceGroupRelationshipType.Name
	retval.Description = v.DefaultDeviceGroupRelationshipType.Description
	retval.Metadata = v.DefaultDeviceGroupRelationshipType.Metadata
	return &retval, nil
}

// getDeviceGroupRelationshipTypesByTokenResponse is returned by getDeviceGroupRelationshipTypesByToken on success.
type getDeviceGroupRelationshipTypesByTokenResponse struct {
	DeviceGroupRelationshipTypesByToken []getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType `json:"deviceGroupRelationshipTypesByToken"`
}

// GetDeviceGroupRelationshipTypesByToken returns getDeviceGroupRelationshipTypesByTokenResponse.DeviceGroupRelationshipTypesByToken, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipTypesByTokenResponse) GetDeviceGroupRelationshipTypesByToken() []getDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipTypesByTokenDeviceGroupRelationshipType {
	return v.DeviceGroupRelationshipTypesByToken
}

// getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship includes the requested fields of the GraphQL type DeviceGroupRelationship.
type getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship struct {
	DefaultDeviceGroupRelationship `json:"-"`
}

// GetId returns getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship.Id, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship) GetId() string {
	return v.DefaultDeviceGroupRelationship.Id
}

// GetCreatedAt returns getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship) GetCreatedAt() *string {
	return v.DefaultDeviceGroupRelationship.CreatedAt
}

// GetUpdatedAt returns getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship) GetUpdatedAt() *string {
	return v.DefaultDeviceGroupRelationship.UpdatedAt
}

// GetDeletedAt returns getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship) GetDeletedAt() *string {
	return v.DefaultDeviceGroupRelationship.DeletedAt
}

// GetToken returns getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship.Token, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship) GetToken() string {
	return v.DefaultDeviceGroupRelationship.Token
}

// GetSourceDeviceGroup returns getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship.SourceDeviceGroup, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship) GetSourceDeviceGroup() DefaultDeviceGroupRelationshipSourceDeviceGroup {
	return v.DefaultDeviceGroupRelationship.SourceDeviceGroup
}

// GetTargets returns getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship.Targets, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship) GetTargets() DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultDeviceGroupRelationship.Targets
}

// GetRelationshipType returns getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship) GetRelationshipType() DefaultDeviceGroupRelationshipRelationshipTypeDeviceGroupRelationshipType {
	return v.DefaultDeviceGroupRelationship.RelationshipType
}

// GetMetadata returns getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship) GetMetadata() *string {
	return v.DefaultDeviceGroupRelationship.Metadata
}

func (v *getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceGroupRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceDeviceGroup DefaultDeviceGroupRelationshipSourceDeviceGroup `json:"sourceDeviceGroup"`

	Targets DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultDeviceGroupRelationshipRelationshipTypeDeviceGroupRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship) __premarshalJSON() (*__premarshalgetDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship, error) {
	var retval __premarshalgetDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship

	retval.Id = v.DefaultDeviceGroupRelationship.Id
	retval.CreatedAt = v.DefaultDeviceGroupRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceGroupRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceGroupRelationship.DeletedAt
	retval.Token = v.DefaultDeviceGroupRelationship.Token
	retval.SourceDeviceGroup = v.DefaultDeviceGroupRelationship.SourceDeviceGroup
	retval.Targets = v.DefaultDeviceGroupRelationship.Targets
	retval.RelationshipType = v.DefaultDeviceGroupRelationship.RelationshipType
	retval.Metadata = v.DefaultDeviceGroupRelationship.Metadata
	return &retval, nil
}

// getDeviceGroupRelationshipsByTokenResponse is returned by getDeviceGroupRelationshipsByToken on success.
type getDeviceGroupRelationshipsByTokenResponse struct {
	DeviceGroupRelationshipsByToken []getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship `json:"deviceGroupRelationshipsByToken"`
}

// GetDeviceGroupRelationshipsByToken returns getDeviceGroupRelationshipsByTokenResponse.DeviceGroupRelationshipsByToken, and is useful for accessing the field via an interface.
func (v *getDeviceGroupRelationshipsByTokenResponse) GetDeviceGroupRelationshipsByToken() []getDeviceGroupRelationshipsByTokenDeviceGroupRelationshipsByTokenDeviceGroupRelationship {
	return v.DeviceGroupRelationshipsByToken
}

// getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup includes the requested fields of the GraphQL type DeviceGroup.
type getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup struct {
	DefaultDeviceGroup `json:"-"`
}

// GetId returns getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup.Id, and is useful for accessing the field via an interface.
func (v *getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup) GetId() string {
	return v.DefaultDeviceGroup.Id
}

// GetCreatedAt returns getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup) GetCreatedAt() *string {
	return v.DefaultDeviceGroup.CreatedAt
}

// GetUpdatedAt returns getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup) GetUpdatedAt() *string {
	return v.DefaultDeviceGroup.UpdatedAt
}

// GetDeletedAt returns getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup.DeletedAt, and is useful for accessing the field via an interface.
func (v *getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup) GetDeletedAt() *string {
	return v.DefaultDeviceGroup.DeletedAt
}

// GetToken returns getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup.Token, and is useful for accessing the field via an interface.
func (v *getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup) GetToken() string {
	return v.DefaultDeviceGroup.Token
}

// GetName returns getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup.Name, and is useful for accessing the field via an interface.
func (v *getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup) GetName() *string {
	return v.DefaultDeviceGroup.Name
}

// GetDescription returns getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup.Description, and is useful for accessing the field via an interface.
func (v *getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup) GetDescription() *string {
	return v.DefaultDeviceGroup.Description
}

// GetImageUrl returns getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup.ImageUrl, and is useful for accessing the field via an interface.
func (v *getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup) GetImageUrl() *string {
	return v.DefaultDeviceGroup.ImageUrl
}

// GetIcon returns getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup.Icon, and is useful for accessing the field via an interface.
func (v *getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup) GetIcon() *string {
	return v.DefaultDeviceGroup.Icon
}

// GetBackgroundColor returns getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup.BackgroundColor, and is useful for accessing the field via an interface.
func (v *getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup) GetBackgroundColor() *string {
	return v.DefaultDeviceGroup.BackgroundColor
}

// GetForegroundColor returns getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup.ForegroundColor, and is useful for accessing the field via an interface.
func (v *getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup) GetForegroundColor() *string {
	return v.DefaultDeviceGroup.ForegroundColor
}

// GetBorderColor returns getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup.BorderColor, and is useful for accessing the field via an interface.
func (v *getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup) GetBorderColor() *string {
	return v.DefaultDeviceGroup.BorderColor
}

// GetMetadata returns getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup.Metadata, and is useful for accessing the field via an interface.
func (v *getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup) GetMetadata() *string {
	return v.DefaultDeviceGroup.Metadata
}

func (v *getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup
		graphql.NoUnmarshalJSON
	}
	firstPass.getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceGroup)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup) __premarshalJSON() (*__premarshalgetDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup, error) {
	var retval __premarshalgetDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup

	retval.Id = v.DefaultDeviceGroup.Id
	retval.CreatedAt = v.DefaultDeviceGroup.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceGroup.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceGroup.DeletedAt
	retval.Token = v.DefaultDeviceGroup.Token
	retval.Name = v.DefaultDeviceGroup.Name
	retval.Description = v.DefaultDeviceGroup.Description
	retval.ImageUrl = v.DefaultDeviceGroup.ImageUrl
	retval.Icon = v.DefaultDeviceGroup.Icon
	retval.BackgroundColor = v.DefaultDeviceGroup.BackgroundColor
	retval.ForegroundColor = v.DefaultDeviceGroup.ForegroundColor
	retval.BorderColor = v.DefaultDeviceGroup.BorderColor
	retval.Metadata = v.DefaultDeviceGroup.Metadata
	return &retval, nil
}

// getDeviceGroupsByTokenResponse is returned by getDeviceGroupsByToken on success.
type getDeviceGroupsByTokenResponse struct {
	DeviceGroupsByToken []getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup `json:"deviceGroupsByToken"`
}

// GetDeviceGroupsByToken returns getDeviceGroupsByTokenResponse.DeviceGroupsByToken, and is useful for accessing the field via an interface.
func (v *getDeviceGroupsByTokenResponse) GetDeviceGroupsByToken() []getDeviceGroupsByTokenDeviceGroupsByTokenDeviceGroup {
	return v.DeviceGroupsByToken
}

// getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType includes the requested fields of the GraphQL type DeviceRelationshipType.
type getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType struct {
	DefaultDeviceRelationshipType `json:"-"`
}

// GetId returns getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType) GetId() string {
	return v.DefaultDeviceRelationshipType.Id
}

// GetCreatedAt returns getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType) GetCreatedAt() *string {
	return v.DefaultDeviceRelationshipType.CreatedAt
}

// GetUpdatedAt returns getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType) GetUpdatedAt() *string {
	return v.DefaultDeviceRelationshipType.UpdatedAt
}

// GetDeletedAt returns getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType) GetDeletedAt() *string {
	return v.DefaultDeviceRelationshipType.DeletedAt
}

// GetToken returns getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType) GetToken() string {
	return v.DefaultDeviceRelationshipType.Token
}

// GetName returns getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType) GetName() *string {
	return v.DefaultDeviceRelationshipType.Name
}

// GetDescription returns getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType) GetDescription() *string {
	return v.DefaultDeviceRelationshipType.Description
}

// GetMetadata returns getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType) GetMetadata() *string {
	return v.DefaultDeviceRelationshipType.Metadata
}

// GetTracked returns getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType.Tracked, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType) GetTracked() bool {
	return v.DefaultDeviceRelationshipType.Tracked
}

func (v *getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`

	Tracked bool `json:"tracked"`
}

func (v *getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType) __premarshalJSON() (*__premarshalgetDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType, error) {
	var retval __premarshalgetDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType

	retval.Id = v.DefaultDeviceRelationshipType.Id
	retval.CreatedAt = v.DefaultDeviceRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceRelationshipType.DeletedAt
	retval.Token = v.DefaultDeviceRelationshipType.Token
	retval.Name = v.DefaultDeviceRelationshipType.Name
	retval.Description = v.DefaultDeviceRelationshipType.Description
	retval.Metadata = v.DefaultDeviceRelationshipType.Metadata
	retval.Tracked = v.DefaultDeviceRelationshipType.Tracked
	return &retval, nil
}

// getDeviceRelationshipTypesByTokenResponse is returned by getDeviceRelationshipTypesByToken on success.
type getDeviceRelationshipTypesByTokenResponse struct {
	DeviceRelationshipTypesByToken []getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType `json:"deviceRelationshipTypesByToken"`
}

// GetDeviceRelationshipTypesByToken returns getDeviceRelationshipTypesByTokenResponse.DeviceRelationshipTypesByToken, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipTypesByTokenResponse) GetDeviceRelationshipTypesByToken() []getDeviceRelationshipTypesByTokenDeviceRelationshipTypesByTokenDeviceRelationshipType {
	return v.DeviceRelationshipTypesByToken
}

// getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship includes the requested fields of the GraphQL type DeviceRelationship.
type getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship struct {
	DefaultDeviceRelationship `json:"-"`
}

// GetId returns getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship.Id, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship) GetId() string {
	return v.DefaultDeviceRelationship.Id
}

// GetCreatedAt returns getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship) GetCreatedAt() *string {
	return v.DefaultDeviceRelationship.CreatedAt
}

// GetUpdatedAt returns getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship) GetUpdatedAt() *string {
	return v.DefaultDeviceRelationship.UpdatedAt
}

// GetDeletedAt returns getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship) GetDeletedAt() *string {
	return v.DefaultDeviceRelationship.DeletedAt
}

// GetToken returns getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship.Token, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship) GetToken() string {
	return v.DefaultDeviceRelationship.Token
}

// GetSourceDevice returns getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship.SourceDevice, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship) GetSourceDevice() DefaultDeviceRelationshipSourceDevice {
	return v.DefaultDeviceRelationship.SourceDevice
}

// GetTargets returns getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship.Targets, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship) GetTargets() DefaultDeviceRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultDeviceRelationship.Targets
}

// GetRelationshipType returns getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship) GetRelationshipType() DefaultDeviceRelationshipRelationshipTypeDeviceRelationshipType {
	return v.DefaultDeviceRelationship.RelationshipType
}

// GetMetadata returns getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship) GetMetadata() *string {
	return v.DefaultDeviceRelationship.Metadata
}

func (v *getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceDevice DefaultDeviceRelationshipSourceDevice `json:"sourceDevice"`

	Targets DefaultDeviceRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultDeviceRelationshipRelationshipTypeDeviceRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship) __premarshalJSON() (*__premarshalgetDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship, error) {
	var retval __premarshalgetDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship

	retval.Id = v.DefaultDeviceRelationship.Id
	retval.CreatedAt = v.DefaultDeviceRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceRelationship.DeletedAt
	retval.Token = v.DefaultDeviceRelationship.Token
	retval.SourceDevice = v.DefaultDeviceRelationship.SourceDevice
	retval.Targets = v.DefaultDeviceRelationship.Targets
	retval.RelationshipType = v.DefaultDeviceRelationship.RelationshipType
	retval.Metadata = v.DefaultDeviceRelationship.Metadata
	return &retval, nil
}

// getDeviceRelationshipsByTokenResponse is returned by getDeviceRelationshipsByToken on success.
type getDeviceRelationshipsByTokenResponse struct {
	DeviceRelationshipsByToken []getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship `json:"deviceRelationshipsByToken"`
}

// GetDeviceRelationshipsByToken returns getDeviceRelationshipsByTokenResponse.DeviceRelationshipsByToken, and is useful for accessing the field via an interface.
func (v *getDeviceRelationshipsByTokenResponse) GetDeviceRelationshipsByToken() []getDeviceRelationshipsByTokenDeviceRelationshipsByTokenDeviceRelationship {
	return v.DeviceRelationshipsByToken
}

// getDeviceTypesByTokenDeviceTypesByTokenDeviceType includes the requested fields of the GraphQL type DeviceType.
type getDeviceTypesByTokenDeviceTypesByTokenDeviceType struct {
	DefaultDeviceType `json:"-"`
}

// GetId returns getDeviceTypesByTokenDeviceTypesByTokenDeviceType.Id, and is useful for accessing the field via an interface.
func (v *getDeviceTypesByTokenDeviceTypesByTokenDeviceType) GetId() string {
	return v.DefaultDeviceType.Id
}

// GetCreatedAt returns getDeviceTypesByTokenDeviceTypesByTokenDeviceType.CreatedAt, and is useful for accessing the field via an interface.
func (v *getDeviceTypesByTokenDeviceTypesByTokenDeviceType) GetCreatedAt() *string {
	return v.DefaultDeviceType.CreatedAt
}

// GetUpdatedAt returns getDeviceTypesByTokenDeviceTypesByTokenDeviceType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getDeviceTypesByTokenDeviceTypesByTokenDeviceType) GetUpdatedAt() *string {
	return v.DefaultDeviceType.UpdatedAt
}

// GetDeletedAt returns getDeviceTypesByTokenDeviceTypesByTokenDeviceType.DeletedAt, and is useful for accessing the field via an interface.
func (v *getDeviceTypesByTokenDeviceTypesByTokenDeviceType) GetDeletedAt() *string {
	return v.DefaultDeviceType.DeletedAt
}

// GetToken returns getDeviceTypesByTokenDeviceTypesByTokenDeviceType.Token, and is useful for accessing the field via an interface.
func (v *getDeviceTypesByTokenDeviceTypesByTokenDeviceType) GetToken() string {
	return v.DefaultDeviceType.Token
}

// GetName returns getDeviceTypesByTokenDeviceTypesByTokenDeviceType.Name, and is useful for accessing the field via an interface.
func (v *getDeviceTypesByTokenDeviceTypesByTokenDeviceType) GetName() *string {
	return v.DefaultDeviceType.Name
}

// GetDescription returns getDeviceTypesByTokenDeviceTypesByTokenDeviceType.Description, and is useful for accessing the field via an interface.
func (v *getDeviceTypesByTokenDeviceTypesByTokenDeviceType) GetDescription() *string {
	return v.DefaultDeviceType.Description
}

// GetImageUrl returns getDeviceTypesByTokenDeviceTypesByTokenDeviceType.ImageUrl, and is useful for accessing the field via an interface.
func (v *getDeviceTypesByTokenDeviceTypesByTokenDeviceType) GetImageUrl() *string {
	return v.DefaultDeviceType.ImageUrl
}

// GetIcon returns getDeviceTypesByTokenDeviceTypesByTokenDeviceType.Icon, and is useful for accessing the field via an interface.
func (v *getDeviceTypesByTokenDeviceTypesByTokenDeviceType) GetIcon() *string {
	return v.DefaultDeviceType.Icon
}

// GetBackgroundColor returns getDeviceTypesByTokenDeviceTypesByTokenDeviceType.BackgroundColor, and is useful for accessing the field via an interface.
func (v *getDeviceTypesByTokenDeviceTypesByTokenDeviceType) GetBackgroundColor() *string {
	return v.DefaultDeviceType.BackgroundColor
}

// GetForegroundColor returns getDeviceTypesByTokenDeviceTypesByTokenDeviceType.ForegroundColor, and is useful for accessing the field via an interface.
func (v *getDeviceTypesByTokenDeviceTypesByTokenDeviceType) GetForegroundColor() *string {
	return v.DefaultDeviceType.ForegroundColor
}

// GetBorderColor returns getDeviceTypesByTokenDeviceTypesByTokenDeviceType.BorderColor, and is useful for accessing the field via an interface.
func (v *getDeviceTypesByTokenDeviceTypesByTokenDeviceType) GetBorderColor() *string {
	return v.DefaultDeviceType.BorderColor
}

// GetMetadata returns getDeviceTypesByTokenDeviceTypesByTokenDeviceType.Metadata, and is useful for accessing the field via an interface.
func (v *getDeviceTypesByTokenDeviceTypesByTokenDeviceType) GetMetadata() *string {
	return v.DefaultDeviceType.Metadata
}

func (v *getDeviceTypesByTokenDeviceTypesByTokenDeviceType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getDeviceTypesByTokenDeviceTypesByTokenDeviceType
		graphql.NoUnmarshalJSON
	}
	firstPass.getDeviceTypesByTokenDeviceTypesByTokenDeviceType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetDeviceTypesByTokenDeviceTypesByTokenDeviceType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *getDeviceTypesByTokenDeviceTypesByTokenDeviceType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getDeviceTypesByTokenDeviceTypesByTokenDeviceType) __premarshalJSON() (*__premarshalgetDeviceTypesByTokenDeviceTypesByTokenDeviceType, error) {
	var retval __premarshalgetDeviceTypesByTokenDeviceTypesByTokenDeviceType

	retval.Id = v.DefaultDeviceType.Id
	retval.CreatedAt = v.DefaultDeviceType.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceType.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceType.DeletedAt
	retval.Token = v.DefaultDeviceType.Token
	retval.Name = v.DefaultDeviceType.Name
	retval.Description = v.DefaultDeviceType.Description
	retval.ImageUrl = v.DefaultDeviceType.ImageUrl
	retval.Icon = v.DefaultDeviceType.Icon
	retval.BackgroundColor = v.DefaultDeviceType.BackgroundColor
	retval.ForegroundColor = v.DefaultDeviceType.ForegroundColor
	retval.BorderColor = v.DefaultDeviceType.BorderColor
	retval.Metadata = v.DefaultDeviceType.Metadata
	return &retval, nil
}

// getDeviceTypesByTokenResponse is returned by getDeviceTypesByToken on success.
type getDeviceTypesByTokenResponse struct {
	DeviceTypesByToken []getDeviceTypesByTokenDeviceTypesByTokenDeviceType `json:"deviceTypesByToken"`
}

// GetDeviceTypesByToken returns getDeviceTypesByTokenResponse.DeviceTypesByToken, and is useful for accessing the field via an interface.
func (v *getDeviceTypesByTokenResponse) GetDeviceTypesByToken() []getDeviceTypesByTokenDeviceTypesByTokenDeviceType {
	return v.DeviceTypesByToken
}

// getDevicesByTokenDevicesByTokenDevice includes the requested fields of the GraphQL type Device.
type getDevicesByTokenDevicesByTokenDevice struct {
	DefaultDevice `json:"-"`
}

// GetId returns getDevicesByTokenDevicesByTokenDevice.Id, and is useful for accessing the field via an interface.
func (v *getDevicesByTokenDevicesByTokenDevice) GetId() string { return v.DefaultDevice.Id }

// GetCreatedAt returns getDevicesByTokenDevicesByTokenDevice.CreatedAt, and is useful for accessing the field via an interface.
func (v *getDevicesByTokenDevicesByTokenDevice) GetCreatedAt() *string {
	return v.DefaultDevice.CreatedAt
}

// GetUpdatedAt returns getDevicesByTokenDevicesByTokenDevice.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getDevicesByTokenDevicesByTokenDevice) GetUpdatedAt() *string {
	return v.DefaultDevice.UpdatedAt
}

// GetDeletedAt returns getDevicesByTokenDevicesByTokenDevice.DeletedAt, and is useful for accessing the field via an interface.
func (v *getDevicesByTokenDevicesByTokenDevice) GetDeletedAt() *string {
	return v.DefaultDevice.DeletedAt
}

// GetToken returns getDevicesByTokenDevicesByTokenDevice.Token, and is useful for accessing the field via an interface.
func (v *getDevicesByTokenDevicesByTokenDevice) GetToken() string { return v.DefaultDevice.Token }

// GetName returns getDevicesByTokenDevicesByTokenDevice.Name, and is useful for accessing the field via an interface.
func (v *getDevicesByTokenDevicesByTokenDevice) GetName() *string { return v.DefaultDevice.Name }

// GetDescription returns getDevicesByTokenDevicesByTokenDevice.Description, and is useful for accessing the field via an interface.
func (v *getDevicesByTokenDevicesByTokenDevice) GetDescription() *string {
	return v.DefaultDevice.Description
}

// GetDeviceType returns getDevicesByTokenDevicesByTokenDevice.DeviceType, and is useful for accessing the field via an interface.
func (v *getDevicesByTokenDevicesByTokenDevice) GetDeviceType() DefaultDeviceDeviceType {
	return v.DefaultDevice.DeviceType
}

// GetMetadata returns getDevicesByTokenDevicesByTokenDevice.Metadata, and is useful for accessing the field via an interface.
func (v *getDevicesByTokenDevicesByTokenDevice) GetMetadata() *string {
	return v.DefaultDevice.Metadata
}

func (v *getDevicesByTokenDevicesByTokenDevice) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getDevicesByTokenDevicesByTokenDevice
		graphql.NoUnmarshalJSON
	}
	firstPass.getDevicesByTokenDevicesByTokenDevice = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDevice)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetDevicesByTokenDevicesByTokenDevice struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	DeviceType DefaultDeviceDeviceType `json:"deviceType"`

	Metadata *string `json:"metadata"`
}

func (v *getDevicesByTokenDevicesByTokenDevice) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getDevicesByTokenDevicesByTokenDevice) __premarshalJSON() (*__premarshalgetDevicesByTokenDevicesByTokenDevice, error) {
	var retval __premarshalgetDevicesByTokenDevicesByTokenDevice

	retval.Id = v.DefaultDevice.Id
	retval.CreatedAt = v.DefaultDevice.CreatedAt
	retval.UpdatedAt = v.DefaultDevice.UpdatedAt
	retval.DeletedAt = v.DefaultDevice.DeletedAt
	retval.Token = v.DefaultDevice.Token
	retval.Name = v.DefaultDevice.Name
	retval.Description = v.DefaultDevice.Description
	retval.DeviceType = v.DefaultDevice.DeviceType
	retval.Metadata = v.DefaultDevice.Metadata
	return &retval, nil
}

// getDevicesByTokenResponse is returned by getDevicesByToken on success.
type getDevicesByTokenResponse struct {
	DevicesByToken []getDevicesByTokenDevicesByTokenDevice `json:"devicesByToken"`
}

// GetDevicesByToken returns getDevicesByTokenResponse.DevicesByToken, and is useful for accessing the field via an interface.
func (v *getDevicesByTokenResponse) GetDevicesByToken() []getDevicesByTokenDevicesByTokenDevice {
	return v.DevicesByToken
}

// listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResults includes the requested fields of the GraphQL type AreaGroupRelationshipTypeSearchResults.
type listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResults struct {
	Results    []listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType `json:"results"`
	Pagination listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination                         `json:"pagination"`
}

// GetResults returns listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResults) GetResults() []listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType {
	return v.Results
}

// GetPagination returns listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResults) GetPagination() listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination {
	return v.Pagination
}

// listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination) __premarshalJSON() (*__premarshallistAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination, error) {
	var retval __premarshallistAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType includes the requested fields of the GraphQL type AreaGroupRelationshipType.
type listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType struct {
	DefaultAreaGroupRelationshipType `json:"-"`
}

// GetId returns listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType) GetId() string {
	return v.DefaultAreaGroupRelationshipType.Id
}

// GetCreatedAt returns listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType) GetCreatedAt() *string {
	return v.DefaultAreaGroupRelationshipType.CreatedAt
}

// GetUpdatedAt returns listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType) GetUpdatedAt() *string {
	return v.DefaultAreaGroupRelationshipType.UpdatedAt
}

// GetDeletedAt returns listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType) GetDeletedAt() *string {
	return v.DefaultAreaGroupRelationshipType.DeletedAt
}

// GetToken returns listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType) GetToken() string {
	return v.DefaultAreaGroupRelationshipType.Token
}

// GetName returns listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType) GetName() *string {
	return v.DefaultAreaGroupRelationshipType.Name
}

// GetDescription returns listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType) GetDescription() *string {
	return v.DefaultAreaGroupRelationshipType.Description
}

// GetMetadata returns listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType) GetMetadata() *string {
	return v.DefaultAreaGroupRelationshipType.Metadata
}

func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaGroupRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType) __premarshalJSON() (*__premarshallistAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType, error) {
	var retval __premarshallistAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResultsResultsAreaGroupRelationshipType

	retval.Id = v.DefaultAreaGroupRelationshipType.Id
	retval.CreatedAt = v.DefaultAreaGroupRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultAreaGroupRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultAreaGroupRelationshipType.DeletedAt
	retval.Token = v.DefaultAreaGroupRelationshipType.Token
	retval.Name = v.DefaultAreaGroupRelationshipType.Name
	retval.Description = v.DefaultAreaGroupRelationshipType.Description
	retval.Metadata = v.DefaultAreaGroupRelationshipType.Metadata
	return &retval, nil
}

// listAreaGroupRelationshipTypesResponse is returned by listAreaGroupRelationshipTypes on success.
type listAreaGroupRelationshipTypesResponse struct {
	AreaGroupRelationshipTypes listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResults `json:"areaGroupRelationshipTypes"`
}

// GetAreaGroupRelationshipTypes returns listAreaGroupRelationshipTypesResponse.AreaGroupRelationshipTypes, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipTypesResponse) GetAreaGroupRelationshipTypes() listAreaGroupRelationshipTypesAreaGroupRelationshipTypesAreaGroupRelationshipTypeSearchResults {
	return v.AreaGroupRelationshipTypes
}

// listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResults includes the requested fields of the GraphQL type AreaGroupRelationshipSearchResults.
type listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResults struct {
	Results    []listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship `json:"results"`
	Pagination listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination                     `json:"pagination"`
}

// GetResults returns listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResults) GetResults() []listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship {
	return v.Results
}

// GetPagination returns listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResults) GetPagination() listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination {
	return v.Pagination
}

// listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination) __premarshalJSON() (*__premarshallistAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination, error) {
	var retval __premarshallistAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship includes the requested fields of the GraphQL type AreaGroupRelationship.
type listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship struct {
	DefaultAreaGroupRelationship `json:"-"`
}

// GetId returns listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship.Id, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship) GetId() string {
	return v.DefaultAreaGroupRelationship.Id
}

// GetCreatedAt returns listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship) GetCreatedAt() *string {
	return v.DefaultAreaGroupRelationship.CreatedAt
}

// GetUpdatedAt returns listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship) GetUpdatedAt() *string {
	return v.DefaultAreaGroupRelationship.UpdatedAt
}

// GetDeletedAt returns listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship) GetDeletedAt() *string {
	return v.DefaultAreaGroupRelationship.DeletedAt
}

// GetToken returns listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship.Token, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship) GetToken() string {
	return v.DefaultAreaGroupRelationship.Token
}

// GetSourceAreaGroup returns listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship.SourceAreaGroup, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship) GetSourceAreaGroup() DefaultAreaGroupRelationshipSourceAreaGroup {
	return v.DefaultAreaGroupRelationship.SourceAreaGroup
}

// GetTargets returns listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship.Targets, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship) GetTargets() DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultAreaGroupRelationship.Targets
}

// GetRelationshipType returns listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship) GetRelationshipType() DefaultAreaGroupRelationshipRelationshipTypeAreaGroupRelationshipType {
	return v.DefaultAreaGroupRelationship.RelationshipType
}

// GetMetadata returns listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship) GetMetadata() *string {
	return v.DefaultAreaGroupRelationship.Metadata
}

func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaGroupRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceAreaGroup DefaultAreaGroupRelationshipSourceAreaGroup `json:"sourceAreaGroup"`

	Targets DefaultAreaGroupRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultAreaGroupRelationshipRelationshipTypeAreaGroupRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship) __premarshalJSON() (*__premarshallistAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship, error) {
	var retval __premarshallistAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResultsResultsAreaGroupRelationship

	retval.Id = v.DefaultAreaGroupRelationship.Id
	retval.CreatedAt = v.DefaultAreaGroupRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultAreaGroupRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultAreaGroupRelationship.DeletedAt
	retval.Token = v.DefaultAreaGroupRelationship.Token
	retval.SourceAreaGroup = v.DefaultAreaGroupRelationship.SourceAreaGroup
	retval.Targets = v.DefaultAreaGroupRelationship.Targets
	retval.RelationshipType = v.DefaultAreaGroupRelationship.RelationshipType
	retval.Metadata = v.DefaultAreaGroupRelationship.Metadata
	return &retval, nil
}

// listAreaGroupRelationshipsResponse is returned by listAreaGroupRelationships on success.
type listAreaGroupRelationshipsResponse struct {
	AreaGroupRelationships listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResults `json:"areaGroupRelationships"`
}

// GetAreaGroupRelationships returns listAreaGroupRelationshipsResponse.AreaGroupRelationships, and is useful for accessing the field via an interface.
func (v *listAreaGroupRelationshipsResponse) GetAreaGroupRelationships() listAreaGroupRelationshipsAreaGroupRelationshipsAreaGroupRelationshipSearchResults {
	return v.AreaGroupRelationships
}

// listAreaGroupsAreaGroupsAreaGroupSearchResults includes the requested fields of the GraphQL type AreaGroupSearchResults.
type listAreaGroupsAreaGroupsAreaGroupSearchResults struct {
	Results    []listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup `json:"results"`
	Pagination listAreaGroupsAreaGroupsAreaGroupSearchResultsPagination         `json:"pagination"`
}

// GetResults returns listAreaGroupsAreaGroupsAreaGroupSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResults) GetResults() []listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup {
	return v.Results
}

// GetPagination returns listAreaGroupsAreaGroupsAreaGroupSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResults) GetPagination() listAreaGroupsAreaGroupsAreaGroupSearchResultsPagination {
	return v.Pagination
}

// listAreaGroupsAreaGroupsAreaGroupSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listAreaGroupsAreaGroupsAreaGroupSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listAreaGroupsAreaGroupsAreaGroupSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listAreaGroupsAreaGroupsAreaGroupSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listAreaGroupsAreaGroupsAreaGroupSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAreaGroupsAreaGroupsAreaGroupSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listAreaGroupsAreaGroupsAreaGroupSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAreaGroupsAreaGroupsAreaGroupSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsPagination) __premarshalJSON() (*__premarshallistAreaGroupsAreaGroupsAreaGroupSearchResultsPagination, error) {
	var retval __premarshallistAreaGroupsAreaGroupsAreaGroupSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup includes the requested fields of the GraphQL type AreaGroup.
type listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup struct {
	DefaultAreaGroup `json:"-"`
}

// GetId returns listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup.Id, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup) GetId() string {
	return v.DefaultAreaGroup.Id
}

// GetCreatedAt returns listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup) GetCreatedAt() *string {
	return v.DefaultAreaGroup.CreatedAt
}

// GetUpdatedAt returns listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup) GetUpdatedAt() *string {
	return v.DefaultAreaGroup.UpdatedAt
}

// GetDeletedAt returns listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup.DeletedAt, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup) GetDeletedAt() *string {
	return v.DefaultAreaGroup.DeletedAt
}

// GetToken returns listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup.Token, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup) GetToken() string {
	return v.DefaultAreaGroup.Token
}

// GetName returns listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup.Name, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup) GetName() *string {
	return v.DefaultAreaGroup.Name
}

// GetDescription returns listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup.Description, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup) GetDescription() *string {
	return v.DefaultAreaGroup.Description
}

// GetImageUrl returns listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup.ImageUrl, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup) GetImageUrl() *string {
	return v.DefaultAreaGroup.ImageUrl
}

// GetIcon returns listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup.Icon, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup) GetIcon() *string {
	return v.DefaultAreaGroup.Icon
}

// GetBackgroundColor returns listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup.BackgroundColor, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup) GetBackgroundColor() *string {
	return v.DefaultAreaGroup.BackgroundColor
}

// GetForegroundColor returns listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup.ForegroundColor, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup) GetForegroundColor() *string {
	return v.DefaultAreaGroup.ForegroundColor
}

// GetBorderColor returns listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup.BorderColor, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup) GetBorderColor() *string {
	return v.DefaultAreaGroup.BorderColor
}

// GetMetadata returns listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup.Metadata, and is useful for accessing the field via an interface.
func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup) GetMetadata() *string {
	return v.DefaultAreaGroup.Metadata
}

func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup
		graphql.NoUnmarshalJSON
	}
	firstPass.listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaGroup)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup) __premarshalJSON() (*__premarshallistAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup, error) {
	var retval __premarshallistAreaGroupsAreaGroupsAreaGroupSearchResultsResultsAreaGroup

	retval.Id = v.DefaultAreaGroup.Id
	retval.CreatedAt = v.DefaultAreaGroup.CreatedAt
	retval.UpdatedAt = v.DefaultAreaGroup.UpdatedAt
	retval.DeletedAt = v.DefaultAreaGroup.DeletedAt
	retval.Token = v.DefaultAreaGroup.Token
	retval.Name = v.DefaultAreaGroup.Name
	retval.Description = v.DefaultAreaGroup.Description
	retval.ImageUrl = v.DefaultAreaGroup.ImageUrl
	retval.Icon = v.DefaultAreaGroup.Icon
	retval.BackgroundColor = v.DefaultAreaGroup.BackgroundColor
	retval.ForegroundColor = v.DefaultAreaGroup.ForegroundColor
	retval.BorderColor = v.DefaultAreaGroup.BorderColor
	retval.Metadata = v.DefaultAreaGroup.Metadata
	return &retval, nil
}

// listAreaGroupsResponse is returned by listAreaGroups on success.
type listAreaGroupsResponse struct {
	AreaGroups listAreaGroupsAreaGroupsAreaGroupSearchResults `json:"areaGroups"`
}

// GetAreaGroups returns listAreaGroupsResponse.AreaGroups, and is useful for accessing the field via an interface.
func (v *listAreaGroupsResponse) GetAreaGroups() listAreaGroupsAreaGroupsAreaGroupSearchResults {
	return v.AreaGroups
}

// listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResults includes the requested fields of the GraphQL type AreaRelationshipTypeSearchResults.
type listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResults struct {
	Results    []listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType `json:"results"`
	Pagination listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination                    `json:"pagination"`
}

// GetResults returns listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResults) GetResults() []listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType {
	return v.Results
}

// GetPagination returns listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResults) GetPagination() listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination {
	return v.Pagination
}

// listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination) __premarshalJSON() (*__premarshallistAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination, error) {
	var retval __premarshallistAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType includes the requested fields of the GraphQL type AreaRelationshipType.
type listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType struct {
	DefaultAreaRelationshipType `json:"-"`
}

// GetId returns listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType) GetId() string {
	return v.DefaultAreaRelationshipType.Id
}

// GetCreatedAt returns listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType) GetCreatedAt() *string {
	return v.DefaultAreaRelationshipType.CreatedAt
}

// GetUpdatedAt returns listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType) GetUpdatedAt() *string {
	return v.DefaultAreaRelationshipType.UpdatedAt
}

// GetDeletedAt returns listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType) GetDeletedAt() *string {
	return v.DefaultAreaRelationshipType.DeletedAt
}

// GetToken returns listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType) GetToken() string {
	return v.DefaultAreaRelationshipType.Token
}

// GetName returns listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType) GetName() *string {
	return v.DefaultAreaRelationshipType.Name
}

// GetDescription returns listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType) GetDescription() *string {
	return v.DefaultAreaRelationshipType.Description
}

// GetMetadata returns listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType) GetMetadata() *string {
	return v.DefaultAreaRelationshipType.Metadata
}

func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType) __premarshalJSON() (*__premarshallistAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType, error) {
	var retval __premarshallistAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResultsResultsAreaRelationshipType

	retval.Id = v.DefaultAreaRelationshipType.Id
	retval.CreatedAt = v.DefaultAreaRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultAreaRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultAreaRelationshipType.DeletedAt
	retval.Token = v.DefaultAreaRelationshipType.Token
	retval.Name = v.DefaultAreaRelationshipType.Name
	retval.Description = v.DefaultAreaRelationshipType.Description
	retval.Metadata = v.DefaultAreaRelationshipType.Metadata
	return &retval, nil
}

// listAreaRelationshipTypesResponse is returned by listAreaRelationshipTypes on success.
type listAreaRelationshipTypesResponse struct {
	AreaRelationshipTypes listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResults `json:"areaRelationshipTypes"`
}

// GetAreaRelationshipTypes returns listAreaRelationshipTypesResponse.AreaRelationshipTypes, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipTypesResponse) GetAreaRelationshipTypes() listAreaRelationshipTypesAreaRelationshipTypesAreaRelationshipTypeSearchResults {
	return v.AreaRelationshipTypes
}

// listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResults includes the requested fields of the GraphQL type AreaRelationshipSearchResults.
type listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResults struct {
	Results    []listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship `json:"results"`
	Pagination listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination                `json:"pagination"`
}

// GetResults returns listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResults) GetResults() []listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship {
	return v.Results
}

// GetPagination returns listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResults) GetPagination() listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination {
	return v.Pagination
}

// listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination) __premarshalJSON() (*__premarshallistAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination, error) {
	var retval __premarshallistAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship includes the requested fields of the GraphQL type AreaRelationship.
type listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship struct {
	DefaultAreaRelationship `json:"-"`
}

// GetId returns listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship.Id, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship) GetId() string {
	return v.DefaultAreaRelationship.Id
}

// GetCreatedAt returns listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship) GetCreatedAt() *string {
	return v.DefaultAreaRelationship.CreatedAt
}

// GetUpdatedAt returns listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship) GetUpdatedAt() *string {
	return v.DefaultAreaRelationship.UpdatedAt
}

// GetDeletedAt returns listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship) GetDeletedAt() *string {
	return v.DefaultAreaRelationship.DeletedAt
}

// GetToken returns listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship.Token, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship) GetToken() string {
	return v.DefaultAreaRelationship.Token
}

// GetSourceArea returns listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship.SourceArea, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship) GetSourceArea() DefaultAreaRelationshipSourceArea {
	return v.DefaultAreaRelationship.SourceArea
}

// GetTargets returns listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship.Targets, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship) GetTargets() DefaultAreaRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultAreaRelationship.Targets
}

// GetRelationshipType returns listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship) GetRelationshipType() DefaultAreaRelationshipRelationshipTypeAreaRelationshipType {
	return v.DefaultAreaRelationship.RelationshipType
}

// GetMetadata returns listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship) GetMetadata() *string {
	return v.DefaultAreaRelationship.Metadata
}

func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceArea DefaultAreaRelationshipSourceArea `json:"sourceArea"`

	Targets DefaultAreaRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultAreaRelationshipRelationshipTypeAreaRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship) __premarshalJSON() (*__premarshallistAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship, error) {
	var retval __premarshallistAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResultsResultsAreaRelationship

	retval.Id = v.DefaultAreaRelationship.Id
	retval.CreatedAt = v.DefaultAreaRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultAreaRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultAreaRelationship.DeletedAt
	retval.Token = v.DefaultAreaRelationship.Token
	retval.SourceArea = v.DefaultAreaRelationship.SourceArea
	retval.Targets = v.DefaultAreaRelationship.Targets
	retval.RelationshipType = v.DefaultAreaRelationship.RelationshipType
	retval.Metadata = v.DefaultAreaRelationship.Metadata
	return &retval, nil
}

// listAreaRelationshipsResponse is returned by listAreaRelationships on success.
type listAreaRelationshipsResponse struct {
	AreaRelationships listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResults `json:"areaRelationships"`
}

// GetAreaRelationships returns listAreaRelationshipsResponse.AreaRelationships, and is useful for accessing the field via an interface.
func (v *listAreaRelationshipsResponse) GetAreaRelationships() listAreaRelationshipsAreaRelationshipsAreaRelationshipSearchResults {
	return v.AreaRelationships
}

// listAreaTypesAreaTypesAreaTypeSearchResults includes the requested fields of the GraphQL type AreaTypeSearchResults.
type listAreaTypesAreaTypesAreaTypeSearchResults struct {
	Results    []listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType `json:"results"`
	Pagination listAreaTypesAreaTypesAreaTypeSearchResultsPagination        `json:"pagination"`
}

// GetResults returns listAreaTypesAreaTypesAreaTypeSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResults) GetResults() []listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType {
	return v.Results
}

// GetPagination returns listAreaTypesAreaTypesAreaTypeSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResults) GetPagination() listAreaTypesAreaTypesAreaTypeSearchResultsPagination {
	return v.Pagination
}

// listAreaTypesAreaTypesAreaTypeSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listAreaTypesAreaTypesAreaTypeSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listAreaTypesAreaTypesAreaTypeSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listAreaTypesAreaTypesAreaTypeSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listAreaTypesAreaTypesAreaTypeSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listAreaTypesAreaTypesAreaTypeSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAreaTypesAreaTypesAreaTypeSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listAreaTypesAreaTypesAreaTypeSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAreaTypesAreaTypesAreaTypeSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listAreaTypesAreaTypesAreaTypeSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAreaTypesAreaTypesAreaTypeSearchResultsPagination) __premarshalJSON() (*__premarshallistAreaTypesAreaTypesAreaTypeSearchResultsPagination, error) {
	var retval __premarshallistAreaTypesAreaTypesAreaTypeSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType includes the requested fields of the GraphQL type AreaType.
type listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType struct {
	DefaultAreaType `json:"-"`
}

// GetId returns listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType.Id, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType) GetId() string {
	return v.DefaultAreaType.Id
}

// GetCreatedAt returns listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType.CreatedAt, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType) GetCreatedAt() *string {
	return v.DefaultAreaType.CreatedAt
}

// GetUpdatedAt returns listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType) GetUpdatedAt() *string {
	return v.DefaultAreaType.UpdatedAt
}

// GetDeletedAt returns listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType.DeletedAt, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType) GetDeletedAt() *string {
	return v.DefaultAreaType.DeletedAt
}

// GetToken returns listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType.Token, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType) GetToken() string {
	return v.DefaultAreaType.Token
}

// GetName returns listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType.Name, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType) GetName() *string {
	return v.DefaultAreaType.Name
}

// GetDescription returns listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType.Description, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType) GetDescription() *string {
	return v.DefaultAreaType.Description
}

// GetImageUrl returns listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType.ImageUrl, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType) GetImageUrl() *string {
	return v.DefaultAreaType.ImageUrl
}

// GetIcon returns listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType.Icon, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType) GetIcon() *string {
	return v.DefaultAreaType.Icon
}

// GetBackgroundColor returns listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType.BackgroundColor, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType) GetBackgroundColor() *string {
	return v.DefaultAreaType.BackgroundColor
}

// GetForegroundColor returns listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType.ForegroundColor, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType) GetForegroundColor() *string {
	return v.DefaultAreaType.ForegroundColor
}

// GetBorderColor returns listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType.BorderColor, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType) GetBorderColor() *string {
	return v.DefaultAreaType.BorderColor
}

// GetMetadata returns listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType.Metadata, and is useful for accessing the field via an interface.
func (v *listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType) GetMetadata() *string {
	return v.DefaultAreaType.Metadata
}

func (v *listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType
		graphql.NoUnmarshalJSON
	}
	firstPass.listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAreaType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType) __premarshalJSON() (*__premarshallistAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType, error) {
	var retval __premarshallistAreaTypesAreaTypesAreaTypeSearchResultsResultsAreaType

	retval.Id = v.DefaultAreaType.Id
	retval.CreatedAt = v.DefaultAreaType.CreatedAt
	retval.UpdatedAt = v.DefaultAreaType.UpdatedAt
	retval.DeletedAt = v.DefaultAreaType.DeletedAt
	retval.Token = v.DefaultAreaType.Token
	retval.Name = v.DefaultAreaType.Name
	retval.Description = v.DefaultAreaType.Description
	retval.ImageUrl = v.DefaultAreaType.ImageUrl
	retval.Icon = v.DefaultAreaType.Icon
	retval.BackgroundColor = v.DefaultAreaType.BackgroundColor
	retval.ForegroundColor = v.DefaultAreaType.ForegroundColor
	retval.BorderColor = v.DefaultAreaType.BorderColor
	retval.Metadata = v.DefaultAreaType.Metadata
	return &retval, nil
}

// listAreaTypesResponse is returned by listAreaTypes on success.
type listAreaTypesResponse struct {
	AreaTypes listAreaTypesAreaTypesAreaTypeSearchResults `json:"areaTypes"`
}

// GetAreaTypes returns listAreaTypesResponse.AreaTypes, and is useful for accessing the field via an interface.
func (v *listAreaTypesResponse) GetAreaTypes() listAreaTypesAreaTypesAreaTypeSearchResults {
	return v.AreaTypes
}

// listAreasAreasAreaSearchResults includes the requested fields of the GraphQL type AreaSearchResults.
type listAreasAreasAreaSearchResults struct {
	Results    []listAreasAreasAreaSearchResultsResultsArea `json:"results"`
	Pagination listAreasAreasAreaSearchResultsPagination    `json:"pagination"`
}

// GetResults returns listAreasAreasAreaSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listAreasAreasAreaSearchResults) GetResults() []listAreasAreasAreaSearchResultsResultsArea {
	return v.Results
}

// GetPagination returns listAreasAreasAreaSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listAreasAreasAreaSearchResults) GetPagination() listAreasAreasAreaSearchResultsPagination {
	return v.Pagination
}

// listAreasAreasAreaSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listAreasAreasAreaSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listAreasAreasAreaSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listAreasAreasAreaSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listAreasAreasAreaSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listAreasAreasAreaSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listAreasAreasAreaSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listAreasAreasAreaSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listAreasAreasAreaSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAreasAreasAreaSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listAreasAreasAreaSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAreasAreasAreaSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listAreasAreasAreaSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAreasAreasAreaSearchResultsPagination) __premarshalJSON() (*__premarshallistAreasAreasAreaSearchResultsPagination, error) {
	var retval __premarshallistAreasAreasAreaSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listAreasAreasAreaSearchResultsResultsArea includes the requested fields of the GraphQL type Area.
type listAreasAreasAreaSearchResultsResultsArea struct {
	DefaultArea `json:"-"`
}

// GetId returns listAreasAreasAreaSearchResultsResultsArea.Id, and is useful for accessing the field via an interface.
func (v *listAreasAreasAreaSearchResultsResultsArea) GetId() string { return v.DefaultArea.Id }

// GetCreatedAt returns listAreasAreasAreaSearchResultsResultsArea.CreatedAt, and is useful for accessing the field via an interface.
func (v *listAreasAreasAreaSearchResultsResultsArea) GetCreatedAt() *string {
	return v.DefaultArea.CreatedAt
}

// GetUpdatedAt returns listAreasAreasAreaSearchResultsResultsArea.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listAreasAreasAreaSearchResultsResultsArea) GetUpdatedAt() *string {
	return v.DefaultArea.UpdatedAt
}

// GetDeletedAt returns listAreasAreasAreaSearchResultsResultsArea.DeletedAt, and is useful for accessing the field via an interface.
func (v *listAreasAreasAreaSearchResultsResultsArea) GetDeletedAt() *string {
	return v.DefaultArea.DeletedAt
}

// GetToken returns listAreasAreasAreaSearchResultsResultsArea.Token, and is useful for accessing the field via an interface.
func (v *listAreasAreasAreaSearchResultsResultsArea) GetToken() string { return v.DefaultArea.Token }

// GetName returns listAreasAreasAreaSearchResultsResultsArea.Name, and is useful for accessing the field via an interface.
func (v *listAreasAreasAreaSearchResultsResultsArea) GetName() *string { return v.DefaultArea.Name }

// GetDescription returns listAreasAreasAreaSearchResultsResultsArea.Description, and is useful for accessing the field via an interface.
func (v *listAreasAreasAreaSearchResultsResultsArea) GetDescription() *string {
	return v.DefaultArea.Description
}

// GetAreaType returns listAreasAreasAreaSearchResultsResultsArea.AreaType, and is useful for accessing the field via an interface.
func (v *listAreasAreasAreaSearchResultsResultsArea) GetAreaType() DefaultAreaAreaType {
	return v.DefaultArea.AreaType
}

// GetMetadata returns listAreasAreasAreaSearchResultsResultsArea.Metadata, and is useful for accessing the field via an interface.
func (v *listAreasAreasAreaSearchResultsResultsArea) GetMetadata() *string {
	return v.DefaultArea.Metadata
}

func (v *listAreasAreasAreaSearchResultsResultsArea) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAreasAreasAreaSearchResultsResultsArea
		graphql.NoUnmarshalJSON
	}
	firstPass.listAreasAreasAreaSearchResultsResultsArea = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultArea)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAreasAreasAreaSearchResultsResultsArea struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	AreaType DefaultAreaAreaType `json:"areaType"`

	Metadata *string `json:"metadata"`
}

func (v *listAreasAreasAreaSearchResultsResultsArea) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAreasAreasAreaSearchResultsResultsArea) __premarshalJSON() (*__premarshallistAreasAreasAreaSearchResultsResultsArea, error) {
	var retval __premarshallistAreasAreasAreaSearchResultsResultsArea

	retval.Id = v.DefaultArea.Id
	retval.CreatedAt = v.DefaultArea.CreatedAt
	retval.UpdatedAt = v.DefaultArea.UpdatedAt
	retval.DeletedAt = v.DefaultArea.DeletedAt
	retval.Token = v.DefaultArea.Token
	retval.Name = v.DefaultArea.Name
	retval.Description = v.DefaultArea.Description
	retval.AreaType = v.DefaultArea.AreaType
	retval.Metadata = v.DefaultArea.Metadata
	return &retval, nil
}

// listAreasResponse is returned by listAreas on success.
type listAreasResponse struct {
	Areas listAreasAreasAreaSearchResults `json:"areas"`
}

// GetAreas returns listAreasResponse.Areas, and is useful for accessing the field via an interface.
func (v *listAreasResponse) GetAreas() listAreasAreasAreaSearchResults { return v.Areas }

// listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResults includes the requested fields of the GraphQL type AssetGroupRelationshipTypeSearchResults.
type listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResults struct {
	Results    []listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType `json:"results"`
	Pagination listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination                          `json:"pagination"`
}

// GetResults returns listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResults) GetResults() []listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType {
	return v.Results
}

// GetPagination returns listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResults) GetPagination() listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination {
	return v.Pagination
}

// listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination) __premarshalJSON() (*__premarshallistAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination, error) {
	var retval __premarshallistAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType includes the requested fields of the GraphQL type AssetGroupRelationshipType.
type listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType struct {
	DefaultAssetGroupRelationshipType `json:"-"`
}

// GetId returns listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType) GetId() string {
	return v.DefaultAssetGroupRelationshipType.Id
}

// GetCreatedAt returns listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType) GetCreatedAt() *string {
	return v.DefaultAssetGroupRelationshipType.CreatedAt
}

// GetUpdatedAt returns listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType) GetUpdatedAt() *string {
	return v.DefaultAssetGroupRelationshipType.UpdatedAt
}

// GetDeletedAt returns listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType) GetDeletedAt() *string {
	return v.DefaultAssetGroupRelationshipType.DeletedAt
}

// GetToken returns listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType) GetToken() string {
	return v.DefaultAssetGroupRelationshipType.Token
}

// GetName returns listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType) GetName() *string {
	return v.DefaultAssetGroupRelationshipType.Name
}

// GetDescription returns listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType) GetDescription() *string {
	return v.DefaultAssetGroupRelationshipType.Description
}

// GetMetadata returns listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType) GetMetadata() *string {
	return v.DefaultAssetGroupRelationshipType.Metadata
}

func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetGroupRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType) __premarshalJSON() (*__premarshallistAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType, error) {
	var retval __premarshallistAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResultsResultsAssetGroupRelationshipType

	retval.Id = v.DefaultAssetGroupRelationshipType.Id
	retval.CreatedAt = v.DefaultAssetGroupRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultAssetGroupRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultAssetGroupRelationshipType.DeletedAt
	retval.Token = v.DefaultAssetGroupRelationshipType.Token
	retval.Name = v.DefaultAssetGroupRelationshipType.Name
	retval.Description = v.DefaultAssetGroupRelationshipType.Description
	retval.Metadata = v.DefaultAssetGroupRelationshipType.Metadata
	return &retval, nil
}

// listAssetGroupRelationshipTypesResponse is returned by listAssetGroupRelationshipTypes on success.
type listAssetGroupRelationshipTypesResponse struct {
	AssetGroupRelationshipTypes listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResults `json:"assetGroupRelationshipTypes"`
}

// GetAssetGroupRelationshipTypes returns listAssetGroupRelationshipTypesResponse.AssetGroupRelationshipTypes, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipTypesResponse) GetAssetGroupRelationshipTypes() listAssetGroupRelationshipTypesAssetGroupRelationshipTypesAssetGroupRelationshipTypeSearchResults {
	return v.AssetGroupRelationshipTypes
}

// listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResults includes the requested fields of the GraphQL type AssetGroupRelationshipSearchResults.
type listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResults struct {
	Results    []listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship `json:"results"`
	Pagination listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination                      `json:"pagination"`
}

// GetResults returns listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResults) GetResults() []listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship {
	return v.Results
}

// GetPagination returns listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResults) GetPagination() listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination {
	return v.Pagination
}

// listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination) __premarshalJSON() (*__premarshallistAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination, error) {
	var retval __premarshallistAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship includes the requested fields of the GraphQL type AssetGroupRelationship.
type listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship struct {
	DefaultAssetGroupRelationship `json:"-"`
}

// GetId returns listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship.Id, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship) GetId() string {
	return v.DefaultAssetGroupRelationship.Id
}

// GetCreatedAt returns listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship) GetCreatedAt() *string {
	return v.DefaultAssetGroupRelationship.CreatedAt
}

// GetUpdatedAt returns listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship) GetUpdatedAt() *string {
	return v.DefaultAssetGroupRelationship.UpdatedAt
}

// GetDeletedAt returns listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship) GetDeletedAt() *string {
	return v.DefaultAssetGroupRelationship.DeletedAt
}

// GetToken returns listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship.Token, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship) GetToken() string {
	return v.DefaultAssetGroupRelationship.Token
}

// GetSourceAssetGroup returns listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship.SourceAssetGroup, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship) GetSourceAssetGroup() DefaultAssetGroupRelationshipSourceAssetGroup {
	return v.DefaultAssetGroupRelationship.SourceAssetGroup
}

// GetTargets returns listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship.Targets, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship) GetTargets() DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultAssetGroupRelationship.Targets
}

// GetRelationshipType returns listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship) GetRelationshipType() DefaultAssetGroupRelationshipRelationshipTypeAssetGroupRelationshipType {
	return v.DefaultAssetGroupRelationship.RelationshipType
}

// GetMetadata returns listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship) GetMetadata() *string {
	return v.DefaultAssetGroupRelationship.Metadata
}

func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetGroupRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceAssetGroup DefaultAssetGroupRelationshipSourceAssetGroup `json:"sourceAssetGroup"`

	Targets DefaultAssetGroupRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultAssetGroupRelationshipRelationshipTypeAssetGroupRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship) __premarshalJSON() (*__premarshallistAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship, error) {
	var retval __premarshallistAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResultsResultsAssetGroupRelationship

	retval.Id = v.DefaultAssetGroupRelationship.Id
	retval.CreatedAt = v.DefaultAssetGroupRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultAssetGroupRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultAssetGroupRelationship.DeletedAt
	retval.Token = v.DefaultAssetGroupRelationship.Token
	retval.SourceAssetGroup = v.DefaultAssetGroupRelationship.SourceAssetGroup
	retval.Targets = v.DefaultAssetGroupRelationship.Targets
	retval.RelationshipType = v.DefaultAssetGroupRelationship.RelationshipType
	retval.Metadata = v.DefaultAssetGroupRelationship.Metadata
	return &retval, nil
}

// listAssetGroupRelationshipsResponse is returned by listAssetGroupRelationships on success.
type listAssetGroupRelationshipsResponse struct {
	AssetGroupRelationships listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResults `json:"assetGroupRelationships"`
}

// GetAssetGroupRelationships returns listAssetGroupRelationshipsResponse.AssetGroupRelationships, and is useful for accessing the field via an interface.
func (v *listAssetGroupRelationshipsResponse) GetAssetGroupRelationships() listAssetGroupRelationshipsAssetGroupRelationshipsAssetGroupRelationshipSearchResults {
	return v.AssetGroupRelationships
}

// listAssetGroupsAssetGroupsAssetGroupSearchResults includes the requested fields of the GraphQL type AssetGroupSearchResults.
type listAssetGroupsAssetGroupsAssetGroupSearchResults struct {
	Results    []listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup `json:"results"`
	Pagination listAssetGroupsAssetGroupsAssetGroupSearchResultsPagination          `json:"pagination"`
}

// GetResults returns listAssetGroupsAssetGroupsAssetGroupSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResults) GetResults() []listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup {
	return v.Results
}

// GetPagination returns listAssetGroupsAssetGroupsAssetGroupSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResults) GetPagination() listAssetGroupsAssetGroupsAssetGroupSearchResultsPagination {
	return v.Pagination
}

// listAssetGroupsAssetGroupsAssetGroupSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listAssetGroupsAssetGroupsAssetGroupSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listAssetGroupsAssetGroupsAssetGroupSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listAssetGroupsAssetGroupsAssetGroupSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listAssetGroupsAssetGroupsAssetGroupSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAssetGroupsAssetGroupsAssetGroupSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listAssetGroupsAssetGroupsAssetGroupSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAssetGroupsAssetGroupsAssetGroupSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsPagination) __premarshalJSON() (*__premarshallistAssetGroupsAssetGroupsAssetGroupSearchResultsPagination, error) {
	var retval __premarshallistAssetGroupsAssetGroupsAssetGroupSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup includes the requested fields of the GraphQL type AssetGroup.
type listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup struct {
	DefaultAssetGroup `json:"-"`
}

// GetId returns listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup.Id, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup) GetId() string {
	return v.DefaultAssetGroup.Id
}

// GetCreatedAt returns listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup) GetCreatedAt() *string {
	return v.DefaultAssetGroup.CreatedAt
}

// GetUpdatedAt returns listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup) GetUpdatedAt() *string {
	return v.DefaultAssetGroup.UpdatedAt
}

// GetDeletedAt returns listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup.DeletedAt, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup) GetDeletedAt() *string {
	return v.DefaultAssetGroup.DeletedAt
}

// GetToken returns listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup.Token, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup) GetToken() string {
	return v.DefaultAssetGroup.Token
}

// GetName returns listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup.Name, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup) GetName() *string {
	return v.DefaultAssetGroup.Name
}

// GetDescription returns listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup.Description, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup) GetDescription() *string {
	return v.DefaultAssetGroup.Description
}

// GetImageUrl returns listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup.ImageUrl, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup) GetImageUrl() *string {
	return v.DefaultAssetGroup.ImageUrl
}

// GetIcon returns listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup.Icon, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup) GetIcon() *string {
	return v.DefaultAssetGroup.Icon
}

// GetBackgroundColor returns listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup.BackgroundColor, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup) GetBackgroundColor() *string {
	return v.DefaultAssetGroup.BackgroundColor
}

// GetForegroundColor returns listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup.ForegroundColor, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup) GetForegroundColor() *string {
	return v.DefaultAssetGroup.ForegroundColor
}

// GetBorderColor returns listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup.BorderColor, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup) GetBorderColor() *string {
	return v.DefaultAssetGroup.BorderColor
}

// GetMetadata returns listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup.Metadata, and is useful for accessing the field via an interface.
func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup) GetMetadata() *string {
	return v.DefaultAssetGroup.Metadata
}

func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup
		graphql.NoUnmarshalJSON
	}
	firstPass.listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetGroup)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup) __premarshalJSON() (*__premarshallistAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup, error) {
	var retval __premarshallistAssetGroupsAssetGroupsAssetGroupSearchResultsResultsAssetGroup

	retval.Id = v.DefaultAssetGroup.Id
	retval.CreatedAt = v.DefaultAssetGroup.CreatedAt
	retval.UpdatedAt = v.DefaultAssetGroup.UpdatedAt
	retval.DeletedAt = v.DefaultAssetGroup.DeletedAt
	retval.Token = v.DefaultAssetGroup.Token
	retval.Name = v.DefaultAssetGroup.Name
	retval.Description = v.DefaultAssetGroup.Description
	retval.ImageUrl = v.DefaultAssetGroup.ImageUrl
	retval.Icon = v.DefaultAssetGroup.Icon
	retval.BackgroundColor = v.DefaultAssetGroup.BackgroundColor
	retval.ForegroundColor = v.DefaultAssetGroup.ForegroundColor
	retval.BorderColor = v.DefaultAssetGroup.BorderColor
	retval.Metadata = v.DefaultAssetGroup.Metadata
	return &retval, nil
}

// listAssetGroupsResponse is returned by listAssetGroups on success.
type listAssetGroupsResponse struct {
	AssetGroups listAssetGroupsAssetGroupsAssetGroupSearchResults `json:"assetGroups"`
}

// GetAssetGroups returns listAssetGroupsResponse.AssetGroups, and is useful for accessing the field via an interface.
func (v *listAssetGroupsResponse) GetAssetGroups() listAssetGroupsAssetGroupsAssetGroupSearchResults {
	return v.AssetGroups
}

// listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResults includes the requested fields of the GraphQL type AssetRelationshipTypeSearchResults.
type listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResults struct {
	Results    []listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType `json:"results"`
	Pagination listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination                     `json:"pagination"`
}

// GetResults returns listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResults) GetResults() []listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType {
	return v.Results
}

// GetPagination returns listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResults) GetPagination() listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination {
	return v.Pagination
}

// listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination) __premarshalJSON() (*__premarshallistAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination, error) {
	var retval __premarshallistAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType includes the requested fields of the GraphQL type AssetRelationshipType.
type listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType struct {
	DefaultAssetRelationshipType `json:"-"`
}

// GetId returns listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType) GetId() string {
	return v.DefaultAssetRelationshipType.Id
}

// GetCreatedAt returns listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType) GetCreatedAt() *string {
	return v.DefaultAssetRelationshipType.CreatedAt
}

// GetUpdatedAt returns listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType) GetUpdatedAt() *string {
	return v.DefaultAssetRelationshipType.UpdatedAt
}

// GetDeletedAt returns listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType) GetDeletedAt() *string {
	return v.DefaultAssetRelationshipType.DeletedAt
}

// GetToken returns listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType) GetToken() string {
	return v.DefaultAssetRelationshipType.Token
}

// GetName returns listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType) GetName() *string {
	return v.DefaultAssetRelationshipType.Name
}

// GetDescription returns listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType) GetDescription() *string {
	return v.DefaultAssetRelationshipType.Description
}

// GetMetadata returns listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType) GetMetadata() *string {
	return v.DefaultAssetRelationshipType.Metadata
}

func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType) __premarshalJSON() (*__premarshallistAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType, error) {
	var retval __premarshallistAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResultsResultsAssetRelationshipType

	retval.Id = v.DefaultAssetRelationshipType.Id
	retval.CreatedAt = v.DefaultAssetRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultAssetRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultAssetRelationshipType.DeletedAt
	retval.Token = v.DefaultAssetRelationshipType.Token
	retval.Name = v.DefaultAssetRelationshipType.Name
	retval.Description = v.DefaultAssetRelationshipType.Description
	retval.Metadata = v.DefaultAssetRelationshipType.Metadata
	return &retval, nil
}

// listAssetRelationshipTypesResponse is returned by listAssetRelationshipTypes on success.
type listAssetRelationshipTypesResponse struct {
	AssetRelationshipTypes listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResults `json:"assetRelationshipTypes"`
}

// GetAssetRelationshipTypes returns listAssetRelationshipTypesResponse.AssetRelationshipTypes, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipTypesResponse) GetAssetRelationshipTypes() listAssetRelationshipTypesAssetRelationshipTypesAssetRelationshipTypeSearchResults {
	return v.AssetRelationshipTypes
}

// listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResults includes the requested fields of the GraphQL type AssetRelationshipSearchResults.
type listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResults struct {
	Results    []listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship `json:"results"`
	Pagination listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination                 `json:"pagination"`
}

// GetResults returns listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResults) GetResults() []listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship {
	return v.Results
}

// GetPagination returns listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResults) GetPagination() listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination {
	return v.Pagination
}

// listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination) __premarshalJSON() (*__premarshallistAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination, error) {
	var retval __premarshallistAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship includes the requested fields of the GraphQL type AssetRelationship.
type listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship struct {
	DefaultAssetRelationship `json:"-"`
}

// GetId returns listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship.Id, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship) GetId() string {
	return v.DefaultAssetRelationship.Id
}

// GetCreatedAt returns listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship) GetCreatedAt() *string {
	return v.DefaultAssetRelationship.CreatedAt
}

// GetUpdatedAt returns listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship) GetUpdatedAt() *string {
	return v.DefaultAssetRelationship.UpdatedAt
}

// GetDeletedAt returns listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship) GetDeletedAt() *string {
	return v.DefaultAssetRelationship.DeletedAt
}

// GetToken returns listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship.Token, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship) GetToken() string {
	return v.DefaultAssetRelationship.Token
}

// GetSourceAsset returns listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship.SourceAsset, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship) GetSourceAsset() DefaultAssetRelationshipSourceAsset {
	return v.DefaultAssetRelationship.SourceAsset
}

// GetTargets returns listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship.Targets, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship) GetTargets() DefaultAssetRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultAssetRelationship.Targets
}

// GetRelationshipType returns listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship) GetRelationshipType() DefaultAssetRelationshipRelationshipTypeAssetRelationshipType {
	return v.DefaultAssetRelationship.RelationshipType
}

// GetMetadata returns listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship) GetMetadata() *string {
	return v.DefaultAssetRelationship.Metadata
}

func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceAsset DefaultAssetRelationshipSourceAsset `json:"sourceAsset"`

	Targets DefaultAssetRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultAssetRelationshipRelationshipTypeAssetRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship) __premarshalJSON() (*__premarshallistAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship, error) {
	var retval __premarshallistAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResultsResultsAssetRelationship

	retval.Id = v.DefaultAssetRelationship.Id
	retval.CreatedAt = v.DefaultAssetRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultAssetRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultAssetRelationship.DeletedAt
	retval.Token = v.DefaultAssetRelationship.Token
	retval.SourceAsset = v.DefaultAssetRelationship.SourceAsset
	retval.Targets = v.DefaultAssetRelationship.Targets
	retval.RelationshipType = v.DefaultAssetRelationship.RelationshipType
	retval.Metadata = v.DefaultAssetRelationship.Metadata
	return &retval, nil
}

// listAssetRelationshipsResponse is returned by listAssetRelationships on success.
type listAssetRelationshipsResponse struct {
	AssetRelationships listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResults `json:"assetRelationships"`
}

// GetAssetRelationships returns listAssetRelationshipsResponse.AssetRelationships, and is useful for accessing the field via an interface.
func (v *listAssetRelationshipsResponse) GetAssetRelationships() listAssetRelationshipsAssetRelationshipsAssetRelationshipSearchResults {
	return v.AssetRelationships
}

// listAssetTypesAssetTypesAssetTypeSearchResults includes the requested fields of the GraphQL type AssetTypeSearchResults.
type listAssetTypesAssetTypesAssetTypeSearchResults struct {
	Results    []listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType `json:"results"`
	Pagination listAssetTypesAssetTypesAssetTypeSearchResultsPagination         `json:"pagination"`
}

// GetResults returns listAssetTypesAssetTypesAssetTypeSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResults) GetResults() []listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType {
	return v.Results
}

// GetPagination returns listAssetTypesAssetTypesAssetTypeSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResults) GetPagination() listAssetTypesAssetTypesAssetTypeSearchResultsPagination {
	return v.Pagination
}

// listAssetTypesAssetTypesAssetTypeSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listAssetTypesAssetTypesAssetTypeSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listAssetTypesAssetTypesAssetTypeSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listAssetTypesAssetTypesAssetTypeSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listAssetTypesAssetTypesAssetTypeSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listAssetTypesAssetTypesAssetTypeSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAssetTypesAssetTypesAssetTypeSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listAssetTypesAssetTypesAssetTypeSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAssetTypesAssetTypesAssetTypeSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listAssetTypesAssetTypesAssetTypeSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAssetTypesAssetTypesAssetTypeSearchResultsPagination) __premarshalJSON() (*__premarshallistAssetTypesAssetTypesAssetTypeSearchResultsPagination, error) {
	var retval __premarshallistAssetTypesAssetTypesAssetTypeSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType includes the requested fields of the GraphQL type AssetType.
type listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType struct {
	DefaultAssetType `json:"-"`
}

// GetId returns listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType.Id, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType) GetId() string {
	return v.DefaultAssetType.Id
}

// GetCreatedAt returns listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType.CreatedAt, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType) GetCreatedAt() *string {
	return v.DefaultAssetType.CreatedAt
}

// GetUpdatedAt returns listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType) GetUpdatedAt() *string {
	return v.DefaultAssetType.UpdatedAt
}

// GetDeletedAt returns listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType.DeletedAt, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType) GetDeletedAt() *string {
	return v.DefaultAssetType.DeletedAt
}

// GetToken returns listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType.Token, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType) GetToken() string {
	return v.DefaultAssetType.Token
}

// GetName returns listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType.Name, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType) GetName() *string {
	return v.DefaultAssetType.Name
}

// GetDescription returns listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType.Description, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType) GetDescription() *string {
	return v.DefaultAssetType.Description
}

// GetImageUrl returns listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType.ImageUrl, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType) GetImageUrl() *string {
	return v.DefaultAssetType.ImageUrl
}

// GetIcon returns listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType.Icon, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType) GetIcon() *string {
	return v.DefaultAssetType.Icon
}

// GetBackgroundColor returns listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType.BackgroundColor, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType) GetBackgroundColor() *string {
	return v.DefaultAssetType.BackgroundColor
}

// GetForegroundColor returns listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType.ForegroundColor, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType) GetForegroundColor() *string {
	return v.DefaultAssetType.ForegroundColor
}

// GetBorderColor returns listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType.BorderColor, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType) GetBorderColor() *string {
	return v.DefaultAssetType.BorderColor
}

// GetMetadata returns listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType.Metadata, and is useful for accessing the field via an interface.
func (v *listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType) GetMetadata() *string {
	return v.DefaultAssetType.Metadata
}

func (v *listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType
		graphql.NoUnmarshalJSON
	}
	firstPass.listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAssetType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType) __premarshalJSON() (*__premarshallistAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType, error) {
	var retval __premarshallistAssetTypesAssetTypesAssetTypeSearchResultsResultsAssetType

	retval.Id = v.DefaultAssetType.Id
	retval.CreatedAt = v.DefaultAssetType.CreatedAt
	retval.UpdatedAt = v.DefaultAssetType.UpdatedAt
	retval.DeletedAt = v.DefaultAssetType.DeletedAt
	retval.Token = v.DefaultAssetType.Token
	retval.Name = v.DefaultAssetType.Name
	retval.Description = v.DefaultAssetType.Description
	retval.ImageUrl = v.DefaultAssetType.ImageUrl
	retval.Icon = v.DefaultAssetType.Icon
	retval.BackgroundColor = v.DefaultAssetType.BackgroundColor
	retval.ForegroundColor = v.DefaultAssetType.ForegroundColor
	retval.BorderColor = v.DefaultAssetType.BorderColor
	retval.Metadata = v.DefaultAssetType.Metadata
	return &retval, nil
}

// listAssetTypesResponse is returned by listAssetTypes on success.
type listAssetTypesResponse struct {
	AssetTypes listAssetTypesAssetTypesAssetTypeSearchResults `json:"assetTypes"`
}

// GetAssetTypes returns listAssetTypesResponse.AssetTypes, and is useful for accessing the field via an interface.
func (v *listAssetTypesResponse) GetAssetTypes() listAssetTypesAssetTypesAssetTypeSearchResults {
	return v.AssetTypes
}

// listAssetsAssetsAssetSearchResults includes the requested fields of the GraphQL type AssetSearchResults.
type listAssetsAssetsAssetSearchResults struct {
	Results    []listAssetsAssetsAssetSearchResultsResultsAsset `json:"results"`
	Pagination listAssetsAssetsAssetSearchResultsPagination     `json:"pagination"`
}

// GetResults returns listAssetsAssetsAssetSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listAssetsAssetsAssetSearchResults) GetResults() []listAssetsAssetsAssetSearchResultsResultsAsset {
	return v.Results
}

// GetPagination returns listAssetsAssetsAssetSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listAssetsAssetsAssetSearchResults) GetPagination() listAssetsAssetsAssetSearchResultsPagination {
	return v.Pagination
}

// listAssetsAssetsAssetSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listAssetsAssetsAssetSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listAssetsAssetsAssetSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listAssetsAssetsAssetSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listAssetsAssetsAssetSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listAssetsAssetsAssetSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listAssetsAssetsAssetSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listAssetsAssetsAssetSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listAssetsAssetsAssetSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAssetsAssetsAssetSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listAssetsAssetsAssetSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAssetsAssetsAssetSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listAssetsAssetsAssetSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAssetsAssetsAssetSearchResultsPagination) __premarshalJSON() (*__premarshallistAssetsAssetsAssetSearchResultsPagination, error) {
	var retval __premarshallistAssetsAssetsAssetSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listAssetsAssetsAssetSearchResultsResultsAsset includes the requested fields of the GraphQL type Asset.
type listAssetsAssetsAssetSearchResultsResultsAsset struct {
	DefaultAsset `json:"-"`
}

// GetId returns listAssetsAssetsAssetSearchResultsResultsAsset.Id, and is useful for accessing the field via an interface.
func (v *listAssetsAssetsAssetSearchResultsResultsAsset) GetId() string { return v.DefaultAsset.Id }

// GetCreatedAt returns listAssetsAssetsAssetSearchResultsResultsAsset.CreatedAt, and is useful for accessing the field via an interface.
func (v *listAssetsAssetsAssetSearchResultsResultsAsset) GetCreatedAt() *string {
	return v.DefaultAsset.CreatedAt
}

// GetUpdatedAt returns listAssetsAssetsAssetSearchResultsResultsAsset.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listAssetsAssetsAssetSearchResultsResultsAsset) GetUpdatedAt() *string {
	return v.DefaultAsset.UpdatedAt
}

// GetDeletedAt returns listAssetsAssetsAssetSearchResultsResultsAsset.DeletedAt, and is useful for accessing the field via an interface.
func (v *listAssetsAssetsAssetSearchResultsResultsAsset) GetDeletedAt() *string {
	return v.DefaultAsset.DeletedAt
}

// GetToken returns listAssetsAssetsAssetSearchResultsResultsAsset.Token, and is useful for accessing the field via an interface.
func (v *listAssetsAssetsAssetSearchResultsResultsAsset) GetToken() string {
	return v.DefaultAsset.Token
}

// GetName returns listAssetsAssetsAssetSearchResultsResultsAsset.Name, and is useful for accessing the field via an interface.
func (v *listAssetsAssetsAssetSearchResultsResultsAsset) GetName() *string {
	return v.DefaultAsset.Name
}

// GetDescription returns listAssetsAssetsAssetSearchResultsResultsAsset.Description, and is useful for accessing the field via an interface.
func (v *listAssetsAssetsAssetSearchResultsResultsAsset) GetDescription() *string {
	return v.DefaultAsset.Description
}

// GetAssetType returns listAssetsAssetsAssetSearchResultsResultsAsset.AssetType, and is useful for accessing the field via an interface.
func (v *listAssetsAssetsAssetSearchResultsResultsAsset) GetAssetType() DefaultAssetAssetType {
	return v.DefaultAsset.AssetType
}

// GetMetadata returns listAssetsAssetsAssetSearchResultsResultsAsset.Metadata, and is useful for accessing the field via an interface.
func (v *listAssetsAssetsAssetSearchResultsResultsAsset) GetMetadata() *string {
	return v.DefaultAsset.Metadata
}

func (v *listAssetsAssetsAssetSearchResultsResultsAsset) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listAssetsAssetsAssetSearchResultsResultsAsset
		graphql.NoUnmarshalJSON
	}
	firstPass.listAssetsAssetsAssetSearchResultsResultsAsset = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultAsset)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistAssetsAssetsAssetSearchResultsResultsAsset struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	AssetType DefaultAssetAssetType `json:"assetType"`

	Metadata *string `json:"metadata"`
}

func (v *listAssetsAssetsAssetSearchResultsResultsAsset) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listAssetsAssetsAssetSearchResultsResultsAsset) __premarshalJSON() (*__premarshallistAssetsAssetsAssetSearchResultsResultsAsset, error) {
	var retval __premarshallistAssetsAssetsAssetSearchResultsResultsAsset

	retval.Id = v.DefaultAsset.Id
	retval.CreatedAt = v.DefaultAsset.CreatedAt
	retval.UpdatedAt = v.DefaultAsset.UpdatedAt
	retval.DeletedAt = v.DefaultAsset.DeletedAt
	retval.Token = v.DefaultAsset.Token
	retval.Name = v.DefaultAsset.Name
	retval.Description = v.DefaultAsset.Description
	retval.AssetType = v.DefaultAsset.AssetType
	retval.Metadata = v.DefaultAsset.Metadata
	return &retval, nil
}

// listAssetsResponse is returned by listAssets on success.
type listAssetsResponse struct {
	Assets listAssetsAssetsAssetSearchResults `json:"assets"`
}

// GetAssets returns listAssetsResponse.Assets, and is useful for accessing the field via an interface.
func (v *listAssetsResponse) GetAssets() listAssetsAssetsAssetSearchResults { return v.Assets }

// listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResults includes the requested fields of the GraphQL type CustomerGroupRelationshipTypeSearchResults.
type listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResults struct {
	Results    []listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType `json:"results"`
	Pagination listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination                             `json:"pagination"`
}

// GetResults returns listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResults) GetResults() []listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType {
	return v.Results
}

// GetPagination returns listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResults) GetPagination() listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination {
	return v.Pagination
}

// listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination) __premarshalJSON() (*__premarshallistCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination, error) {
	var retval __premarshallistCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType includes the requested fields of the GraphQL type CustomerGroupRelationshipType.
type listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType struct {
	DefaultCustomerGroupRelationshipType `json:"-"`
}

// GetId returns listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType) GetId() string {
	return v.DefaultCustomerGroupRelationshipType.Id
}

// GetCreatedAt returns listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType) GetCreatedAt() *string {
	return v.DefaultCustomerGroupRelationshipType.CreatedAt
}

// GetUpdatedAt returns listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType) GetUpdatedAt() *string {
	return v.DefaultCustomerGroupRelationshipType.UpdatedAt
}

// GetDeletedAt returns listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType) GetDeletedAt() *string {
	return v.DefaultCustomerGroupRelationshipType.DeletedAt
}

// GetToken returns listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType) GetToken() string {
	return v.DefaultCustomerGroupRelationshipType.Token
}

// GetName returns listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType) GetName() *string {
	return v.DefaultCustomerGroupRelationshipType.Name
}

// GetDescription returns listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType) GetDescription() *string {
	return v.DefaultCustomerGroupRelationshipType.Description
}

// GetMetadata returns listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType) GetMetadata() *string {
	return v.DefaultCustomerGroupRelationshipType.Metadata
}

func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerGroupRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType) __premarshalJSON() (*__premarshallistCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType, error) {
	var retval __premarshallistCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResultsResultsCustomerGroupRelationshipType

	retval.Id = v.DefaultCustomerGroupRelationshipType.Id
	retval.CreatedAt = v.DefaultCustomerGroupRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerGroupRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerGroupRelationshipType.DeletedAt
	retval.Token = v.DefaultCustomerGroupRelationshipType.Token
	retval.Name = v.DefaultCustomerGroupRelationshipType.Name
	retval.Description = v.DefaultCustomerGroupRelationshipType.Description
	retval.Metadata = v.DefaultCustomerGroupRelationshipType.Metadata
	return &retval, nil
}

// listCustomerGroupRelationshipTypesResponse is returned by listCustomerGroupRelationshipTypes on success.
type listCustomerGroupRelationshipTypesResponse struct {
	CustomerGroupRelationshipTypes listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResults `json:"customerGroupRelationshipTypes"`
}

// GetCustomerGroupRelationshipTypes returns listCustomerGroupRelationshipTypesResponse.CustomerGroupRelationshipTypes, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipTypesResponse) GetCustomerGroupRelationshipTypes() listCustomerGroupRelationshipTypesCustomerGroupRelationshipTypesCustomerGroupRelationshipTypeSearchResults {
	return v.CustomerGroupRelationshipTypes
}

// listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResults includes the requested fields of the GraphQL type CustomerGroupRelationshipSearchResults.
type listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResults struct {
	Results    []listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship `json:"results"`
	Pagination listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination                         `json:"pagination"`
}

// GetResults returns listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResults) GetResults() []listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship {
	return v.Results
}

// GetPagination returns listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResults) GetPagination() listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination {
	return v.Pagination
}

// listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination) __premarshalJSON() (*__premarshallistCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination, error) {
	var retval __premarshallistCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship includes the requested fields of the GraphQL type CustomerGroupRelationship.
type listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship struct {
	DefaultCustomerGroupRelationship `json:"-"`
}

// GetId returns listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship.Id, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship) GetId() string {
	return v.DefaultCustomerGroupRelationship.Id
}

// GetCreatedAt returns listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship) GetCreatedAt() *string {
	return v.DefaultCustomerGroupRelationship.CreatedAt
}

// GetUpdatedAt returns listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship) GetUpdatedAt() *string {
	return v.DefaultCustomerGroupRelationship.UpdatedAt
}

// GetDeletedAt returns listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship) GetDeletedAt() *string {
	return v.DefaultCustomerGroupRelationship.DeletedAt
}

// GetToken returns listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship.Token, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship) GetToken() string {
	return v.DefaultCustomerGroupRelationship.Token
}

// GetSourceCustomerGroup returns listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship.SourceCustomerGroup, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship) GetSourceCustomerGroup() DefaultCustomerGroupRelationshipSourceCustomerGroup {
	return v.DefaultCustomerGroupRelationship.SourceCustomerGroup
}

// GetTargets returns listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship.Targets, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship) GetTargets() DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultCustomerGroupRelationship.Targets
}

// GetRelationshipType returns listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship) GetRelationshipType() DefaultCustomerGroupRelationshipRelationshipTypeCustomerGroupRelationshipType {
	return v.DefaultCustomerGroupRelationship.RelationshipType
}

// GetMetadata returns listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship) GetMetadata() *string {
	return v.DefaultCustomerGroupRelationship.Metadata
}

func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerGroupRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceCustomerGroup DefaultCustomerGroupRelationshipSourceCustomerGroup `json:"sourceCustomerGroup"`

	Targets DefaultCustomerGroupRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultCustomerGroupRelationshipRelationshipTypeCustomerGroupRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship) __premarshalJSON() (*__premarshallistCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship, error) {
	var retval __premarshallistCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResultsResultsCustomerGroupRelationship

	retval.Id = v.DefaultCustomerGroupRelationship.Id
	retval.CreatedAt = v.DefaultCustomerGroupRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerGroupRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerGroupRelationship.DeletedAt
	retval.Token = v.DefaultCustomerGroupRelationship.Token
	retval.SourceCustomerGroup = v.DefaultCustomerGroupRelationship.SourceCustomerGroup
	retval.Targets = v.DefaultCustomerGroupRelationship.Targets
	retval.RelationshipType = v.DefaultCustomerGroupRelationship.RelationshipType
	retval.Metadata = v.DefaultCustomerGroupRelationship.Metadata
	return &retval, nil
}

// listCustomerGroupRelationshipsResponse is returned by listCustomerGroupRelationships on success.
type listCustomerGroupRelationshipsResponse struct {
	CustomerGroupRelationships listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResults `json:"customerGroupRelationships"`
}

// GetCustomerGroupRelationships returns listCustomerGroupRelationshipsResponse.CustomerGroupRelationships, and is useful for accessing the field via an interface.
func (v *listCustomerGroupRelationshipsResponse) GetCustomerGroupRelationships() listCustomerGroupRelationshipsCustomerGroupRelationshipsCustomerGroupRelationshipSearchResults {
	return v.CustomerGroupRelationships
}

// listCustomerGroupsCustomerGroupsCustomerGroupSearchResults includes the requested fields of the GraphQL type CustomerGroupSearchResults.
type listCustomerGroupsCustomerGroupsCustomerGroupSearchResults struct {
	Results    []listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup `json:"results"`
	Pagination listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination             `json:"pagination"`
}

// GetResults returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResults) GetResults() []listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup {
	return v.Results
}

// GetPagination returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResults) GetPagination() listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination {
	return v.Pagination
}

// listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination) __premarshalJSON() (*__premarshallistCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination, error) {
	var retval __premarshallistCustomerGroupsCustomerGroupsCustomerGroupSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup includes the requested fields of the GraphQL type CustomerGroup.
type listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup struct {
	DefaultCustomerGroup `json:"-"`
}

// GetId returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup.Id, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup) GetId() string {
	return v.DefaultCustomerGroup.Id
}

// GetCreatedAt returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup) GetCreatedAt() *string {
	return v.DefaultCustomerGroup.CreatedAt
}

// GetUpdatedAt returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup) GetUpdatedAt() *string {
	return v.DefaultCustomerGroup.UpdatedAt
}

// GetDeletedAt returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup.DeletedAt, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup) GetDeletedAt() *string {
	return v.DefaultCustomerGroup.DeletedAt
}

// GetToken returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup.Token, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup) GetToken() string {
	return v.DefaultCustomerGroup.Token
}

// GetName returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup.Name, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup) GetName() *string {
	return v.DefaultCustomerGroup.Name
}

// GetDescription returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup.Description, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup) GetDescription() *string {
	return v.DefaultCustomerGroup.Description
}

// GetImageUrl returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup.ImageUrl, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup) GetImageUrl() *string {
	return v.DefaultCustomerGroup.ImageUrl
}

// GetIcon returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup.Icon, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup) GetIcon() *string {
	return v.DefaultCustomerGroup.Icon
}

// GetBackgroundColor returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup.BackgroundColor, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup) GetBackgroundColor() *string {
	return v.DefaultCustomerGroup.BackgroundColor
}

// GetForegroundColor returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup.ForegroundColor, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup) GetForegroundColor() *string {
	return v.DefaultCustomerGroup.ForegroundColor
}

// GetBorderColor returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup.BorderColor, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup) GetBorderColor() *string {
	return v.DefaultCustomerGroup.BorderColor
}

// GetMetadata returns listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup.Metadata, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup) GetMetadata() *string {
	return v.DefaultCustomerGroup.Metadata
}

func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup
		graphql.NoUnmarshalJSON
	}
	firstPass.listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerGroup)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup) __premarshalJSON() (*__premarshallistCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup, error) {
	var retval __premarshallistCustomerGroupsCustomerGroupsCustomerGroupSearchResultsResultsCustomerGroup

	retval.Id = v.DefaultCustomerGroup.Id
	retval.CreatedAt = v.DefaultCustomerGroup.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerGroup.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerGroup.DeletedAt
	retval.Token = v.DefaultCustomerGroup.Token
	retval.Name = v.DefaultCustomerGroup.Name
	retval.Description = v.DefaultCustomerGroup.Description
	retval.ImageUrl = v.DefaultCustomerGroup.ImageUrl
	retval.Icon = v.DefaultCustomerGroup.Icon
	retval.BackgroundColor = v.DefaultCustomerGroup.BackgroundColor
	retval.ForegroundColor = v.DefaultCustomerGroup.ForegroundColor
	retval.BorderColor = v.DefaultCustomerGroup.BorderColor
	retval.Metadata = v.DefaultCustomerGroup.Metadata
	return &retval, nil
}

// listCustomerGroupsResponse is returned by listCustomerGroups on success.
type listCustomerGroupsResponse struct {
	CustomerGroups listCustomerGroupsCustomerGroupsCustomerGroupSearchResults `json:"customerGroups"`
}

// GetCustomerGroups returns listCustomerGroupsResponse.CustomerGroups, and is useful for accessing the field via an interface.
func (v *listCustomerGroupsResponse) GetCustomerGroups() listCustomerGroupsCustomerGroupsCustomerGroupSearchResults {
	return v.CustomerGroups
}

// listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResults includes the requested fields of the GraphQL type CustomerRelationshipTypeSearchResults.
type listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResults struct {
	Results    []listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType `json:"results"`
	Pagination listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination                        `json:"pagination"`
}

// GetResults returns listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResults) GetResults() []listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType {
	return v.Results
}

// GetPagination returns listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResults) GetPagination() listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination {
	return v.Pagination
}

// listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination) __premarshalJSON() (*__premarshallistCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination, error) {
	var retval __premarshallistCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType includes the requested fields of the GraphQL type CustomerRelationshipType.
type listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType struct {
	DefaultCustomerRelationshipType `json:"-"`
}

// GetId returns listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType) GetId() string {
	return v.DefaultCustomerRelationshipType.Id
}

// GetCreatedAt returns listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType) GetCreatedAt() *string {
	return v.DefaultCustomerRelationshipType.CreatedAt
}

// GetUpdatedAt returns listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType) GetUpdatedAt() *string {
	return v.DefaultCustomerRelationshipType.UpdatedAt
}

// GetDeletedAt returns listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType) GetDeletedAt() *string {
	return v.DefaultCustomerRelationshipType.DeletedAt
}

// GetToken returns listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType) GetToken() string {
	return v.DefaultCustomerRelationshipType.Token
}

// GetName returns listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType) GetName() *string {
	return v.DefaultCustomerRelationshipType.Name
}

// GetDescription returns listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType) GetDescription() *string {
	return v.DefaultCustomerRelationshipType.Description
}

// GetMetadata returns listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType) GetMetadata() *string {
	return v.DefaultCustomerRelationshipType.Metadata
}

func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType) __premarshalJSON() (*__premarshallistCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType, error) {
	var retval __premarshallistCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResultsResultsCustomerRelationshipType

	retval.Id = v.DefaultCustomerRelationshipType.Id
	retval.CreatedAt = v.DefaultCustomerRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerRelationshipType.DeletedAt
	retval.Token = v.DefaultCustomerRelationshipType.Token
	retval.Name = v.DefaultCustomerRelationshipType.Name
	retval.Description = v.DefaultCustomerRelationshipType.Description
	retval.Metadata = v.DefaultCustomerRelationshipType.Metadata
	return &retval, nil
}

// listCustomerRelationshipTypesResponse is returned by listCustomerRelationshipTypes on success.
type listCustomerRelationshipTypesResponse struct {
	CustomerRelationshipTypes listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResults `json:"customerRelationshipTypes"`
}

// GetCustomerRelationshipTypes returns listCustomerRelationshipTypesResponse.CustomerRelationshipTypes, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipTypesResponse) GetCustomerRelationshipTypes() listCustomerRelationshipTypesCustomerRelationshipTypesCustomerRelationshipTypeSearchResults {
	return v.CustomerRelationshipTypes
}

// listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResults includes the requested fields of the GraphQL type CustomerRelationshipSearchResults.
type listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResults struct {
	Results    []listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship `json:"results"`
	Pagination listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination                    `json:"pagination"`
}

// GetResults returns listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResults) GetResults() []listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship {
	return v.Results
}

// GetPagination returns listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResults) GetPagination() listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination {
	return v.Pagination
}

// listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination) __premarshalJSON() (*__premarshallistCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination, error) {
	var retval __premarshallistCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship includes the requested fields of the GraphQL type CustomerRelationship.
type listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship struct {
	DefaultCustomerRelationship `json:"-"`
}

// GetId returns listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship.Id, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship) GetId() string {
	return v.DefaultCustomerRelationship.Id
}

// GetCreatedAt returns listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship) GetCreatedAt() *string {
	return v.DefaultCustomerRelationship.CreatedAt
}

// GetUpdatedAt returns listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship) GetUpdatedAt() *string {
	return v.DefaultCustomerRelationship.UpdatedAt
}

// GetDeletedAt returns listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship) GetDeletedAt() *string {
	return v.DefaultCustomerRelationship.DeletedAt
}

// GetToken returns listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship.Token, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship) GetToken() string {
	return v.DefaultCustomerRelationship.Token
}

// GetSourceCustomer returns listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship.SourceCustomer, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship) GetSourceCustomer() DefaultCustomerRelationshipSourceCustomer {
	return v.DefaultCustomerRelationship.SourceCustomer
}

// GetTargets returns listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship.Targets, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship) GetTargets() DefaultCustomerRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultCustomerRelationship.Targets
}

// GetRelationshipType returns listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship) GetRelationshipType() DefaultCustomerRelationshipRelationshipTypeCustomerRelationshipType {
	return v.DefaultCustomerRelationship.RelationshipType
}

// GetMetadata returns listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship) GetMetadata() *string {
	return v.DefaultCustomerRelationship.Metadata
}

func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceCustomer DefaultCustomerRelationshipSourceCustomer `json:"sourceCustomer"`

	Targets DefaultCustomerRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultCustomerRelationshipRelationshipTypeCustomerRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship) __premarshalJSON() (*__premarshallistCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship, error) {
	var retval __premarshallistCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResultsResultsCustomerRelationship

	retval.Id = v.DefaultCustomerRelationship.Id
	retval.CreatedAt = v.DefaultCustomerRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerRelationship.DeletedAt
	retval.Token = v.DefaultCustomerRelationship.Token
	retval.SourceCustomer = v.DefaultCustomerRelationship.SourceCustomer
	retval.Targets = v.DefaultCustomerRelationship.Targets
	retval.RelationshipType = v.DefaultCustomerRelationship.RelationshipType
	retval.Metadata = v.DefaultCustomerRelationship.Metadata
	return &retval, nil
}

// listCustomerRelationshipsResponse is returned by listCustomerRelationships on success.
type listCustomerRelationshipsResponse struct {
	CustomerRelationships listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResults `json:"customerRelationships"`
}

// GetCustomerRelationships returns listCustomerRelationshipsResponse.CustomerRelationships, and is useful for accessing the field via an interface.
func (v *listCustomerRelationshipsResponse) GetCustomerRelationships() listCustomerRelationshipsCustomerRelationshipsCustomerRelationshipSearchResults {
	return v.CustomerRelationships
}

// listCustomerTypesCustomerTypesCustomerTypeSearchResults includes the requested fields of the GraphQL type CustomerTypeSearchResults.
type listCustomerTypesCustomerTypesCustomerTypeSearchResults struct {
	Results    []listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType `json:"results"`
	Pagination listCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination            `json:"pagination"`
}

// GetResults returns listCustomerTypesCustomerTypesCustomerTypeSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResults) GetResults() []listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType {
	return v.Results
}

// GetPagination returns listCustomerTypesCustomerTypesCustomerTypeSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResults) GetPagination() listCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination {
	return v.Pagination
}

// listCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination) __premarshalJSON() (*__premarshallistCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination, error) {
	var retval __premarshallistCustomerTypesCustomerTypesCustomerTypeSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType includes the requested fields of the GraphQL type CustomerType.
type listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType struct {
	DefaultCustomerType `json:"-"`
}

// GetId returns listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType.Id, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType) GetId() string {
	return v.DefaultCustomerType.Id
}

// GetCreatedAt returns listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType.CreatedAt, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType) GetCreatedAt() *string {
	return v.DefaultCustomerType.CreatedAt
}

// GetUpdatedAt returns listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType) GetUpdatedAt() *string {
	return v.DefaultCustomerType.UpdatedAt
}

// GetDeletedAt returns listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType.DeletedAt, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType) GetDeletedAt() *string {
	return v.DefaultCustomerType.DeletedAt
}

// GetToken returns listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType.Token, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType) GetToken() string {
	return v.DefaultCustomerType.Token
}

// GetName returns listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType.Name, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType) GetName() *string {
	return v.DefaultCustomerType.Name
}

// GetDescription returns listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType.Description, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType) GetDescription() *string {
	return v.DefaultCustomerType.Description
}

// GetImageUrl returns listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType.ImageUrl, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType) GetImageUrl() *string {
	return v.DefaultCustomerType.ImageUrl
}

// GetIcon returns listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType.Icon, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType) GetIcon() *string {
	return v.DefaultCustomerType.Icon
}

// GetBackgroundColor returns listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType.BackgroundColor, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType) GetBackgroundColor() *string {
	return v.DefaultCustomerType.BackgroundColor
}

// GetForegroundColor returns listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType.ForegroundColor, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType) GetForegroundColor() *string {
	return v.DefaultCustomerType.ForegroundColor
}

// GetBorderColor returns listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType.BorderColor, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType) GetBorderColor() *string {
	return v.DefaultCustomerType.BorderColor
}

// GetMetadata returns listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType.Metadata, and is useful for accessing the field via an interface.
func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType) GetMetadata() *string {
	return v.DefaultCustomerType.Metadata
}

func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType
		graphql.NoUnmarshalJSON
	}
	firstPass.listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomerType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType) __premarshalJSON() (*__premarshallistCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType, error) {
	var retval __premarshallistCustomerTypesCustomerTypesCustomerTypeSearchResultsResultsCustomerType

	retval.Id = v.DefaultCustomerType.Id
	retval.CreatedAt = v.DefaultCustomerType.CreatedAt
	retval.UpdatedAt = v.DefaultCustomerType.UpdatedAt
	retval.DeletedAt = v.DefaultCustomerType.DeletedAt
	retval.Token = v.DefaultCustomerType.Token
	retval.Name = v.DefaultCustomerType.Name
	retval.Description = v.DefaultCustomerType.Description
	retval.ImageUrl = v.DefaultCustomerType.ImageUrl
	retval.Icon = v.DefaultCustomerType.Icon
	retval.BackgroundColor = v.DefaultCustomerType.BackgroundColor
	retval.ForegroundColor = v.DefaultCustomerType.ForegroundColor
	retval.BorderColor = v.DefaultCustomerType.BorderColor
	retval.Metadata = v.DefaultCustomerType.Metadata
	return &retval, nil
}

// listCustomerTypesResponse is returned by listCustomerTypes on success.
type listCustomerTypesResponse struct {
	CustomerTypes listCustomerTypesCustomerTypesCustomerTypeSearchResults `json:"customerTypes"`
}

// GetCustomerTypes returns listCustomerTypesResponse.CustomerTypes, and is useful for accessing the field via an interface.
func (v *listCustomerTypesResponse) GetCustomerTypes() listCustomerTypesCustomerTypesCustomerTypeSearchResults {
	return v.CustomerTypes
}

// listCustomersCustomersCustomerSearchResults includes the requested fields of the GraphQL type CustomerSearchResults.
type listCustomersCustomersCustomerSearchResults struct {
	Results    []listCustomersCustomersCustomerSearchResultsResultsCustomer `json:"results"`
	Pagination listCustomersCustomersCustomerSearchResultsPagination        `json:"pagination"`
}

// GetResults returns listCustomersCustomersCustomerSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listCustomersCustomersCustomerSearchResults) GetResults() []listCustomersCustomersCustomerSearchResultsResultsCustomer {
	return v.Results
}

// GetPagination returns listCustomersCustomersCustomerSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listCustomersCustomersCustomerSearchResults) GetPagination() listCustomersCustomersCustomerSearchResultsPagination {
	return v.Pagination
}

// listCustomersCustomersCustomerSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listCustomersCustomersCustomerSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listCustomersCustomersCustomerSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listCustomersCustomersCustomerSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listCustomersCustomersCustomerSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listCustomersCustomersCustomerSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listCustomersCustomersCustomerSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listCustomersCustomersCustomerSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listCustomersCustomersCustomerSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listCustomersCustomersCustomerSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listCustomersCustomersCustomerSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistCustomersCustomersCustomerSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listCustomersCustomersCustomerSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listCustomersCustomersCustomerSearchResultsPagination) __premarshalJSON() (*__premarshallistCustomersCustomersCustomerSearchResultsPagination, error) {
	var retval __premarshallistCustomersCustomersCustomerSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listCustomersCustomersCustomerSearchResultsResultsCustomer includes the requested fields of the GraphQL type Customer.
type listCustomersCustomersCustomerSearchResultsResultsCustomer struct {
	DefaultCustomer `json:"-"`
}

// GetId returns listCustomersCustomersCustomerSearchResultsResultsCustomer.Id, and is useful for accessing the field via an interface.
func (v *listCustomersCustomersCustomerSearchResultsResultsCustomer) GetId() string {
	return v.DefaultCustomer.Id
}

// GetCreatedAt returns listCustomersCustomersCustomerSearchResultsResultsCustomer.CreatedAt, and is useful for accessing the field via an interface.
func (v *listCustomersCustomersCustomerSearchResultsResultsCustomer) GetCreatedAt() *string {
	return v.DefaultCustomer.CreatedAt
}

// GetUpdatedAt returns listCustomersCustomersCustomerSearchResultsResultsCustomer.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listCustomersCustomersCustomerSearchResultsResultsCustomer) GetUpdatedAt() *string {
	return v.DefaultCustomer.UpdatedAt
}

// GetDeletedAt returns listCustomersCustomersCustomerSearchResultsResultsCustomer.DeletedAt, and is useful for accessing the field via an interface.
func (v *listCustomersCustomersCustomerSearchResultsResultsCustomer) GetDeletedAt() *string {
	return v.DefaultCustomer.DeletedAt
}

// GetToken returns listCustomersCustomersCustomerSearchResultsResultsCustomer.Token, and is useful for accessing the field via an interface.
func (v *listCustomersCustomersCustomerSearchResultsResultsCustomer) GetToken() string {
	return v.DefaultCustomer.Token
}

// GetName returns listCustomersCustomersCustomerSearchResultsResultsCustomer.Name, and is useful for accessing the field via an interface.
func (v *listCustomersCustomersCustomerSearchResultsResultsCustomer) GetName() *string {
	return v.DefaultCustomer.Name
}

// GetDescription returns listCustomersCustomersCustomerSearchResultsResultsCustomer.Description, and is useful for accessing the field via an interface.
func (v *listCustomersCustomersCustomerSearchResultsResultsCustomer) GetDescription() *string {
	return v.DefaultCustomer.Description
}

// GetCustomerType returns listCustomersCustomersCustomerSearchResultsResultsCustomer.CustomerType, and is useful for accessing the field via an interface.
func (v *listCustomersCustomersCustomerSearchResultsResultsCustomer) GetCustomerType() DefaultCustomerCustomerType {
	return v.DefaultCustomer.CustomerType
}

// GetMetadata returns listCustomersCustomersCustomerSearchResultsResultsCustomer.Metadata, and is useful for accessing the field via an interface.
func (v *listCustomersCustomersCustomerSearchResultsResultsCustomer) GetMetadata() *string {
	return v.DefaultCustomer.Metadata
}

func (v *listCustomersCustomersCustomerSearchResultsResultsCustomer) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listCustomersCustomersCustomerSearchResultsResultsCustomer
		graphql.NoUnmarshalJSON
	}
	firstPass.listCustomersCustomersCustomerSearchResultsResultsCustomer = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultCustomer)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistCustomersCustomersCustomerSearchResultsResultsCustomer struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	CustomerType DefaultCustomerCustomerType `json:"customerType"`

	Metadata *string `json:"metadata"`
}

func (v *listCustomersCustomersCustomerSearchResultsResultsCustomer) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listCustomersCustomersCustomerSearchResultsResultsCustomer) __premarshalJSON() (*__premarshallistCustomersCustomersCustomerSearchResultsResultsCustomer, error) {
	var retval __premarshallistCustomersCustomersCustomerSearchResultsResultsCustomer

	retval.Id = v.DefaultCustomer.Id
	retval.CreatedAt = v.DefaultCustomer.CreatedAt
	retval.UpdatedAt = v.DefaultCustomer.UpdatedAt
	retval.DeletedAt = v.DefaultCustomer.DeletedAt
	retval.Token = v.DefaultCustomer.Token
	retval.Name = v.DefaultCustomer.Name
	retval.Description = v.DefaultCustomer.Description
	retval.CustomerType = v.DefaultCustomer.CustomerType
	retval.Metadata = v.DefaultCustomer.Metadata
	return &retval, nil
}

// listCustomersResponse is returned by listCustomers on success.
type listCustomersResponse struct {
	Customers listCustomersCustomersCustomerSearchResults `json:"customers"`
}

// GetCustomers returns listCustomersResponse.Customers, and is useful for accessing the field via an interface.
func (v *listCustomersResponse) GetCustomers() listCustomersCustomersCustomerSearchResults {
	return v.Customers
}

// listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResults includes the requested fields of the GraphQL type DeviceGroupRelationshipTypeSearchResults.
type listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResults struct {
	Results    []listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType `json:"results"`
	Pagination listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination                           `json:"pagination"`
}

// GetResults returns listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResults) GetResults() []listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType {
	return v.Results
}

// GetPagination returns listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResults) GetPagination() listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination {
	return v.Pagination
}

// listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination) __premarshalJSON() (*__premarshallistDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination, error) {
	var retval __premarshallistDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType includes the requested fields of the GraphQL type DeviceGroupRelationshipType.
type listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType struct {
	DefaultDeviceGroupRelationshipType `json:"-"`
}

// GetId returns listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType) GetId() string {
	return v.DefaultDeviceGroupRelationshipType.Id
}

// GetCreatedAt returns listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType) GetCreatedAt() *string {
	return v.DefaultDeviceGroupRelationshipType.CreatedAt
}

// GetUpdatedAt returns listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType) GetUpdatedAt() *string {
	return v.DefaultDeviceGroupRelationshipType.UpdatedAt
}

// GetDeletedAt returns listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType) GetDeletedAt() *string {
	return v.DefaultDeviceGroupRelationshipType.DeletedAt
}

// GetToken returns listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType) GetToken() string {
	return v.DefaultDeviceGroupRelationshipType.Token
}

// GetName returns listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType) GetName() *string {
	return v.DefaultDeviceGroupRelationshipType.Name
}

// GetDescription returns listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType) GetDescription() *string {
	return v.DefaultDeviceGroupRelationshipType.Description
}

// GetMetadata returns listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType) GetMetadata() *string {
	return v.DefaultDeviceGroupRelationshipType.Metadata
}

func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceGroupRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`
}

func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType) __premarshalJSON() (*__premarshallistDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType, error) {
	var retval __premarshallistDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResultsResultsDeviceGroupRelationshipType

	retval.Id = v.DefaultDeviceGroupRelationshipType.Id
	retval.CreatedAt = v.DefaultDeviceGroupRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceGroupRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceGroupRelationshipType.DeletedAt
	retval.Token = v.DefaultDeviceGroupRelationshipType.Token
	retval.Name = v.DefaultDeviceGroupRelationshipType.Name
	retval.Description = v.DefaultDeviceGroupRelationshipType.Description
	retval.Metadata = v.DefaultDeviceGroupRelationshipType.Metadata
	return &retval, nil
}

// listDeviceGroupRelationshipTypesResponse is returned by listDeviceGroupRelationshipTypes on success.
type listDeviceGroupRelationshipTypesResponse struct {
	DeviceGroupRelationshipTypes listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResults `json:"deviceGroupRelationshipTypes"`
}

// GetDeviceGroupRelationshipTypes returns listDeviceGroupRelationshipTypesResponse.DeviceGroupRelationshipTypes, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipTypesResponse) GetDeviceGroupRelationshipTypes() listDeviceGroupRelationshipTypesDeviceGroupRelationshipTypesDeviceGroupRelationshipTypeSearchResults {
	return v.DeviceGroupRelationshipTypes
}

// listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResults includes the requested fields of the GraphQL type DeviceGroupRelationshipSearchResults.
type listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResults struct {
	Results    []listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship `json:"results"`
	Pagination listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination                       `json:"pagination"`
}

// GetResults returns listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResults) GetResults() []listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship {
	return v.Results
}

// GetPagination returns listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResults) GetPagination() listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination {
	return v.Pagination
}

// listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination) __premarshalJSON() (*__premarshallistDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination, error) {
	var retval __premarshallistDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship includes the requested fields of the GraphQL type DeviceGroupRelationship.
type listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship struct {
	DefaultDeviceGroupRelationship `json:"-"`
}

// GetId returns listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship.Id, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship) GetId() string {
	return v.DefaultDeviceGroupRelationship.Id
}

// GetCreatedAt returns listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship) GetCreatedAt() *string {
	return v.DefaultDeviceGroupRelationship.CreatedAt
}

// GetUpdatedAt returns listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship) GetUpdatedAt() *string {
	return v.DefaultDeviceGroupRelationship.UpdatedAt
}

// GetDeletedAt returns listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship) GetDeletedAt() *string {
	return v.DefaultDeviceGroupRelationship.DeletedAt
}

// GetToken returns listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship.Token, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship) GetToken() string {
	return v.DefaultDeviceGroupRelationship.Token
}

// GetSourceDeviceGroup returns listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship.SourceDeviceGroup, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship) GetSourceDeviceGroup() DefaultDeviceGroupRelationshipSourceDeviceGroup {
	return v.DefaultDeviceGroupRelationship.SourceDeviceGroup
}

// GetTargets returns listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship.Targets, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship) GetTargets() DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultDeviceGroupRelationship.Targets
}

// GetRelationshipType returns listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship) GetRelationshipType() DefaultDeviceGroupRelationshipRelationshipTypeDeviceGroupRelationshipType {
	return v.DefaultDeviceGroupRelationship.RelationshipType
}

// GetMetadata returns listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship) GetMetadata() *string {
	return v.DefaultDeviceGroupRelationship.Metadata
}

func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceGroupRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceDeviceGroup DefaultDeviceGroupRelationshipSourceDeviceGroup `json:"sourceDeviceGroup"`

	Targets DefaultDeviceGroupRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultDeviceGroupRelationshipRelationshipTypeDeviceGroupRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship) __premarshalJSON() (*__premarshallistDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship, error) {
	var retval __premarshallistDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResultsResultsDeviceGroupRelationship

	retval.Id = v.DefaultDeviceGroupRelationship.Id
	retval.CreatedAt = v.DefaultDeviceGroupRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceGroupRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceGroupRelationship.DeletedAt
	retval.Token = v.DefaultDeviceGroupRelationship.Token
	retval.SourceDeviceGroup = v.DefaultDeviceGroupRelationship.SourceDeviceGroup
	retval.Targets = v.DefaultDeviceGroupRelationship.Targets
	retval.RelationshipType = v.DefaultDeviceGroupRelationship.RelationshipType
	retval.Metadata = v.DefaultDeviceGroupRelationship.Metadata
	return &retval, nil
}

// listDeviceGroupRelationshipsResponse is returned by listDeviceGroupRelationships on success.
type listDeviceGroupRelationshipsResponse struct {
	DeviceGroupRelationships listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResults `json:"deviceGroupRelationships"`
}

// GetDeviceGroupRelationships returns listDeviceGroupRelationshipsResponse.DeviceGroupRelationships, and is useful for accessing the field via an interface.
func (v *listDeviceGroupRelationshipsResponse) GetDeviceGroupRelationships() listDeviceGroupRelationshipsDeviceGroupRelationshipsDeviceGroupRelationshipSearchResults {
	return v.DeviceGroupRelationships
}

// listDeviceGroupsDeviceGroupsDeviceGroupSearchResults includes the requested fields of the GraphQL type DeviceGroupSearchResults.
type listDeviceGroupsDeviceGroupsDeviceGroupSearchResults struct {
	Results    []listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup `json:"results"`
	Pagination listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination           `json:"pagination"`
}

// GetResults returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResults) GetResults() []listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup {
	return v.Results
}

// GetPagination returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResults) GetPagination() listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination {
	return v.Pagination
}

// listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination) __premarshalJSON() (*__premarshallistDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination, error) {
	var retval __premarshallistDeviceGroupsDeviceGroupsDeviceGroupSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup includes the requested fields of the GraphQL type DeviceGroup.
type listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup struct {
	DefaultDeviceGroup `json:"-"`
}

// GetId returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup.Id, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup) GetId() string {
	return v.DefaultDeviceGroup.Id
}

// GetCreatedAt returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup) GetCreatedAt() *string {
	return v.DefaultDeviceGroup.CreatedAt
}

// GetUpdatedAt returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup) GetUpdatedAt() *string {
	return v.DefaultDeviceGroup.UpdatedAt
}

// GetDeletedAt returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup.DeletedAt, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup) GetDeletedAt() *string {
	return v.DefaultDeviceGroup.DeletedAt
}

// GetToken returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup.Token, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup) GetToken() string {
	return v.DefaultDeviceGroup.Token
}

// GetName returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup.Name, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup) GetName() *string {
	return v.DefaultDeviceGroup.Name
}

// GetDescription returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup.Description, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup) GetDescription() *string {
	return v.DefaultDeviceGroup.Description
}

// GetImageUrl returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup.ImageUrl, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup) GetImageUrl() *string {
	return v.DefaultDeviceGroup.ImageUrl
}

// GetIcon returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup.Icon, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup) GetIcon() *string {
	return v.DefaultDeviceGroup.Icon
}

// GetBackgroundColor returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup.BackgroundColor, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup) GetBackgroundColor() *string {
	return v.DefaultDeviceGroup.BackgroundColor
}

// GetForegroundColor returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup.ForegroundColor, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup) GetForegroundColor() *string {
	return v.DefaultDeviceGroup.ForegroundColor
}

// GetBorderColor returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup.BorderColor, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup) GetBorderColor() *string {
	return v.DefaultDeviceGroup.BorderColor
}

// GetMetadata returns listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup.Metadata, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup) GetMetadata() *string {
	return v.DefaultDeviceGroup.Metadata
}

func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup
		graphql.NoUnmarshalJSON
	}
	firstPass.listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceGroup)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup) __premarshalJSON() (*__premarshallistDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup, error) {
	var retval __premarshallistDeviceGroupsDeviceGroupsDeviceGroupSearchResultsResultsDeviceGroup

	retval.Id = v.DefaultDeviceGroup.Id
	retval.CreatedAt = v.DefaultDeviceGroup.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceGroup.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceGroup.DeletedAt
	retval.Token = v.DefaultDeviceGroup.Token
	retval.Name = v.DefaultDeviceGroup.Name
	retval.Description = v.DefaultDeviceGroup.Description
	retval.ImageUrl = v.DefaultDeviceGroup.ImageUrl
	retval.Icon = v.DefaultDeviceGroup.Icon
	retval.BackgroundColor = v.DefaultDeviceGroup.BackgroundColor
	retval.ForegroundColor = v.DefaultDeviceGroup.ForegroundColor
	retval.BorderColor = v.DefaultDeviceGroup.BorderColor
	retval.Metadata = v.DefaultDeviceGroup.Metadata
	return &retval, nil
}

// listDeviceGroupsResponse is returned by listDeviceGroups on success.
type listDeviceGroupsResponse struct {
	DeviceGroups listDeviceGroupsDeviceGroupsDeviceGroupSearchResults `json:"deviceGroups"`
}

// GetDeviceGroups returns listDeviceGroupsResponse.DeviceGroups, and is useful for accessing the field via an interface.
func (v *listDeviceGroupsResponse) GetDeviceGroups() listDeviceGroupsDeviceGroupsDeviceGroupSearchResults {
	return v.DeviceGroups
}

// listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResults includes the requested fields of the GraphQL type DeviceRelationshipTypeSearchResults.
type listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResults struct {
	Results    []listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType `json:"results"`
	Pagination listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination                      `json:"pagination"`
}

// GetResults returns listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResults) GetResults() []listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType {
	return v.Results
}

// GetPagination returns listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResults) GetPagination() listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination {
	return v.Pagination
}

// listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination) __premarshalJSON() (*__premarshallistDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination, error) {
	var retval __premarshallistDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType includes the requested fields of the GraphQL type DeviceRelationshipType.
type listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType struct {
	DefaultDeviceRelationshipType `json:"-"`
}

// GetId returns listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType.Id, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType) GetId() string {
	return v.DefaultDeviceRelationshipType.Id
}

// GetCreatedAt returns listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType.CreatedAt, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType) GetCreatedAt() *string {
	return v.DefaultDeviceRelationshipType.CreatedAt
}

// GetUpdatedAt returns listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType) GetUpdatedAt() *string {
	return v.DefaultDeviceRelationshipType.UpdatedAt
}

// GetDeletedAt returns listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType.DeletedAt, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType) GetDeletedAt() *string {
	return v.DefaultDeviceRelationshipType.DeletedAt
}

// GetToken returns listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType.Token, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType) GetToken() string {
	return v.DefaultDeviceRelationshipType.Token
}

// GetName returns listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType.Name, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType) GetName() *string {
	return v.DefaultDeviceRelationshipType.Name
}

// GetDescription returns listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType.Description, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType) GetDescription() *string {
	return v.DefaultDeviceRelationshipType.Description
}

// GetMetadata returns listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType.Metadata, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType) GetMetadata() *string {
	return v.DefaultDeviceRelationshipType.Metadata
}

// GetTracked returns listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType.Tracked, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType) GetTracked() bool {
	return v.DefaultDeviceRelationshipType.Tracked
}

func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType
		graphql.NoUnmarshalJSON
	}
	firstPass.listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceRelationshipType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Metadata *string `json:"metadata"`

	Tracked bool `json:"tracked"`
}

func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType) __premarshalJSON() (*__premarshallistDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType, error) {
	var retval __premarshallistDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResultsResultsDeviceRelationshipType

	retval.Id = v.DefaultDeviceRelationshipType.Id
	retval.CreatedAt = v.DefaultDeviceRelationshipType.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceRelationshipType.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceRelationshipType.DeletedAt
	retval.Token = v.DefaultDeviceRelationshipType.Token
	retval.Name = v.DefaultDeviceRelationshipType.Name
	retval.Description = v.DefaultDeviceRelationshipType.Description
	retval.Metadata = v.DefaultDeviceRelationshipType.Metadata
	retval.Tracked = v.DefaultDeviceRelationshipType.Tracked
	return &retval, nil
}

// listDeviceRelationshipTypesResponse is returned by listDeviceRelationshipTypes on success.
type listDeviceRelationshipTypesResponse struct {
	DeviceRelationshipTypes listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResults `json:"deviceRelationshipTypes"`
}

// GetDeviceRelationshipTypes returns listDeviceRelationshipTypesResponse.DeviceRelationshipTypes, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipTypesResponse) GetDeviceRelationshipTypes() listDeviceRelationshipTypesDeviceRelationshipTypesDeviceRelationshipTypeSearchResults {
	return v.DeviceRelationshipTypes
}

// listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResults includes the requested fields of the GraphQL type DeviceRelationshipSearchResults.
type listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResults struct {
	Results    []listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship `json:"results"`
	Pagination listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination                  `json:"pagination"`
}

// GetResults returns listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResults) GetResults() []listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship {
	return v.Results
}

// GetPagination returns listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResults) GetPagination() listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination {
	return v.Pagination
}

// listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination) __premarshalJSON() (*__premarshallistDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination, error) {
	var retval __premarshallistDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship includes the requested fields of the GraphQL type DeviceRelationship.
type listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship struct {
	DefaultDeviceRelationship `json:"-"`
}

// GetId returns listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship.Id, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship) GetId() string {
	return v.DefaultDeviceRelationship.Id
}

// GetCreatedAt returns listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship.CreatedAt, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship) GetCreatedAt() *string {
	return v.DefaultDeviceRelationship.CreatedAt
}

// GetUpdatedAt returns listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship) GetUpdatedAt() *string {
	return v.DefaultDeviceRelationship.UpdatedAt
}

// GetDeletedAt returns listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship.DeletedAt, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship) GetDeletedAt() *string {
	return v.DefaultDeviceRelationship.DeletedAt
}

// GetToken returns listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship.Token, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship) GetToken() string {
	return v.DefaultDeviceRelationship.Token
}

// GetSourceDevice returns listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship.SourceDevice, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship) GetSourceDevice() DefaultDeviceRelationshipSourceDevice {
	return v.DefaultDeviceRelationship.SourceDevice
}

// GetTargets returns listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship.Targets, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship) GetTargets() DefaultDeviceRelationshipTargetsEntityRelationshipTargets {
	return v.DefaultDeviceRelationship.Targets
}

// GetRelationshipType returns listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship.RelationshipType, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship) GetRelationshipType() DefaultDeviceRelationshipRelationshipTypeDeviceRelationshipType {
	return v.DefaultDeviceRelationship.RelationshipType
}

// GetMetadata returns listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship.Metadata, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship) GetMetadata() *string {
	return v.DefaultDeviceRelationship.Metadata
}

func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship
		graphql.NoUnmarshalJSON
	}
	firstPass.listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceRelationship)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	SourceDevice DefaultDeviceRelationshipSourceDevice `json:"sourceDevice"`

	Targets DefaultDeviceRelationshipTargetsEntityRelationshipTargets `json:"targets"`

	RelationshipType DefaultDeviceRelationshipRelationshipTypeDeviceRelationshipType `json:"relationshipType"`

	Metadata *string `json:"metadata"`
}

func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship) __premarshalJSON() (*__premarshallistDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship, error) {
	var retval __premarshallistDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResultsResultsDeviceRelationship

	retval.Id = v.DefaultDeviceRelationship.Id
	retval.CreatedAt = v.DefaultDeviceRelationship.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceRelationship.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceRelationship.DeletedAt
	retval.Token = v.DefaultDeviceRelationship.Token
	retval.SourceDevice = v.DefaultDeviceRelationship.SourceDevice
	retval.Targets = v.DefaultDeviceRelationship.Targets
	retval.RelationshipType = v.DefaultDeviceRelationship.RelationshipType
	retval.Metadata = v.DefaultDeviceRelationship.Metadata
	return &retval, nil
}

// listDeviceRelationshipsResponse is returned by listDeviceRelationships on success.
type listDeviceRelationshipsResponse struct {
	DeviceRelationships listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResults `json:"deviceRelationships"`
}

// GetDeviceRelationships returns listDeviceRelationshipsResponse.DeviceRelationships, and is useful for accessing the field via an interface.
func (v *listDeviceRelationshipsResponse) GetDeviceRelationships() listDeviceRelationshipsDeviceRelationshipsDeviceRelationshipSearchResults {
	return v.DeviceRelationships
}

// listDeviceTypesDeviceTypesDeviceTypeSearchResults includes the requested fields of the GraphQL type DeviceTypeSearchResults.
type listDeviceTypesDeviceTypesDeviceTypeSearchResults struct {
	Results    []listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType `json:"results"`
	Pagination listDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination          `json:"pagination"`
}

// GetResults returns listDeviceTypesDeviceTypesDeviceTypeSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResults) GetResults() []listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType {
	return v.Results
}

// GetPagination returns listDeviceTypesDeviceTypesDeviceTypeSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResults) GetPagination() listDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination {
	return v.Pagination
}

// listDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination) __premarshalJSON() (*__premarshallistDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination, error) {
	var retval __premarshallistDeviceTypesDeviceTypesDeviceTypeSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType includes the requested fields of the GraphQL type DeviceType.
type listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType struct {
	DefaultDeviceType `json:"-"`
}

// GetId returns listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType.Id, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType) GetId() string {
	return v.DefaultDeviceType.Id
}

// GetCreatedAt returns listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType.CreatedAt, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType) GetCreatedAt() *string {
	return v.DefaultDeviceType.CreatedAt
}

// GetUpdatedAt returns listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType) GetUpdatedAt() *string {
	return v.DefaultDeviceType.UpdatedAt
}

// GetDeletedAt returns listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType.DeletedAt, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType) GetDeletedAt() *string {
	return v.DefaultDeviceType.DeletedAt
}

// GetToken returns listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType.Token, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType) GetToken() string {
	return v.DefaultDeviceType.Token
}

// GetName returns listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType.Name, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType) GetName() *string {
	return v.DefaultDeviceType.Name
}

// GetDescription returns listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType.Description, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType) GetDescription() *string {
	return v.DefaultDeviceType.Description
}

// GetImageUrl returns listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType.ImageUrl, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType) GetImageUrl() *string {
	return v.DefaultDeviceType.ImageUrl
}

// GetIcon returns listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType.Icon, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType) GetIcon() *string {
	return v.DefaultDeviceType.Icon
}

// GetBackgroundColor returns listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType.BackgroundColor, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType) GetBackgroundColor() *string {
	return v.DefaultDeviceType.BackgroundColor
}

// GetForegroundColor returns listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType.ForegroundColor, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType) GetForegroundColor() *string {
	return v.DefaultDeviceType.ForegroundColor
}

// GetBorderColor returns listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType.BorderColor, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType) GetBorderColor() *string {
	return v.DefaultDeviceType.BorderColor
}

// GetMetadata returns listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType.Metadata, and is useful for accessing the field via an interface.
func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType) GetMetadata() *string {
	return v.DefaultDeviceType.Metadata
}

func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType
		graphql.NoUnmarshalJSON
	}
	firstPass.listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDeviceType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ImageUrl *string `json:"imageUrl"`

	Icon *string `json:"icon"`

	BackgroundColor *string `json:"backgroundColor"`

	ForegroundColor *string `json:"foregroundColor"`

	BorderColor *string `json:"borderColor"`

	Metadata *string `json:"metadata"`
}

func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType) __premarshalJSON() (*__premarshallistDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType, error) {
	var retval __premarshallistDeviceTypesDeviceTypesDeviceTypeSearchResultsResultsDeviceType

	retval.Id = v.DefaultDeviceType.Id
	retval.CreatedAt = v.DefaultDeviceType.CreatedAt
	retval.UpdatedAt = v.DefaultDeviceType.UpdatedAt
	retval.DeletedAt = v.DefaultDeviceType.DeletedAt
	retval.Token = v.DefaultDeviceType.Token
	retval.Name = v.DefaultDeviceType.Name
	retval.Description = v.DefaultDeviceType.Description
	retval.ImageUrl = v.DefaultDeviceType.ImageUrl
	retval.Icon = v.DefaultDeviceType.Icon
	retval.BackgroundColor = v.DefaultDeviceType.BackgroundColor
	retval.ForegroundColor = v.DefaultDeviceType.ForegroundColor
	retval.BorderColor = v.DefaultDeviceType.BorderColor
	retval.Metadata = v.DefaultDeviceType.Metadata
	return &retval, nil
}

// listDeviceTypesResponse is returned by listDeviceTypes on success.
type listDeviceTypesResponse struct {
	DeviceTypes listDeviceTypesDeviceTypesDeviceTypeSearchResults `json:"deviceTypes"`
}

// GetDeviceTypes returns listDeviceTypesResponse.DeviceTypes, and is useful for accessing the field via an interface.
func (v *listDeviceTypesResponse) GetDeviceTypes() listDeviceTypesDeviceTypesDeviceTypeSearchResults {
	return v.DeviceTypes
}

// listDevicesDevicesDeviceSearchResults includes the requested fields of the GraphQL type DeviceSearchResults.
type listDevicesDevicesDeviceSearchResults struct {
	Results    []listDevicesDevicesDeviceSearchResultsResultsDevice `json:"results"`
	Pagination listDevicesDevicesDeviceSearchResultsPagination      `json:"pagination"`
}

// GetResults returns listDevicesDevicesDeviceSearchResults.Results, and is useful for accessing the field via an interface.
func (v *listDevicesDevicesDeviceSearchResults) GetResults() []listDevicesDevicesDeviceSearchResultsResultsDevice {
	return v.Results
}

// GetPagination returns listDevicesDevicesDeviceSearchResults.Pagination, and is useful for accessing the field via an interface.
func (v *listDevicesDevicesDeviceSearchResults) GetPagination() listDevicesDevicesDeviceSearchResultsPagination {
	return v.Pagination
}

// listDevicesDevicesDeviceSearchResultsPagination includes the requested fields of the GraphQL type SearchResultsPagination.
type listDevicesDevicesDeviceSearchResultsPagination struct {
	DefaultPagination `json:"-"`
}

// GetPageStart returns listDevicesDevicesDeviceSearchResultsPagination.PageStart, and is useful for accessing the field via an interface.
func (v *listDevicesDevicesDeviceSearchResultsPagination) GetPageStart() *int {
	return v.DefaultPagination.PageStart
}

// GetPageEnd returns listDevicesDevicesDeviceSearchResultsPagination.PageEnd, and is useful for accessing the field via an interface.
func (v *listDevicesDevicesDeviceSearchResultsPagination) GetPageEnd() *int {
	return v.DefaultPagination.PageEnd
}

// GetTotalRecords returns listDevicesDevicesDeviceSearchResultsPagination.TotalRecords, and is useful for accessing the field via an interface.
func (v *listDevicesDevicesDeviceSearchResultsPagination) GetTotalRecords() *int {
	return v.DefaultPagination.TotalRecords
}

func (v *listDevicesDevicesDeviceSearchResultsPagination) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listDevicesDevicesDeviceSearchResultsPagination
		graphql.NoUnmarshalJSON
	}
	firstPass.listDevicesDevicesDeviceSearchResultsPagination = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultPagination)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistDevicesDevicesDeviceSearchResultsPagination struct {
	PageStart *int `json:"pageStart"`

	PageEnd *int `json:"pageEnd"`

	TotalRecords *int `json:"totalRecords"`
}

func (v *listDevicesDevicesDeviceSearchResultsPagination) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listDevicesDevicesDeviceSearchResultsPagination) __premarshalJSON() (*__premarshallistDevicesDevicesDeviceSearchResultsPagination, error) {
	var retval __premarshallistDevicesDevicesDeviceSearchResultsPagination

	retval.PageStart = v.DefaultPagination.PageStart
	retval.PageEnd = v.DefaultPagination.PageEnd
	retval.TotalRecords = v.DefaultPagination.TotalRecords
	return &retval, nil
}

// listDevicesDevicesDeviceSearchResultsResultsDevice includes the requested fields of the GraphQL type Device.
type listDevicesDevicesDeviceSearchResultsResultsDevice struct {
	DefaultDevice `json:"-"`
}

// GetId returns listDevicesDevicesDeviceSearchResultsResultsDevice.Id, and is useful for accessing the field via an interface.
func (v *listDevicesDevicesDeviceSearchResultsResultsDevice) GetId() string {
	return v.DefaultDevice.Id
}

// GetCreatedAt returns listDevicesDevicesDeviceSearchResultsResultsDevice.CreatedAt, and is useful for accessing the field via an interface.
func (v *listDevicesDevicesDeviceSearchResultsResultsDevice) GetCreatedAt() *string {
	return v.DefaultDevice.CreatedAt
}

// GetUpdatedAt returns listDevicesDevicesDeviceSearchResultsResultsDevice.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listDevicesDevicesDeviceSearchResultsResultsDevice) GetUpdatedAt() *string {
	return v.DefaultDevice.UpdatedAt
}

// GetDeletedAt returns listDevicesDevicesDeviceSearchResultsResultsDevice.DeletedAt, and is useful for accessing the field via an interface.
func (v *listDevicesDevicesDeviceSearchResultsResultsDevice) GetDeletedAt() *string {
	return v.DefaultDevice.DeletedAt
}

// GetToken returns listDevicesDevicesDeviceSearchResultsResultsDevice.Token, and is useful for accessing the field via an interface.
func (v *listDevicesDevicesDeviceSearchResultsResultsDevice) GetToken() string {
	return v.DefaultDevice.Token
}

// GetName returns listDevicesDevicesDeviceSearchResultsResultsDevice.Name, and is useful for accessing the field via an interface.
func (v *listDevicesDevicesDeviceSearchResultsResultsDevice) GetName() *string {
	return v.DefaultDevice.Name
}

// GetDescription returns listDevicesDevicesDeviceSearchResultsResultsDevice.Description, and is useful for accessing the field via an interface.
func (v *listDevicesDevicesDeviceSearchResultsResultsDevice) GetDescription() *string {
	return v.DefaultDevice.Description
}

// GetDeviceType returns listDevicesDevicesDeviceSearchResultsResultsDevice.DeviceType, and is useful for accessing the field via an interface.
func (v *listDevicesDevicesDeviceSearchResultsResultsDevice) GetDeviceType() DefaultDeviceDeviceType {
	return v.DefaultDevice.DeviceType
}

// GetMetadata returns listDevicesDevicesDeviceSearchResultsResultsDevice.Metadata, and is useful for accessing the field via an interface.
func (v *listDevicesDevicesDeviceSearchResultsResultsDevice) GetMetadata() *string {
	return v.DefaultDevice.Metadata
}

func (v *listDevicesDevicesDeviceSearchResultsResultsDevice) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listDevicesDevicesDeviceSearchResultsResultsDevice
		graphql.NoUnmarshalJSON
	}
	firstPass.listDevicesDevicesDeviceSearchResultsResultsDevice = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DefaultDevice)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallistDevicesDevicesDeviceSearchResultsResultsDevice struct {
	Id string `json:"id"`

	CreatedAt *string `json:"createdAt"`

	UpdatedAt *string `json:"updatedAt"`

	DeletedAt *string `json:"deletedAt"`

	Token string `json:"token"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	DeviceType DefaultDeviceDeviceType `json:"deviceType"`

	Metadata *string `json:"metadata"`
}

func (v *listDevicesDevicesDeviceSearchResultsResultsDevice) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listDevicesDevicesDeviceSearchResultsResultsDevice) __premarshalJSON() (*__premarshallistDevicesDevicesDeviceSearchResultsResultsDevice, error) {
	var retval __premarshallistDevicesDevicesDeviceSearchResultsResultsDevice

	retval.Id = v.DefaultDevice.Id
	retval.CreatedAt = v.DefaultDevice.CreatedAt
	retval.UpdatedAt = v.DefaultDevice.UpdatedAt
	retval.DeletedAt = v.DefaultDevice.DeletedAt
	retval.Token = v.DefaultDevice.Token
	retval.Name = v.DefaultDevice.Name
	retval.Description = v.DefaultDevice.Description
	retval.DeviceType = v.DefaultDevice.DeviceType
	retval.Metadata = v.DefaultDevice.Metadata
	return &retval, nil
}

// listDevicesResponse is returned by listDevices on success.
type listDevicesResponse struct {
	Devices listDevicesDevicesDeviceSearchResults `json:"devices"`
}

// GetDevices returns listDevicesResponse.Devices, and is useful for accessing the field via an interface.
func (v *listDevicesResponse) GetDevices() listDevicesDevicesDeviceSearchResults { return v.Devices }

// Create area and return identifiers.
func createArea(
	ctx context.Context,
	client graphql.Client,
	token string,
	areaTypeToken string,
	name *string,
	description *string,
	metadata *string,
) (*createAreaResponse, error) {
	req := &graphql.Request{
		OpName: "createArea",
		Query: `
mutation createArea ($token: String!, $areaTypeToken: String!, $name: String, $description: String, $metadata: String) {
	createArea(request: {token:$token,areaTypeToken:$areaTypeToken,name:$name,description:$description,metadata:$metadata}) {
		... DefaultArea
	}
}
fragment DefaultArea on Area {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	areaType {
		token
		name
		description
	}
	metadata
}
`,
		Variables: &__createAreaInput{
			Token:         token,
			AreaTypeToken: areaTypeToken,
			Name:          name,
			Description:   description,
			Metadata:      metadata,
		},
	}
	var err error

	var data createAreaResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create area group and return identifiers.
func createAreaGroup(
	ctx context.Context,
	client graphql.Client,
	token string,
	name *string,
	description *string,
	imageUrl *string,
	icon *string,
	backgroundColor *string,
	foregroundColor *string,
	borderColor *string,
	metadata *string,
) (*createAreaGroupResponse, error) {
	req := &graphql.Request{
		OpName: "createAreaGroup",
		Query: `
mutation createAreaGroup ($token: String!, $name: String, $description: String, $imageUrl: String, $icon: String, $backgroundColor: String, $foregroundColor: String, $borderColor: String, $metadata: String) {
	createAreaGroup(request: {token:$token,name:$name,description:$description,imageUrl:$imageUrl,icon:$icon,backgroundColor:$backgroundColor,foregroundColor:$foregroundColor,borderColor:$borderColor,metadata:$metadata}) {
		... DefaultAreaGroup
	}
}
fragment DefaultAreaGroup on AreaGroup {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
`,
		Variables: &__createAreaGroupInput{
			Token:           token,
			Name:            name,
			Description:     description,
			ImageUrl:        imageUrl,
			Icon:            icon,
			BackgroundColor: backgroundColor,
			ForegroundColor: foregroundColor,
			BorderColor:     borderColor,
			Metadata:        metadata,
		},
	}
	var err error

	var data createAreaGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create area group relationship and return identifiers.
func createAreaGroupRelationship(
	ctx context.Context,
	client graphql.Client,
	token string,
	areaGroup string,
	targets EntityRelationshipTargetsCreateRequest,
	relationshipType string,
) (*createAreaGroupRelationshipResponse, error) {
	req := &graphql.Request{
		OpName: "createAreaGroupRelationship",
		Query: `
mutation createAreaGroupRelationship ($token: String!, $areaGroup: String!, $targets: EntityRelationshipTargetsCreateRequest!, $relationshipType: String!) {
	createAreaGroupRelationship(request: {token:$token,sourceAreaGroup:$areaGroup,targets:$targets,relationshipType:$relationshipType}) {
		... DefaultAreaGroupRelationship
	}
}
fragment DefaultAreaGroupRelationship on AreaGroupRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceAreaGroup {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__createAreaGroupRelationshipInput{
			Token:            token,
			AreaGroup:        areaGroup,
			Targets:          targets,
			RelationshipType: relationshipType,
		},
	}
	var err error

	var data createAreaGroupRelationshipResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create area group relationship type and return identifiers.
func createAreaGroupRelationshipType(
	ctx context.Context,
	client graphql.Client,
	token string,
	name *string,
	description *string,
	metadata *string,
) (*createAreaGroupRelationshipTypeResponse, error) {
	req := &graphql.Request{
		OpName: "createAreaGroupRelationshipType",
		Query: `
mutation createAreaGroupRelationshipType ($token: String!, $name: String, $description: String, $metadata: String) {
	createAreaGroupRelationshipType(request: {token:$token,name:$name,description:$description,metadata:$metadata}) {
		... DefaultAreaGroupRelationshipType
	}
}
fragment DefaultAreaGroupRelationshipType on AreaGroupRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
`,
		Variables: &__createAreaGroupRelationshipTypeInput{
			Token:       token,
			Name:        name,
			Description: description,
			Metadata:    metadata,
		},
	}
	var err error

	var data createAreaGroupRelationshipTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create area relationship and return identifiers.
func createAreaRelationship(
	ctx context.Context,
	client graphql.Client,
	token string,
	sourceArea string,
	targets EntityRelationshipTargetsCreateRequest,
	relationshipType string,
) (*createAreaRelationshipResponse, error) {
	req := &graphql.Request{
		OpName: "createAreaRelationship",
		Query: `
mutation createAreaRelationship ($token: String!, $sourceArea: String!, $targets: EntityRelationshipTargetsCreateRequest!, $relationshipType: String!) {
	createAreaRelationship(request: {token:$token,sourceArea:$sourceArea,targets:$targets,relationshipType:$relationshipType}) {
		... DefaultAreaRelationship
	}
}
fragment DefaultAreaRelationship on AreaRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceArea {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__createAreaRelationshipInput{
			Token:            token,
			SourceArea:       sourceArea,
			Targets:          targets,
			RelationshipType: relationshipType,
		},
	}
	var err error

	var data createAreaRelationshipResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create area relationship type and return identifiers.
func createAreaRelationshipType(
	ctx context.Context,
	client graphql.Client,
	token string,
	name *string,
	description *string,
	metadata *string,
) (*createAreaRelationshipTypeResponse, error) {
	req := &graphql.Request{
		OpName: "createAreaRelationshipType",
		Query: `
mutation createAreaRelationshipType ($token: String!, $name: String, $description: String, $metadata: String) {
	createAreaRelationshipType(request: {token:$token,name:$name,description:$description,metadata:$metadata}) {
		... DefaultAreaRelationshipType
	}
}
fragment DefaultAreaRelationshipType on AreaRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
`,
		Variables: &__createAreaRelationshipTypeInput{
			Token:       token,
			Name:        name,
			Description: description,
			Metadata:    metadata,
		},
	}
	var err error

	var data createAreaRelationshipTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create area type and return identifiers.
func createAreaType(
	ctx context.Context,
	client graphql.Client,
	token string,
	name *string,
	description *string,
	imageUrl *string,
	icon *string,
	backgroundColor *string,
	foregroundColor *string,
	borderColor *string,
	metadata *string,
) (*createAreaTypeResponse, error) {
	req := &graphql.Request{
		OpName: "createAreaType",
		Query: `
mutation createAreaType ($token: String!, $name: String, $description: String, $imageUrl: String, $icon: String, $backgroundColor: String, $foregroundColor: String, $borderColor: String, $metadata: String) {
	createAreaType(request: {token:$token,name:$name,description:$description,imageUrl:$imageUrl,icon:$icon,backgroundColor:$backgroundColor,foregroundColor:$foregroundColor,borderColor:$borderColor,metadata:$metadata}) {
		... DefaultAreaType
	}
}
fragment DefaultAreaType on AreaType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
`,
		Variables: &__createAreaTypeInput{
			Token:           token,
			Name:            name,
			Description:     description,
			ImageUrl:        imageUrl,
			Icon:            icon,
			BackgroundColor: backgroundColor,
			ForegroundColor: foregroundColor,
			BorderColor:     borderColor,
			Metadata:        metadata,
		},
	}
	var err error

	var data createAreaTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create asset and return identifiers.
func createAsset(
	ctx context.Context,
	client graphql.Client,
	token string,
	assetTypeToken string,
	name *string,
	description *string,
	metadata *string,
) (*createAssetResponse, error) {
	req := &graphql.Request{
		OpName: "createAsset",
		Query: `
mutation createAsset ($token: String!, $assetTypeToken: String!, $name: String, $description: String, $metadata: String) {
	createAsset(request: {token:$token,assetTypeToken:$assetTypeToken,name:$name,description:$description,metadata:$metadata}) {
		... DefaultAsset
	}
}
fragment DefaultAsset on Asset {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	assetType {
		token
		name
		description
	}
	metadata
}
`,
		Variables: &__createAssetInput{
			Token:          token,
			AssetTypeToken: assetTypeToken,
			Name:           name,
			Description:    description,
			Metadata:       metadata,
		},
	}
	var err error

	var data createAssetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create asset group and return identifiers.
func createAssetGroup(
	ctx context.Context,
	client graphql.Client,
	token string,
	name *string,
	description *string,
	imageUrl *string,
	icon *string,
	backgroundColor *string,
	foregroundColor *string,
	borderColor *string,
	metadata *string,
) (*createAssetGroupResponse, error) {
	req := &graphql.Request{
		OpName: "createAssetGroup",
		Query: `
mutation createAssetGroup ($token: String!, $name: String, $description: String, $imageUrl: String, $icon: String, $backgroundColor: String, $foregroundColor: String, $borderColor: String, $metadata: String) {
	createAssetGroup(request: {token:$token,name:$name,description:$description,imageUrl:$imageUrl,icon:$icon,backgroundColor:$backgroundColor,foregroundColor:$foregroundColor,borderColor:$borderColor,metadata:$metadata}) {
		... DefaultAssetGroup
	}
}
fragment DefaultAssetGroup on AssetGroup {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
`,
		Variables: &__createAssetGroupInput{
			Token:           token,
			Name:            name,
			Description:     description,
			ImageUrl:        imageUrl,
			Icon:            icon,
			BackgroundColor: backgroundColor,
			ForegroundColor: foregroundColor,
			BorderColor:     borderColor,
			Metadata:        metadata,
		},
	}
	var err error

	var data createAssetGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create asset group relationship and return identifiers.
func createAssetGroupRelationship(
	ctx context.Context,
	client graphql.Client,
	token string,
	assetGroup string,
	targets EntityRelationshipTargetsCreateRequest,
	relationshipType string,
) (*createAssetGroupRelationshipResponse, error) {
	req := &graphql.Request{
		OpName: "createAssetGroupRelationship",
		Query: `
mutation createAssetGroupRelationship ($token: String!, $assetGroup: String!, $targets: EntityRelationshipTargetsCreateRequest!, $relationshipType: String!) {
	createAssetGroupRelationship(request: {token:$token,sourceAssetGroup:$assetGroup,targets:$targets,relationshipType:$relationshipType}) {
		... DefaultAssetGroupRelationship
	}
}
fragment DefaultAssetGroupRelationship on AssetGroupRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceAssetGroup {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__createAssetGroupRelationshipInput{
			Token:            token,
			AssetGroup:       assetGroup,
			Targets:          targets,
			RelationshipType: relationshipType,
		},
	}
	var err error

	var data createAssetGroupRelationshipResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create asset group relationship type and return identifiers.
func createAssetGroupRelationshipType(
	ctx context.Context,
	client graphql.Client,
	token string,
	name *string,
	description *string,
	metadata *string,
) (*createAssetGroupRelationshipTypeResponse, error) {
	req := &graphql.Request{
		OpName: "createAssetGroupRelationshipType",
		Query: `
mutation createAssetGroupRelationshipType ($token: String!, $name: String, $description: String, $metadata: String) {
	createAssetGroupRelationshipType(request: {token:$token,name:$name,description:$description,metadata:$metadata}) {
		... DefaultAssetGroupRelationshipType
	}
}
fragment DefaultAssetGroupRelationshipType on AssetGroupRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
`,
		Variables: &__createAssetGroupRelationshipTypeInput{
			Token:       token,
			Name:        name,
			Description: description,
			Metadata:    metadata,
		},
	}
	var err error

	var data createAssetGroupRelationshipTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create asset relationship and return identifiers.
func createAssetRelationship(
	ctx context.Context,
	client graphql.Client,
	token string,
	sourceAsset string,
	targets EntityRelationshipTargetsCreateRequest,
	relationshipType string,
) (*createAssetRelationshipResponse, error) {
	req := &graphql.Request{
		OpName: "createAssetRelationship",
		Query: `
mutation createAssetRelationship ($token: String!, $sourceAsset: String!, $targets: EntityRelationshipTargetsCreateRequest!, $relationshipType: String!) {
	createAssetRelationship(request: {token:$token,sourceAsset:$sourceAsset,targets:$targets,relationshipType:$relationshipType}) {
		... DefaultAssetRelationship
	}
}
fragment DefaultAssetRelationship on AssetRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceAsset {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__createAssetRelationshipInput{
			Token:            token,
			SourceAsset:      sourceAsset,
			Targets:          targets,
			RelationshipType: relationshipType,
		},
	}
	var err error

	var data createAssetRelationshipResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create asset relationship type and return identifiers.
func createAssetRelationshipType(
	ctx context.Context,
	client graphql.Client,
	token string,
	name *string,
	description *string,
	metadata *string,
) (*createAssetRelationshipTypeResponse, error) {
	req := &graphql.Request{
		OpName: "createAssetRelationshipType",
		Query: `
mutation createAssetRelationshipType ($token: String!, $name: String, $description: String, $metadata: String) {
	createAssetRelationshipType(request: {token:$token,name:$name,description:$description,metadata:$metadata}) {
		... DefaultAssetRelationshipType
	}
}
fragment DefaultAssetRelationshipType on AssetRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
`,
		Variables: &__createAssetRelationshipTypeInput{
			Token:       token,
			Name:        name,
			Description: description,
			Metadata:    metadata,
		},
	}
	var err error

	var data createAssetRelationshipTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create asset type and return identifiers.
func createAssetType(
	ctx context.Context,
	client graphql.Client,
	token string,
	name *string,
	description *string,
	imageUrl *string,
	icon *string,
	backgroundColor *string,
	foregroundColor *string,
	borderColor *string,
	metadata *string,
) (*createAssetTypeResponse, error) {
	req := &graphql.Request{
		OpName: "createAssetType",
		Query: `
mutation createAssetType ($token: String!, $name: String, $description: String, $imageUrl: String, $icon: String, $backgroundColor: String, $foregroundColor: String, $borderColor: String, $metadata: String) {
	createAssetType(request: {token:$token,name:$name,description:$description,imageUrl:$imageUrl,icon:$icon,backgroundColor:$backgroundColor,foregroundColor:$foregroundColor,borderColor:$borderColor,metadata:$metadata}) {
		... DefaultAssetType
	}
}
fragment DefaultAssetType on AssetType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
`,
		Variables: &__createAssetTypeInput{
			Token:           token,
			Name:            name,
			Description:     description,
			ImageUrl:        imageUrl,
			Icon:            icon,
			BackgroundColor: backgroundColor,
			ForegroundColor: foregroundColor,
			BorderColor:     borderColor,
			Metadata:        metadata,
		},
	}
	var err error

	var data createAssetTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create customer and return identifiers.
func createCustomer(
	ctx context.Context,
	client graphql.Client,
	token string,
	customerTypeToken string,
	name *string,
	description *string,
	metadata *string,
) (*createCustomerResponse, error) {
	req := &graphql.Request{
		OpName: "createCustomer",
		Query: `
mutation createCustomer ($token: String!, $customerTypeToken: String!, $name: String, $description: String, $metadata: String) {
	createCustomer(request: {token:$token,customerTypeToken:$customerTypeToken,name:$name,description:$description,metadata:$metadata}) {
		... DefaultCustomer
	}
}
fragment DefaultCustomer on Customer {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	customerType {
		token
		name
		description
	}
	metadata
}
`,
		Variables: &__createCustomerInput{
			Token:             token,
			CustomerTypeToken: customerTypeToken,
			Name:              name,
			Description:       description,
			Metadata:          metadata,
		},
	}
	var err error

	var data createCustomerResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create customer group and return identifiers.
func createCustomerGroup(
	ctx context.Context,
	client graphql.Client,
	token string,
	name *string,
	description *string,
	imageUrl *string,
	icon *string,
	backgroundColor *string,
	foregroundColor *string,
	borderColor *string,
	metadata *string,
) (*createCustomerGroupResponse, error) {
	req := &graphql.Request{
		OpName: "createCustomerGroup",
		Query: `
mutation createCustomerGroup ($token: String!, $name: String, $description: String, $imageUrl: String, $icon: String, $backgroundColor: String, $foregroundColor: String, $borderColor: String, $metadata: String) {
	createCustomerGroup(request: {token:$token,name:$name,description:$description,imageUrl:$imageUrl,icon:$icon,backgroundColor:$backgroundColor,foregroundColor:$foregroundColor,borderColor:$borderColor,metadata:$metadata}) {
		... DefaultCustomerGroup
	}
}
fragment DefaultCustomerGroup on CustomerGroup {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
`,
		Variables: &__createCustomerGroupInput{
			Token:           token,
			Name:            name,
			Description:     description,
			ImageUrl:        imageUrl,
			Icon:            icon,
			BackgroundColor: backgroundColor,
			ForegroundColor: foregroundColor,
			BorderColor:     borderColor,
			Metadata:        metadata,
		},
	}
	var err error

	var data createCustomerGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create customer group relationship and return identifiers.
func createCustomerGroupRelationship(
	ctx context.Context,
	client graphql.Client,
	token string,
	customerGroup string,
	targets EntityRelationshipTargetsCreateRequest,
	relationshipType string,
) (*createCustomerGroupRelationshipResponse, error) {
	req := &graphql.Request{
		OpName: "createCustomerGroupRelationship",
		Query: `
mutation createCustomerGroupRelationship ($token: String!, $customerGroup: String!, $targets: EntityRelationshipTargetsCreateRequest!, $relationshipType: String!) {
	createCustomerGroupRelationship(request: {token:$token,sourceCustomerGroup:$customerGroup,targets:$targets,relationshipType:$relationshipType}) {
		... DefaultCustomerGroupRelationship
	}
}
fragment DefaultCustomerGroupRelationship on CustomerGroupRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceCustomerGroup {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__createCustomerGroupRelationshipInput{
			Token:            token,
			CustomerGroup:    customerGroup,
			Targets:          targets,
			RelationshipType: relationshipType,
		},
	}
	var err error

	var data createCustomerGroupRelationshipResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create customer group relationship type and return identifiers.
func createCustomerGroupRelationshipType(
	ctx context.Context,
	client graphql.Client,
	token string,
	name *string,
	description *string,
	metadata *string,
) (*createCustomerGroupRelationshipTypeResponse, error) {
	req := &graphql.Request{
		OpName: "createCustomerGroupRelationshipType",
		Query: `
mutation createCustomerGroupRelationshipType ($token: String!, $name: String, $description: String, $metadata: String) {
	createCustomerGroupRelationshipType(request: {token:$token,name:$name,description:$description,metadata:$metadata}) {
		... DefaultCustomerGroupRelationshipType
	}
}
fragment DefaultCustomerGroupRelationshipType on CustomerGroupRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
`,
		Variables: &__createCustomerGroupRelationshipTypeInput{
			Token:       token,
			Name:        name,
			Description: description,
			Metadata:    metadata,
		},
	}
	var err error

	var data createCustomerGroupRelationshipTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create customer relationship and return identifiers.
func createCustomerRelationship(
	ctx context.Context,
	client graphql.Client,
	token string,
	sourceCustomer string,
	targets EntityRelationshipTargetsCreateRequest,
	relationshipType string,
) (*createCustomerRelationshipResponse, error) {
	req := &graphql.Request{
		OpName: "createCustomerRelationship",
		Query: `
mutation createCustomerRelationship ($token: String!, $sourceCustomer: String!, $targets: EntityRelationshipTargetsCreateRequest!, $relationshipType: String!) {
	createCustomerRelationship(request: {token:$token,sourceCustomer:$sourceCustomer,targets:$targets,relationshipType:$relationshipType}) {
		... DefaultCustomerRelationship
	}
}
fragment DefaultCustomerRelationship on CustomerRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceCustomer {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__createCustomerRelationshipInput{
			Token:            token,
			SourceCustomer:   sourceCustomer,
			Targets:          targets,
			RelationshipType: relationshipType,
		},
	}
	var err error

	var data createCustomerRelationshipResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create customer relationship type and return identifiers.
func createCustomerRelationshipType(
	ctx context.Context,
	client graphql.Client,
	token string,
	name *string,
	description *string,
	metadata *string,
) (*createCustomerRelationshipTypeResponse, error) {
	req := &graphql.Request{
		OpName: "createCustomerRelationshipType",
		Query: `
mutation createCustomerRelationshipType ($token: String!, $name: String, $description: String, $metadata: String) {
	createCustomerRelationshipType(request: {token:$token,name:$name,description:$description,metadata:$metadata}) {
		... DefaultCustomerRelationshipType
	}
}
fragment DefaultCustomerRelationshipType on CustomerRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
`,
		Variables: &__createCustomerRelationshipTypeInput{
			Token:       token,
			Name:        name,
			Description: description,
			Metadata:    metadata,
		},
	}
	var err error

	var data createCustomerRelationshipTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create customer type and return identifiers.
func createCustomerType(
	ctx context.Context,
	client graphql.Client,
	token string,
	name *string,
	description *string,
	imageUrl *string,
	icon *string,
	backgroundColor *string,
	foregroundColor *string,
	borderColor *string,
	metadata *string,
) (*createCustomerTypeResponse, error) {
	req := &graphql.Request{
		OpName: "createCustomerType",
		Query: `
mutation createCustomerType ($token: String!, $name: String, $description: String, $imageUrl: String, $icon: String, $backgroundColor: String, $foregroundColor: String, $borderColor: String, $metadata: String) {
	createCustomerType(request: {token:$token,name:$name,description:$description,imageUrl:$imageUrl,icon:$icon,backgroundColor:$backgroundColor,foregroundColor:$foregroundColor,borderColor:$borderColor,metadata:$metadata}) {
		... DefaultCustomerType
	}
}
fragment DefaultCustomerType on CustomerType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
`,
		Variables: &__createCustomerTypeInput{
			Token:           token,
			Name:            name,
			Description:     description,
			ImageUrl:        imageUrl,
			Icon:            icon,
			BackgroundColor: backgroundColor,
			ForegroundColor: foregroundColor,
			BorderColor:     borderColor,
			Metadata:        metadata,
		},
	}
	var err error

	var data createCustomerTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create device and return identifiers.
func createDevice(
	ctx context.Context,
	client graphql.Client,
	token string,
	deviceTypeToken string,
	name *string,
	description *string,
	metadata *string,
) (*createDeviceResponse, error) {
	req := &graphql.Request{
		OpName: "createDevice",
		Query: `
mutation createDevice ($token: String!, $deviceTypeToken: String!, $name: String, $description: String, $metadata: String) {
	createDevice(request: {token:$token,deviceTypeToken:$deviceTypeToken,name:$name,description:$description,metadata:$metadata}) {
		... DefaultDevice
	}
}
fragment DefaultDevice on Device {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	deviceType {
		token
		name
		description
	}
	metadata
}
`,
		Variables: &__createDeviceInput{
			Token:           token,
			DeviceTypeToken: deviceTypeToken,
			Name:            name,
			Description:     description,
			Metadata:        metadata,
		},
	}
	var err error

	var data createDeviceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create device group and return identifiers.
func createDeviceGroup(
	ctx context.Context,
	client graphql.Client,
	token string,
	name *string,
	description *string,
	imageUrl *string,
	icon *string,
	backgroundColor *string,
	foregroundColor *string,
	borderColor *string,
	metadata *string,
) (*createDeviceGroupResponse, error) {
	req := &graphql.Request{
		OpName: "createDeviceGroup",
		Query: `
mutation createDeviceGroup ($token: String!, $name: String, $description: String, $imageUrl: String, $icon: String, $backgroundColor: String, $foregroundColor: String, $borderColor: String, $metadata: String) {
	createDeviceGroup(request: {token:$token,name:$name,description:$description,imageUrl:$imageUrl,icon:$icon,backgroundColor:$backgroundColor,foregroundColor:$foregroundColor,borderColor:$borderColor,metadata:$metadata}) {
		... DefaultDeviceGroup
	}
}
fragment DefaultDeviceGroup on DeviceGroup {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
`,
		Variables: &__createDeviceGroupInput{
			Token:           token,
			Name:            name,
			Description:     description,
			ImageUrl:        imageUrl,
			Icon:            icon,
			BackgroundColor: backgroundColor,
			ForegroundColor: foregroundColor,
			BorderColor:     borderColor,
			Metadata:        metadata,
		},
	}
	var err error

	var data createDeviceGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create device group relationship and return identifiers.
func createDeviceGroupRelationship(
	ctx context.Context,
	client graphql.Client,
	token string,
	sourceDeviceGroup string,
	targets EntityRelationshipTargetsCreateRequest,
	relationshipType string,
) (*createDeviceGroupRelationshipResponse, error) {
	req := &graphql.Request{
		OpName: "createDeviceGroupRelationship",
		Query: `
mutation createDeviceGroupRelationship ($token: String!, $sourceDeviceGroup: String!, $targets: EntityRelationshipTargetsCreateRequest!, $relationshipType: String!) {
	createDeviceGroupRelationship(request: {token:$token,sourceDeviceGroup:$sourceDeviceGroup,targets:$targets,relationshipType:$relationshipType}) {
		... DefaultDeviceGroupRelationship
	}
}
fragment DefaultDeviceGroupRelationship on DeviceGroupRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceDeviceGroup {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__createDeviceGroupRelationshipInput{
			Token:             token,
			SourceDeviceGroup: sourceDeviceGroup,
			Targets:           targets,
			RelationshipType:  relationshipType,
		},
	}
	var err error

	var data createDeviceGroupRelationshipResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create device group relationship type and return identifiers.
func createDeviceGroupRelationshipType(
	ctx context.Context,
	client graphql.Client,
	token string,
	name *string,
	description *string,
	metadata *string,
) (*createDeviceGroupRelationshipTypeResponse, error) {
	req := &graphql.Request{
		OpName: "createDeviceGroupRelationshipType",
		Query: `
mutation createDeviceGroupRelationshipType ($token: String!, $name: String, $description: String, $metadata: String) {
	createDeviceGroupRelationshipType(request: {token:$token,name:$name,description:$description,metadata:$metadata}) {
		... DefaultDeviceGroupRelationshipType
	}
}
fragment DefaultDeviceGroupRelationshipType on DeviceGroupRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
`,
		Variables: &__createDeviceGroupRelationshipTypeInput{
			Token:       token,
			Name:        name,
			Description: description,
			Metadata:    metadata,
		},
	}
	var err error

	var data createDeviceGroupRelationshipTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create device relationship and return identifiers.
func createDeviceRelationship(
	ctx context.Context,
	client graphql.Client,
	token string,
	sourceDevice string,
	targets EntityRelationshipTargetsCreateRequest,
	relationshipType string,
) (*createDeviceRelationshipResponse, error) {
	req := &graphql.Request{
		OpName: "createDeviceRelationship",
		Query: `
mutation createDeviceRelationship ($token: String!, $sourceDevice: String!, $targets: EntityRelationshipTargetsCreateRequest!, $relationshipType: String!) {
	createDeviceRelationship(request: {token:$token,sourceDevice:$sourceDevice,targets:$targets,relationshipType:$relationshipType}) {
		... DefaultDeviceRelationship
	}
}
fragment DefaultDeviceRelationship on DeviceRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceDevice {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__createDeviceRelationshipInput{
			Token:            token,
			SourceDevice:     sourceDevice,
			Targets:          targets,
			RelationshipType: relationshipType,
		},
	}
	var err error

	var data createDeviceRelationshipResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create device relationship type and return identifiers.
func createDeviceRelationshipType(
	ctx context.Context,
	client graphql.Client,
	token string,
	name *string,
	description *string,
	metadata *string,
	tracked bool,
) (*createDeviceRelationshipTypeResponse, error) {
	req := &graphql.Request{
		OpName: "createDeviceRelationshipType",
		Query: `
mutation createDeviceRelationshipType ($token: String!, $name: String, $description: String, $metadata: String, $tracked: Boolean!) {
	createDeviceRelationshipType(request: {token:$token,name:$name,description:$description,metadata:$metadata,tracked:$tracked}) {
		... DefaultDeviceRelationshipType
	}
}
fragment DefaultDeviceRelationshipType on DeviceRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
	tracked
}
`,
		Variables: &__createDeviceRelationshipTypeInput{
			Token:       token,
			Name:        name,
			Description: description,
			Metadata:    metadata,
			Tracked:     tracked,
		},
	}
	var err error

	var data createDeviceRelationshipTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Create device type and return identifiers.
func createDeviceType(
	ctx context.Context,
	client graphql.Client,
	token string,
	name *string,
	description *string,
	imageUrl *string,
	icon *string,
	backgroundColor *string,
	foregroundColor *string,
	borderColor *string,
	metadata *string,
) (*createDeviceTypeResponse, error) {
	req := &graphql.Request{
		OpName: "createDeviceType",
		Query: `
mutation createDeviceType ($token: String!, $name: String, $description: String, $imageUrl: String, $icon: String, $backgroundColor: String, $foregroundColor: String, $borderColor: String, $metadata: String) {
	createDeviceType(request: {token:$token,name:$name,description:$description,imageUrl:$imageUrl,icon:$icon,backgroundColor:$backgroundColor,foregroundColor:$foregroundColor,borderColor:$borderColor,metadata:$metadata}) {
		... DefaultDeviceType
	}
}
fragment DefaultDeviceType on DeviceType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
`,
		Variables: &__createDeviceTypeInput{
			Token:           token,
			Name:            name,
			Description:     description,
			ImageUrl:        imageUrl,
			Icon:            icon,
			BackgroundColor: backgroundColor,
			ForegroundColor: foregroundColor,
			BorderColor:     borderColor,
			Metadata:        metadata,
		},
	}
	var err error

	var data createDeviceTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get area group relationship types by unique token.
func getAreaGroupRelationshipTypesByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getAreaGroupRelationshipTypesByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getAreaGroupRelationshipTypesByToken",
		Query: `
query getAreaGroupRelationshipTypesByToken ($tokens: [String!]!) {
	areaGroupRelationshipTypesByToken(tokens: $tokens) {
		... DefaultAreaGroupRelationshipType
	}
}
fragment DefaultAreaGroupRelationshipType on AreaGroupRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
`,
		Variables: &__getAreaGroupRelationshipTypesByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getAreaGroupRelationshipTypesByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get area group relationships by unique tokens.
func getAreaGroupRelationshipsByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getAreaGroupRelationshipsByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getAreaGroupRelationshipsByToken",
		Query: `
query getAreaGroupRelationshipsByToken ($tokens: [String!]!) {
	areaGroupRelationshipsByToken(tokens: $tokens) {
		... DefaultAreaGroupRelationship
	}
}
fragment DefaultAreaGroupRelationship on AreaGroupRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceAreaGroup {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__getAreaGroupRelationshipsByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getAreaGroupRelationshipsByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get area groups by unique tokens.
func getAreaGroupsByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getAreaGroupsByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getAreaGroupsByToken",
		Query: `
query getAreaGroupsByToken ($tokens: [String!]!) {
	areaGroupsByToken(tokens: $tokens) {
		... DefaultAreaGroup
	}
}
fragment DefaultAreaGroup on AreaGroup {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
`,
		Variables: &__getAreaGroupsByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getAreaGroupsByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get area relationship types by unique tokens.
func getAreaRelationshipTypesByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getAreaRelationshipTypesByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getAreaRelationshipTypesByToken",
		Query: `
query getAreaRelationshipTypesByToken ($tokens: [String!]!) {
	areaRelationshipTypesByToken(tokens: $tokens) {
		... DefaultAreaRelationshipType
	}
}
fragment DefaultAreaRelationshipType on AreaRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
`,
		Variables: &__getAreaRelationshipTypesByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getAreaRelationshipTypesByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get area relationships by unique tokens.
func getAreaRelationshipsByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getAreaRelationshipsByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getAreaRelationshipsByToken",
		Query: `
query getAreaRelationshipsByToken ($tokens: [String!]!) {
	areaRelationshipsByToken(tokens: $tokens) {
		... DefaultAreaRelationship
	}
}
fragment DefaultAreaRelationship on AreaRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceArea {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__getAreaRelationshipsByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getAreaRelationshipsByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get area types by unique tokens.
func getAreaTypesByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getAreaTypesByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getAreaTypesByToken",
		Query: `
query getAreaTypesByToken ($tokens: [String!]!) {
	areaTypesByToken(tokens: $tokens) {
		... DefaultAreaType
	}
}
fragment DefaultAreaType on AreaType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
`,
		Variables: &__getAreaTypesByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getAreaTypesByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get areas by unique tokens.
func getAreasByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getAreasByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getAreasByToken",
		Query: `
query getAreasByToken ($tokens: [String!]!) {
	areasByToken(tokens: $tokens) {
		... DefaultArea
	}
}
fragment DefaultArea on Area {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	areaType {
		token
		name
		description
	}
	metadata
}
`,
		Variables: &__getAreasByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getAreasByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get asset group relationship types by unique token.
func getAssetGroupRelationshipTypesByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getAssetGroupRelationshipTypesByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getAssetGroupRelationshipTypesByToken",
		Query: `
query getAssetGroupRelationshipTypesByToken ($tokens: [String!]!) {
	assetGroupRelationshipTypesByToken(tokens: $tokens) {
		... DefaultAssetGroupRelationshipType
	}
}
fragment DefaultAssetGroupRelationshipType on AssetGroupRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
`,
		Variables: &__getAssetGroupRelationshipTypesByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getAssetGroupRelationshipTypesByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get asset group relationships by unique tokens.
func getAssetGroupRelationshipsByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getAssetGroupRelationshipsByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getAssetGroupRelationshipsByToken",
		Query: `
query getAssetGroupRelationshipsByToken ($tokens: [String!]!) {
	assetGroupRelationshipsByToken(tokens: $tokens) {
		... DefaultAssetGroupRelationship
	}
}
fragment DefaultAssetGroupRelationship on AssetGroupRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceAssetGroup {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__getAssetGroupRelationshipsByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getAssetGroupRelationshipsByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get asset groups by unique tokens.
func getAssetGroupsByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getAssetGroupsByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getAssetGroupsByToken",
		Query: `
query getAssetGroupsByToken ($tokens: [String!]!) {
	assetGroupsByToken(tokens: $tokens) {
		... DefaultAssetGroup
	}
}
fragment DefaultAssetGroup on AssetGroup {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
`,
		Variables: &__getAssetGroupsByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getAssetGroupsByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get asset relationship types by unique tokens.
func getAssetRelationshipTypesByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getAssetRelationshipTypesByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getAssetRelationshipTypesByToken",
		Query: `
query getAssetRelationshipTypesByToken ($tokens: [String!]!) {
	assetRelationshipTypesByToken(tokens: $tokens) {
		... DefaultAssetRelationshipType
	}
}
fragment DefaultAssetRelationshipType on AssetRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
`,
		Variables: &__getAssetRelationshipTypesByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getAssetRelationshipTypesByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get asset relationships by unique tokens.
func getAssetRelationshipsByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getAssetRelationshipsByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getAssetRelationshipsByToken",
		Query: `
query getAssetRelationshipsByToken ($tokens: [String!]!) {
	assetRelationshipsByToken(tokens: $tokens) {
		... DefaultAssetRelationship
	}
}
fragment DefaultAssetRelationship on AssetRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceAsset {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__getAssetRelationshipsByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getAssetRelationshipsByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get asset types by unique tokens.
func getAssetTypesByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getAssetTypesByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getAssetTypesByToken",
		Query: `
query getAssetTypesByToken ($tokens: [String!]!) {
	assetTypesByToken(tokens: $tokens) {
		... DefaultAssetType
	}
}
fragment DefaultAssetType on AssetType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
`,
		Variables: &__getAssetTypesByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getAssetTypesByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get assets by unique tokens.
func getAssetsByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getAssetsByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getAssetsByToken",
		Query: `
query getAssetsByToken ($tokens: [String!]!) {
	assetsByToken(tokens: $tokens) {
		... DefaultAsset
	}
}
fragment DefaultAsset on Asset {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	assetType {
		token
		name
		description
	}
	metadata
}
`,
		Variables: &__getAssetsByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getAssetsByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get customer group relationship types by unique token.
func getCustomerGroupRelationshipTypesByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getCustomerGroupRelationshipTypesByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getCustomerGroupRelationshipTypesByToken",
		Query: `
query getCustomerGroupRelationshipTypesByToken ($tokens: [String!]!) {
	customerGroupRelationshipTypesByToken(tokens: $tokens) {
		... DefaultCustomerGroupRelationshipType
	}
}
fragment DefaultCustomerGroupRelationshipType on CustomerGroupRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
`,
		Variables: &__getCustomerGroupRelationshipTypesByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getCustomerGroupRelationshipTypesByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get customer group relationships by unique tokens.
func getCustomerGroupRelationshipsByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getCustomerGroupRelationshipsByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getCustomerGroupRelationshipsByToken",
		Query: `
query getCustomerGroupRelationshipsByToken ($tokens: [String!]!) {
	customerGroupRelationshipsByToken(tokens: $tokens) {
		... DefaultCustomerGroupRelationship
	}
}
fragment DefaultCustomerGroupRelationship on CustomerGroupRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceCustomerGroup {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__getCustomerGroupRelationshipsByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getCustomerGroupRelationshipsByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get customer groups by unique tokens.
func getCustomerGroupsByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getCustomerGroupsByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getCustomerGroupsByToken",
		Query: `
query getCustomerGroupsByToken ($tokens: [String!]!) {
	customerGroupsByToken(tokens: $tokens) {
		... DefaultCustomerGroup
	}
}
fragment DefaultCustomerGroup on CustomerGroup {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
`,
		Variables: &__getCustomerGroupsByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getCustomerGroupsByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get customer relationship types by unique tokens.
func getCustomerRelationshipTypesByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getCustomerRelationshipTypesByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getCustomerRelationshipTypesByToken",
		Query: `
query getCustomerRelationshipTypesByToken ($tokens: [String!]!) {
	customerRelationshipTypesByToken(tokens: $tokens) {
		... DefaultCustomerRelationshipType
	}
}
fragment DefaultCustomerRelationshipType on CustomerRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
`,
		Variables: &__getCustomerRelationshipTypesByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getCustomerRelationshipTypesByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get customer relationships by unique tokens.
func getCustomerRelationshipsByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getCustomerRelationshipsByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getCustomerRelationshipsByToken",
		Query: `
query getCustomerRelationshipsByToken ($tokens: [String!]!) {
	customerRelationshipsByToken(tokens: $tokens) {
		... DefaultCustomerRelationship
	}
}
fragment DefaultCustomerRelationship on CustomerRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceCustomer {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__getCustomerRelationshipsByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getCustomerRelationshipsByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get customer types by unique tokens.
func getCustomerTypesByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getCustomerTypesByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getCustomerTypesByToken",
		Query: `
query getCustomerTypesByToken ($tokens: [String!]!) {
	customerTypesByToken(tokens: $tokens) {
		... DefaultCustomerType
	}
}
fragment DefaultCustomerType on CustomerType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
`,
		Variables: &__getCustomerTypesByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getCustomerTypesByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get customers by unique tokens.
func getCustomersByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getCustomersByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getCustomersByToken",
		Query: `
query getCustomersByToken ($tokens: [String!]!) {
	customersByToken(tokens: $tokens) {
		... DefaultCustomer
	}
}
fragment DefaultCustomer on Customer {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	customerType {
		token
		name
		description
	}
	metadata
}
`,
		Variables: &__getCustomersByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getCustomersByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get device group relationship types by unique token.
func getDeviceGroupRelationshipTypesByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getDeviceGroupRelationshipTypesByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getDeviceGroupRelationshipTypesByToken",
		Query: `
query getDeviceGroupRelationshipTypesByToken ($tokens: [String!]!) {
	deviceGroupRelationshipTypesByToken(tokens: $tokens) {
		... DefaultDeviceGroupRelationshipType
	}
}
fragment DefaultDeviceGroupRelationshipType on DeviceGroupRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
`,
		Variables: &__getDeviceGroupRelationshipTypesByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getDeviceGroupRelationshipTypesByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get device group relationships by unique tokens.
func getDeviceGroupRelationshipsByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getDeviceGroupRelationshipsByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getDeviceGroupRelationshipsByToken",
		Query: `
query getDeviceGroupRelationshipsByToken ($tokens: [String!]!) {
	deviceGroupRelationshipsByToken(tokens: $tokens) {
		... DefaultDeviceGroupRelationship
	}
}
fragment DefaultDeviceGroupRelationship on DeviceGroupRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceDeviceGroup {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__getDeviceGroupRelationshipsByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getDeviceGroupRelationshipsByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get device groups by unique tokens.
func getDeviceGroupsByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getDeviceGroupsByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getDeviceGroupsByToken",
		Query: `
query getDeviceGroupsByToken ($tokens: [String!]!) {
	deviceGroupsByToken(tokens: $tokens) {
		... DefaultDeviceGroup
	}
}
fragment DefaultDeviceGroup on DeviceGroup {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
`,
		Variables: &__getDeviceGroupsByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getDeviceGroupsByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get device relationship types by unique tokens.
func getDeviceRelationshipTypesByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getDeviceRelationshipTypesByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getDeviceRelationshipTypesByToken",
		Query: `
query getDeviceRelationshipTypesByToken ($tokens: [String!]!) {
	deviceRelationshipTypesByToken(tokens: $tokens) {
		... DefaultDeviceRelationshipType
	}
}
fragment DefaultDeviceRelationshipType on DeviceRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
	tracked
}
`,
		Variables: &__getDeviceRelationshipTypesByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getDeviceRelationshipTypesByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get device relationships by unique tokens.
func getDeviceRelationshipsByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getDeviceRelationshipsByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getDeviceRelationshipsByToken",
		Query: `
query getDeviceRelationshipsByToken ($tokens: [String!]!) {
	deviceRelationshipsByToken(tokens: $tokens) {
		... DefaultDeviceRelationship
	}
}
fragment DefaultDeviceRelationship on DeviceRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceDevice {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__getDeviceRelationshipsByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getDeviceRelationshipsByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get device types by unique tokens.
func getDeviceTypesByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getDeviceTypesByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getDeviceTypesByToken",
		Query: `
query getDeviceTypesByToken ($tokens: [String!]!) {
	deviceTypesByToken(tokens: $tokens) {
		... DefaultDeviceType
	}
}
fragment DefaultDeviceType on DeviceType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
`,
		Variables: &__getDeviceTypesByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getDeviceTypesByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// Get devices by unique tokens.
func getDevicesByToken(
	ctx context.Context,
	client graphql.Client,
	tokens []string,
) (*getDevicesByTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getDevicesByToken",
		Query: `
query getDevicesByToken ($tokens: [String!]!) {
	devicesByToken(tokens: $tokens) {
		... DefaultDevice
	}
}
fragment DefaultDevice on Device {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	deviceType {
		token
		name
		description
	}
	metadata
}
`,
		Variables: &__getDevicesByTokenInput{
			Tokens: tokens,
		},
	}
	var err error

	var data getDevicesByTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List area group relationship types that match criteria.
func listAreaGroupRelationshipTypes(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listAreaGroupRelationshipTypesResponse, error) {
	req := &graphql.Request{
		OpName: "listAreaGroupRelationshipTypes",
		Query: `
query listAreaGroupRelationshipTypes ($pageNumber: Int!, $pageSize: Int!) {
	areaGroupRelationshipTypes(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultAreaGroupRelationshipType
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultAreaGroupRelationshipType on AreaGroupRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listAreaGroupRelationshipTypesInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listAreaGroupRelationshipTypesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List area group relationships that match criteria.
func listAreaGroupRelationships(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
	sourceAreaGroup *string,
	relationshipType *string,
) (*listAreaGroupRelationshipsResponse, error) {
	req := &graphql.Request{
		OpName: "listAreaGroupRelationships",
		Query: `
query listAreaGroupRelationships ($pageNumber: Int!, $pageSize: Int!, $sourceAreaGroup: String, $relationshipType: String) {
	areaGroupRelationships(criteria: {pageNumber:$pageNumber,pageSize:$pageSize,sourceAreaGroup:$sourceAreaGroup,relationshipType:$relationshipType}) {
		results {
			... DefaultAreaGroupRelationship
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultAreaGroupRelationship on AreaGroupRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceAreaGroup {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__listAreaGroupRelationshipsInput{
			PageNumber:       pageNumber,
			PageSize:         pageSize,
			SourceAreaGroup:  sourceAreaGroup,
			RelationshipType: relationshipType,
		},
	}
	var err error

	var data listAreaGroupRelationshipsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List area groups that match criteria.
func listAreaGroups(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listAreaGroupsResponse, error) {
	req := &graphql.Request{
		OpName: "listAreaGroups",
		Query: `
query listAreaGroups ($pageNumber: Int!, $pageSize: Int!) {
	areaGroups(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultAreaGroup
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultAreaGroup on AreaGroup {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listAreaGroupsInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listAreaGroupsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List area relationship types that match criteria.
func listAreaRelationshipTypes(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listAreaRelationshipTypesResponse, error) {
	req := &graphql.Request{
		OpName: "listAreaRelationshipTypes",
		Query: `
query listAreaRelationshipTypes ($pageNumber: Int!, $pageSize: Int!) {
	areaRelationshipTypes(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultAreaRelationshipType
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultAreaRelationshipType on AreaRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listAreaRelationshipTypesInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listAreaRelationshipTypesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List area relationships that match criteria.
func listAreaRelationships(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
	sourceArea *string,
	relationshipType *string,
) (*listAreaRelationshipsResponse, error) {
	req := &graphql.Request{
		OpName: "listAreaRelationships",
		Query: `
query listAreaRelationships ($pageNumber: Int!, $pageSize: Int!, $sourceArea: String, $relationshipType: String) {
	areaRelationships(criteria: {pageNumber:$pageNumber,pageSize:$pageSize,sourceArea:$sourceArea,relationshipType:$relationshipType}) {
		results {
			... DefaultAreaRelationship
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultAreaRelationship on AreaRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceArea {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__listAreaRelationshipsInput{
			PageNumber:       pageNumber,
			PageSize:         pageSize,
			SourceArea:       sourceArea,
			RelationshipType: relationshipType,
		},
	}
	var err error

	var data listAreaRelationshipsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List area types that match criteria.
func listAreaTypes(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listAreaTypesResponse, error) {
	req := &graphql.Request{
		OpName: "listAreaTypes",
		Query: `
query listAreaTypes ($pageNumber: Int!, $pageSize: Int!) {
	areaTypes(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultAreaType
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultAreaType on AreaType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listAreaTypesInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listAreaTypesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List areas that match criteria.
func listAreas(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listAreasResponse, error) {
	req := &graphql.Request{
		OpName: "listAreas",
		Query: `
query listAreas ($pageNumber: Int!, $pageSize: Int!) {
	areas(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultArea
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultArea on Area {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	areaType {
		token
		name
		description
	}
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listAreasInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listAreasResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List asset group relationship types that match criteria.
func listAssetGroupRelationshipTypes(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listAssetGroupRelationshipTypesResponse, error) {
	req := &graphql.Request{
		OpName: "listAssetGroupRelationshipTypes",
		Query: `
query listAssetGroupRelationshipTypes ($pageNumber: Int!, $pageSize: Int!) {
	assetGroupRelationshipTypes(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultAssetGroupRelationshipType
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultAssetGroupRelationshipType on AssetGroupRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listAssetGroupRelationshipTypesInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listAssetGroupRelationshipTypesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List asset group relationships that match criteria.
func listAssetGroupRelationships(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
	sourceAssetGroup *string,
	relationshipType *string,
) (*listAssetGroupRelationshipsResponse, error) {
	req := &graphql.Request{
		OpName: "listAssetGroupRelationships",
		Query: `
query listAssetGroupRelationships ($pageNumber: Int!, $pageSize: Int!, $sourceAssetGroup: String, $relationshipType: String) {
	assetGroupRelationships(criteria: {pageNumber:$pageNumber,pageSize:$pageSize,sourceAssetGroup:$sourceAssetGroup,relationshipType:$relationshipType}) {
		results {
			... DefaultAssetGroupRelationship
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultAssetGroupRelationship on AssetGroupRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceAssetGroup {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__listAssetGroupRelationshipsInput{
			PageNumber:       pageNumber,
			PageSize:         pageSize,
			SourceAssetGroup: sourceAssetGroup,
			RelationshipType: relationshipType,
		},
	}
	var err error

	var data listAssetGroupRelationshipsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List asset groups that match criteria.
func listAssetGroups(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listAssetGroupsResponse, error) {
	req := &graphql.Request{
		OpName: "listAssetGroups",
		Query: `
query listAssetGroups ($pageNumber: Int!, $pageSize: Int!) {
	assetGroups(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultAssetGroup
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultAssetGroup on AssetGroup {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listAssetGroupsInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listAssetGroupsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List asset relationship types that match criteria.
func listAssetRelationshipTypes(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listAssetRelationshipTypesResponse, error) {
	req := &graphql.Request{
		OpName: "listAssetRelationshipTypes",
		Query: `
query listAssetRelationshipTypes ($pageNumber: Int!, $pageSize: Int!) {
	assetRelationshipTypes(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultAssetRelationshipType
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultAssetRelationshipType on AssetRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listAssetRelationshipTypesInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listAssetRelationshipTypesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List asset relationships that match criteria.
func listAssetRelationships(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
	sourceAsset *string,
	relationshipType *string,
) (*listAssetRelationshipsResponse, error) {
	req := &graphql.Request{
		OpName: "listAssetRelationships",
		Query: `
query listAssetRelationships ($pageNumber: Int!, $pageSize: Int!, $sourceAsset: String, $relationshipType: String) {
	assetRelationships(criteria: {pageNumber:$pageNumber,pageSize:$pageSize,sourceAsset:$sourceAsset,relationshipType:$relationshipType}) {
		results {
			... DefaultAssetRelationship
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultAssetRelationship on AssetRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceAsset {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__listAssetRelationshipsInput{
			PageNumber:       pageNumber,
			PageSize:         pageSize,
			SourceAsset:      sourceAsset,
			RelationshipType: relationshipType,
		},
	}
	var err error

	var data listAssetRelationshipsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List asset types that match criteria.
func listAssetTypes(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listAssetTypesResponse, error) {
	req := &graphql.Request{
		OpName: "listAssetTypes",
		Query: `
query listAssetTypes ($pageNumber: Int!, $pageSize: Int!) {
	assetTypes(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultAssetType
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultAssetType on AssetType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listAssetTypesInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listAssetTypesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List assets that match criteria.
func listAssets(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listAssetsResponse, error) {
	req := &graphql.Request{
		OpName: "listAssets",
		Query: `
query listAssets ($pageNumber: Int!, $pageSize: Int!) {
	assets(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultAsset
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultAsset on Asset {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	assetType {
		token
		name
		description
	}
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listAssetsInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listAssetsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List customer group relationship types that match criteria.
func listCustomerGroupRelationshipTypes(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listCustomerGroupRelationshipTypesResponse, error) {
	req := &graphql.Request{
		OpName: "listCustomerGroupRelationshipTypes",
		Query: `
query listCustomerGroupRelationshipTypes ($pageNumber: Int!, $pageSize: Int!) {
	customerGroupRelationshipTypes(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultCustomerGroupRelationshipType
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultCustomerGroupRelationshipType on CustomerGroupRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listCustomerGroupRelationshipTypesInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listCustomerGroupRelationshipTypesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List customer group relationships that match criteria.
func listCustomerGroupRelationships(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
	sourceCustomerGroup *string,
	relationshipType *string,
) (*listCustomerGroupRelationshipsResponse, error) {
	req := &graphql.Request{
		OpName: "listCustomerGroupRelationships",
		Query: `
query listCustomerGroupRelationships ($pageNumber: Int!, $pageSize: Int!, $sourceCustomerGroup: String, $relationshipType: String) {
	customerGroupRelationships(criteria: {pageNumber:$pageNumber,pageSize:$pageSize,sourceCustomerGroup:$sourceCustomerGroup,relationshipType:$relationshipType}) {
		results {
			... DefaultCustomerGroupRelationship
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultCustomerGroupRelationship on CustomerGroupRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceCustomerGroup {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__listCustomerGroupRelationshipsInput{
			PageNumber:          pageNumber,
			PageSize:            pageSize,
			SourceCustomerGroup: sourceCustomerGroup,
			RelationshipType:    relationshipType,
		},
	}
	var err error

	var data listCustomerGroupRelationshipsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List customer groups that match criteria.
func listCustomerGroups(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listCustomerGroupsResponse, error) {
	req := &graphql.Request{
		OpName: "listCustomerGroups",
		Query: `
query listCustomerGroups ($pageNumber: Int!, $pageSize: Int!) {
	customerGroups(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultCustomerGroup
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultCustomerGroup on CustomerGroup {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listCustomerGroupsInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listCustomerGroupsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List customer relationship types that match criteria.
func listCustomerRelationshipTypes(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listCustomerRelationshipTypesResponse, error) {
	req := &graphql.Request{
		OpName: "listCustomerRelationshipTypes",
		Query: `
query listCustomerRelationshipTypes ($pageNumber: Int!, $pageSize: Int!) {
	customerRelationshipTypes(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultCustomerRelationshipType
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultCustomerRelationshipType on CustomerRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listCustomerRelationshipTypesInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listCustomerRelationshipTypesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List customer relationships that match criteria.
func listCustomerRelationships(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
	sourceCustomer *string,
	relationshipType *string,
) (*listCustomerRelationshipsResponse, error) {
	req := &graphql.Request{
		OpName: "listCustomerRelationships",
		Query: `
query listCustomerRelationships ($pageNumber: Int!, $pageSize: Int!, $sourceCustomer: String, $relationshipType: String) {
	customerRelationships(criteria: {pageNumber:$pageNumber,pageSize:$pageSize,sourceCustomer:$sourceCustomer,relationshipType:$relationshipType}) {
		results {
			... DefaultCustomerRelationship
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultCustomerRelationship on CustomerRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceCustomer {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__listCustomerRelationshipsInput{
			PageNumber:       pageNumber,
			PageSize:         pageSize,
			SourceCustomer:   sourceCustomer,
			RelationshipType: relationshipType,
		},
	}
	var err error

	var data listCustomerRelationshipsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List customer types that match criteria.
func listCustomerTypes(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listCustomerTypesResponse, error) {
	req := &graphql.Request{
		OpName: "listCustomerTypes",
		Query: `
query listCustomerTypes ($pageNumber: Int!, $pageSize: Int!) {
	customerTypes(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultCustomerType
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultCustomerType on CustomerType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listCustomerTypesInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listCustomerTypesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List customers that match criteria.
func listCustomers(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listCustomersResponse, error) {
	req := &graphql.Request{
		OpName: "listCustomers",
		Query: `
query listCustomers ($pageNumber: Int!, $pageSize: Int!) {
	customers(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultCustomer
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultCustomer on Customer {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	customerType {
		token
		name
		description
	}
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listCustomersInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listCustomersResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List device group relationship types that match criteria.
func listDeviceGroupRelationshipTypes(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listDeviceGroupRelationshipTypesResponse, error) {
	req := &graphql.Request{
		OpName: "listDeviceGroupRelationshipTypes",
		Query: `
query listDeviceGroupRelationshipTypes ($pageNumber: Int!, $pageSize: Int!) {
	deviceGroupRelationshipTypes(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultDeviceGroupRelationshipType
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultDeviceGroupRelationshipType on DeviceGroupRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listDeviceGroupRelationshipTypesInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listDeviceGroupRelationshipTypesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List device group relationships that match criteria.
func listDeviceGroupRelationships(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
	sourceDeviceGroup *string,
	relationshipType *string,
) (*listDeviceGroupRelationshipsResponse, error) {
	req := &graphql.Request{
		OpName: "listDeviceGroupRelationships",
		Query: `
query listDeviceGroupRelationships ($pageNumber: Int!, $pageSize: Int!, $sourceDeviceGroup: String, $relationshipType: String) {
	deviceGroupRelationships(criteria: {pageNumber:$pageNumber,pageSize:$pageSize,sourceDeviceGroup:$sourceDeviceGroup,relationshipType:$relationshipType}) {
		results {
			... DefaultDeviceGroupRelationship
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultDeviceGroupRelationship on DeviceGroupRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceDeviceGroup {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__listDeviceGroupRelationshipsInput{
			PageNumber:        pageNumber,
			PageSize:          pageSize,
			SourceDeviceGroup: sourceDeviceGroup,
			RelationshipType:  relationshipType,
		},
	}
	var err error

	var data listDeviceGroupRelationshipsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List device groups that match criteria.
func listDeviceGroups(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listDeviceGroupsResponse, error) {
	req := &graphql.Request{
		OpName: "listDeviceGroups",
		Query: `
query listDeviceGroups ($pageNumber: Int!, $pageSize: Int!) {
	deviceGroups(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultDeviceGroup
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultDeviceGroup on DeviceGroup {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listDeviceGroupsInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listDeviceGroupsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List device relationship types that match criteria.
func listDeviceRelationshipTypes(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listDeviceRelationshipTypesResponse, error) {
	req := &graphql.Request{
		OpName: "listDeviceRelationshipTypes",
		Query: `
query listDeviceRelationshipTypes ($pageNumber: Int!, $pageSize: Int!) {
	deviceRelationshipTypes(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultDeviceRelationshipType
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultDeviceRelationshipType on DeviceRelationshipType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	metadata
	tracked
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listDeviceRelationshipTypesInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listDeviceRelationshipTypesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List device relationships that match criteria.
func listDeviceRelationships(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
	sourceDevice *string,
	relationshipType *string,
	tracked *bool,
) (*listDeviceRelationshipsResponse, error) {
	req := &graphql.Request{
		OpName: "listDeviceRelationships",
		Query: `
query listDeviceRelationships ($pageNumber: Int!, $pageSize: Int!, $sourceDevice: String, $relationshipType: String, $tracked: Boolean) {
	deviceRelationships(criteria: {pageNumber:$pageNumber,pageSize:$pageSize,sourceDevice:$sourceDevice,relationshipType:$relationshipType,tracked:$tracked}) {
		results {
			... DefaultDeviceRelationship
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultDeviceRelationship on DeviceRelationship {
	id
	createdAt
	updatedAt
	deletedAt
	token
	sourceDevice {
		token
		name
		description
	}
	targets {
		... DefaultRelationshipTargets
	}
	relationshipType {
		token
		name
		description
	}
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
fragment DefaultRelationshipTargets on EntityRelationshipTargets {
	targetDevice {
		token
	}
	targetDeviceGroup {
		token
	}
	targetAsset {
		token
	}
	targetAssetGroup {
		token
	}
	targetArea {
		token
	}
	targetAreaGroup {
		token
	}
	targetCustomer {
		token
	}
	targetCustomerGroup {
		token
	}
}
`,
		Variables: &__listDeviceRelationshipsInput{
			PageNumber:       pageNumber,
			PageSize:         pageSize,
			SourceDevice:     sourceDevice,
			RelationshipType: relationshipType,
			Tracked:          tracked,
		},
	}
	var err error

	var data listDeviceRelationshipsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List device types that match criteria.
func listDeviceTypes(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listDeviceTypesResponse, error) {
	req := &graphql.Request{
		OpName: "listDeviceTypes",
		Query: `
query listDeviceTypes ($pageNumber: Int!, $pageSize: Int!) {
	deviceTypes(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultDeviceType
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultDeviceType on DeviceType {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	imageUrl
	icon
	backgroundColor
	foregroundColor
	borderColor
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listDeviceTypesInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listDeviceTypesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// List devices that match criteria.
func listDevices(
	ctx context.Context,
	client graphql.Client,
	pageNumber int,
	pageSize int,
) (*listDevicesResponse, error) {
	req := &graphql.Request{
		OpName: "listDevices",
		Query: `
query listDevices ($pageNumber: Int!, $pageSize: Int!) {
	devices(criteria: {pageNumber:$pageNumber,pageSize:$pageSize}) {
		results {
			... DefaultDevice
		}
		pagination {
			... DefaultPagination
		}
	}
}
fragment DefaultDevice on Device {
	id
	createdAt
	updatedAt
	deletedAt
	token
	name
	description
	deviceType {
		token
		name
		description
	}
	metadata
}
fragment DefaultPagination on SearchResultsPagination {
	pageStart
	pageEnd
	totalRecords
}
`,
		Variables: &__listDevicesInput{
			PageNumber: pageNumber,
			PageSize:   pageSize,
		},
	}
	var err error

	var data listDevicesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
