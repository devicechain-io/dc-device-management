#
# Device Management GraphQL Schema
#

# Base elements in gorm RDB model.
interface Model {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
}

# Entity referenced by unique token.
interface TokenReference {
    token: String!
}

# Entity that provides human-readable name-description.
interface NamedEntity {
    name: String
    description: String
}

# Entity that provides branding information.
interface BrandedEntity {
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
}

# Entity that provides metadata.
interface MetadataEntity {
    metadata: String
}

# Pagination info for search results.
type SearchResultsPagination {
	pageStart: Int
	pageEnd: Int
	totalRecords: Int
}

# Represents a type or class of devices
type DeviceType implements Model & TokenReference & NamedEntity & BrandedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Data required to create a device type.
input DeviceTypeCreateRequest {
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Criteria used when searching for device types.
input DeviceTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from device type query.
type DeviceTypeSearchResults {
    results: [DeviceType!]!
    pagination: SearchResultsPagination!
}

# Represents a device instance
type Device implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    deviceType: DeviceType!
    activeAssignments: [DeviceAssignment!]!
    metadata: String
}

# Data required to create a device.
input DeviceCreateRequest {
    token: String!
    name: String
    description: String
    deviceTypeToken: String!
    metadata: String
}

# Criteria used when searching for devices.
input DeviceSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
    deviceType: String
}

# Search results returned from device query.
type DeviceSearchResults {
    results: [Device!]!
    pagination: SearchResultsPagination!
}

# Represents a type of relation between devices.
type DeviceRelationshipType implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    metadata: String
}

# Data required to create a device relationship type.
input DeviceRelationshipTypeCreateRequest {
    token: String!
    name: String
    description: String
    metadata: String
}

# Criteria used when searching for device relationship types.
input DeviceRelationshipTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from device relationship type query.
type DeviceRelationshipTypeSearchResults {
    results: [DeviceRelationshipType!]!
    pagination: SearchResultsPagination!
}

# Represents a relationship between devices.
type DeviceRelationship implements Model & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    sourceDevice: Device!
    targetDevice: Device!
    relationshipType: DeviceRelationshipType!
    metadata: String
}

# Data required to create a device relationship.
input DeviceRelationshipCreateRequest {
    token: String!
    sourceDevice: String!
    targetDevice: String!
    relationshipType: String!
    metadata: String
}

# Criteria used when searching for device relationships.
input DeviceRelationshipSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from device relationship query.
type DeviceRelationshipSearchResults {
    results: [DeviceRelationship!]!
    pagination: SearchResultsPagination!
}

# Represents a group of related devices.
type DeviceGroup implements Model & TokenReference & NamedEntity & BrandedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Data required to create a device group.
input DeviceGroupCreateRequest {
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Criteria used when searching for device groups.
input DeviceGroupSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from device group query.
type DeviceGroupSearchResults {
    results: [DeviceGroup!]!
    pagination: SearchResultsPagination!
}

# Represents a type of relation between a device and a device group.
type DeviceGroupRelationshipType implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    metadata: String
}

# Data required to create a device group relationship type.
input DeviceGroupRelationshipTypeCreateRequest {
    token: String!
    name: String
    description: String
    metadata: String
}

# Criteria used when searching for device group relationship types.
input DeviceGroupRelationshipTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from device group relationship type query.
type DeviceGroupRelationshipTypeSearchResults {
    results: [DeviceGroupRelationshipType!]!
    pagination: SearchResultsPagination!
}

# Represents a relationship between a device and a group.
type DeviceGroupRelationship implements Model {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    deviceGroup: DeviceGroup!
    device: Device!
    relationshipType: DeviceGroupRelationshipType!
    metadata: String
}

# Data required to create a device group relationship.
input DeviceGroupRelationshipCreateRequest {
    token: String!
    deviceGroup: String!
    device: String!
    relationshipType: String!
    metadata: String
}

# Criteria used when searching for device group relationships.
input DeviceGroupRelationshipSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from device group relationship query.
type DeviceGroupRelationshipSearchResults {
    results: [DeviceGroupRelationship!]!
    pagination: SearchResultsPagination!
}

# Represents a type or class of assets
type AssetType implements Model & TokenReference & NamedEntity & BrandedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Data required to create an asset type.
input AssetTypeCreateRequest {
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Criteria used when searching for asset types.
input AssetTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from asset types query.
type AssetTypeSearchResults {
    results: [AssetType!]!
    pagination: SearchResultsPagination!
}

# Represents an asset instance
type Asset implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    assetType: AssetType!
    metadata: String
}

# Data required to create an asset.
input AssetCreateRequest {
    token: String!
    name: String
    description: String
    assetTypeToken: String!
    metadata: String
}

# Criteria used when searching for assets.
input AssetSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
    assetTypeToken: String
}

# Search results returned from assets query.
type AssetSearchResults {
    results: [Asset!]!
    pagination: SearchResultsPagination!
}

# Represents a type of relation between assets.
type AssetRelationshipType implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    metadata: String
}

# Data required to create an asset relationship type.
input AssetRelationshipTypeCreateRequest {
    token: String!
    name: String
    description: String
    metadata: String
}

# Criteria used when searching for asset relationship types.
input AssetRelationshipTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from asset relationship types query.
type AssetRelationshipTypeSearchResults {
    results: [AssetRelationshipType!]!
    pagination: SearchResultsPagination!
}

# Represents a relationship between assets.
type AssetRelationship implements Model {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    sourceAsset: Asset!
    targetAsset: Asset!
    relationshipType: AssetRelationshipType!
    metadata: String
}

# Data required to create an asset relationship.
input AssetRelationshipCreateRequest {
    token: String!
    sourceAsset: String!
    targetAsset: String!
    relationshipType: String!
    metadata: String
}

# Criteria used when searching for asset relationships.
input AssetRelationshipSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from asset relationships query.
type AssetRelationshipSearchResults {
    results: [AssetRelationship!]!
    pagination: SearchResultsPagination!
}

# Represents a group of related assets.
type AssetGroup implements Model & TokenReference & NamedEntity & BrandedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Data required to create an asset group.
input AssetGroupCreateRequest {
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Criteria used when searching for asset groups.
input AssetGroupSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from asset groups query.
type AssetGroupSearchResults {
    results: [AssetGroup!]!
    pagination: SearchResultsPagination!
}

# Represents a type of relation between an asset and an asset group.
type AssetGroupRelationshipType implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    metadata: String
}

# Data required to create an asset group relationship type.
input AssetGroupRelationshipTypeCreateRequest {
    token: String!
    name: String
    description: String
    metadata: String
}

# Criteria used when searching for asset group relationship types.
input AssetGroupRelationshipTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from asset group relationship types query.
type AssetGroupRelationshipTypeSearchResults {
    results: [AssetGroupRelationshipType!]!
    pagination: SearchResultsPagination!
}

# Represents a relationship between an asset and an asset.
type AssetGroupRelationship implements Model {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    assetGroup: AssetGroup!
    asset: Asset!
    relationshipType: AssetGroupRelationshipType!
    metadata: String
}

# Data required to create an asset group relationship.
input AssetGroupRelationshipCreateRequest {
    token: String!
    assetGroup: String!
    asset: String!
    relationshipType: String!
    metadata: String
}

# Criteria used when searching for asset group relationships.
input AssetGroupRelationshipSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from asset group relationships query.
type AssetGroupRelationshipSearchResults {
    results: [AssetGroupRelationship!]!
    pagination: SearchResultsPagination!
}

# Represents a type or class of customers
type CustomerType implements Model & TokenReference & NamedEntity & BrandedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Data required to create a customer type.
input CustomerTypeCreateRequest {
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Criteria used when searching for customer types.
input CustomerTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from customer type query.
type CustomerTypeSearchResults {
    results: [CustomerType!]!
    pagination: SearchResultsPagination!
}

# Represents a customer instance
type Customer implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    customerType: CustomerType!
    metadata: String
}

# Data required to create a customer.
input CustomerCreateRequest {
    token: String!
    name: String
    description: String
    customerTypeToken: String!
    metadata: String
}

# Criteria used when searching for customers.
input CustomerSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
    customerTypeToken: String
}

# Search results returned from customer query.
type CustomerSearchResults {
    results: [Customer!]!
    pagination: SearchResultsPagination!
}

# Represents a type of relation between customers.
type CustomerRelationshipType implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    metadata: String
}

# Data required to create a customer relationship type.
input CustomerRelationshipTypeCreateRequest {
    token: String!
    name: String
    description: String
    metadata: String
}

# Criteria used when searching for customer relationship types.
input CustomerRelationshipTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from customer relationship type query.
type CustomerRelationshipTypeSearchResults {
    results: [CustomerRelationshipType!]!
    pagination: SearchResultsPagination!
}

# Represents a relationship between customers.
type CustomerRelationship implements Model & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    sourceCustomer: Customer!
    targetCustomer: Customer!
    relationshipType: CustomerRelationshipType!
    metadata: String
}

# Data required to create a customer relationship.
input CustomerRelationshipCreateRequest {
    token: String!
    sourceCustomer: String!
    targetCustomer: String!
    relationshipType: String!
    metadata: String
}

# Criteria used when searching for customer relationships.
input CustomerRelationshipSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from customer relationship query.
type CustomerRelationshipSearchResults {
    results: [CustomerRelationship!]!
    pagination: SearchResultsPagination!
}

# Represents a group of related customers.
type CustomerGroup implements Model & TokenReference & NamedEntity & BrandedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Data required to create a customer group.
input CustomerGroupCreateRequest {
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Criteria used when searching for customer groups.
input CustomerGroupSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from customer group query.
type CustomerGroupSearchResults {
    results: [CustomerGroup!]!
    pagination: SearchResultsPagination!
}

# Represents a type of relation between a customer and a customer group.
type CustomerGroupRelationshipType implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    metadata: String
}

# Data required to create a customer group relationship type.
input CustomerGroupRelationshipTypeCreateRequest {
    token: String!
    name: String
    description: String
    metadata: String
}

# Criteria used when searching for customer group relationship types.
input CustomerGroupRelationshipTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from customer group relationship type query.
type CustomerGroupRelationshipTypeSearchResults {
    results: [CustomerGroupRelationshipType!]!
    pagination: SearchResultsPagination!
}

# Represents a relationship between a customer and a group.
type CustomerGroupRelationship implements Model {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    customerGroup: CustomerGroup!
    customer: Customer!
    relationshipType: CustomerGroupRelationshipType!
    metadata: String
}

# Data required to create a customer group relationship.
input CustomerGroupRelationshipCreateRequest {
    token: String!
    customerGroup: String!
    customer: String!
    relationshipType: String!
    metadata: String
}

# Criteria used when searching for customer group relationships.
input CustomerGroupRelationshipSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from customer group relationship query.
type CustomerGroupRelationshipSearchResults {
    results: [CustomerGroupRelationship!]!
    pagination: SearchResultsPagination!
}

# Represents a type or class of areas
type AreaType implements Model & TokenReference & NamedEntity & BrandedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Data required to create an area type.
input AreaTypeCreateRequest {
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Criteria used when searching for area types.
input AreaTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from area types query.
type AreaTypeSearchResults {
    results: [AreaType!]!
    pagination: SearchResultsPagination!
}

# Represents an area instance
type Area implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    areaType: AreaType!
    metadata: String
}

# Data required to create an area.
input AreaCreateRequest {
    token: String!
    name: String
    description: String
    areaTypeToken: String!
    metadata: String
}

# Criteria used when searching for areas.
input AreaSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
    areaTypeToken: String
}

# Search results returned from areas query.
type AreaSearchResults {
    results: [Area!]!
    pagination: SearchResultsPagination!
}

# Represents a type of relation between areas.
type AreaRelationshipType implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    metadata: String
}

# Data required to create an area relationship type.
input AreaRelationshipTypeCreateRequest {
    token: String!
    name: String
    description: String
    metadata: String
}

# Criteria used when searching for area relationship types.
input AreaRelationshipTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from area relationship types query.
type AreaRelationshipTypeSearchResults {
    results: [AreaRelationshipType!]!
    pagination: SearchResultsPagination!
}

# Represents a relationship between areas.
type AreaRelationship implements Model {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    sourceArea: Area!
    targetArea: Area!
    relationshipType: AreaRelationshipType!
    metadata: String
}

# Data required to create an area relationship.
input AreaRelationshipCreateRequest {
    token: String!
    sourceArea: String!
    targetArea: String!
    relationshipType: String!
    metadata: String
}

# Criteria used when searching for area relationships.
input AreaRelationshipSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from area relationships query.
type AreaRelationshipSearchResults {
    results: [AreaRelationship!]!
    pagination: SearchResultsPagination!
}

# Represents a group of related areas.
type AreaGroup implements Model & TokenReference & NamedEntity & BrandedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Data required to create an area group.
input AreaGroupCreateRequest {
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Criteria used when searching for area groups.
input AreaGroupSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from area groups query.
type AreaGroupSearchResults {
    results: [AreaGroup!]!
    pagination: SearchResultsPagination!
}

# Represents a type of relation between an area and an area group.
type AreaGroupRelationshipType implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    metadata: String
}

# Data required to create an area group relationship type.
input AreaGroupRelationshipTypeCreateRequest {
    token: String!
    name: String
    description: String
    metadata: String
}

# Criteria used when searching for area group relationship types.
input AreaGroupRelationshipTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from area group relationship types query.
type AreaGroupRelationshipTypeSearchResults {
    results: [AreaGroupRelationshipType!]!
    pagination: SearchResultsPagination!
}

# Represents a relationship between an area and an area.
type AreaGroupRelationship implements Model {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    areaGroup: AreaGroup!
    area: Area!
    relationshipType: AreaGroupRelationshipType!
    metadata: String
}

# Data required to create an area group relationship.
input AreaGroupRelationshipCreateRequest {
    token: String!
    areaGroup: String!
    area: String!
    relationshipType: String!
    metadata: String
}

# Criteria used when searching for area group relationships.
input AreaGroupRelationshipSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from area group relationships query.
type AreaGroupRelationshipSearchResults {
    results: [AreaGroupRelationship!]!
    pagination: SearchResultsPagination!
}

# Data required to create a device assignment status.
input DeviceAssignmentStatusCreateRequest {
    token: String!
    name: String
    description: String
    metadata: String
}

# Represents a status that may be associated with a device assignment.
type DeviceAssignmentStatus implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    name: String
    description: String
    metadata: String
}

# Criteria used when searching for device assignment statuses.
input DeviceAssignmentStatusSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from device assignment statuses query.
type DeviceAssignmentStatusSearchResults {
    results: [DeviceAssignmentStatus!]!
    pagination: SearchResultsPagination!
}

# Data required to create a device assignment.
input DeviceAssignmentCreateRequest {
    token: String!
    metadata: String
    active: Boolean
    device: String!
    deviceGroup: String
    asset: String
    assetGroup: String
    customer: String
    customerGroup: String
    area: String
    areaGroup: String
    deviceAssignmentStatus: String
}

# Represents a status that may be associated with a device assignment.
type DeviceAssignment implements Model & TokenReference & MetadataEntity {
    id: ID!
    createdAt: String
    updatedAt: String
    deletedAt: String
    token: String!
    metadata: String
    active: Boolean!

    device: Device!
    deviceGroup: DeviceGroup
    asset: Asset
    assetGroup: AssetGroup
    customer: Customer
    customerGroup: CustomerGroup
    area: Area
    areaGroup: AreaGroup
    deviceAssignmentStatus: DeviceAssignmentStatus
}

# Criteria used when searching for device assignments.
input DeviceAssignmentSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from device assignments query.
type DeviceAssignmentSearchResults {
    results: [DeviceAssignment!]!
    pagination: SearchResultsPagination!
}

# Contains queries executed against model.
type Query {
    # Find device types by unique id.
    deviceTypesById(ids: [ID!]!): [DeviceType!]!
    # Find device types by unique token.
    deviceTypesByToken(tokens: [String!]!): [DeviceType!]!
    # List device types that meet criteria.
    deviceTypes(criteria: DeviceTypeSearchCriteria!): DeviceTypeSearchResults!
    # Find devices by unique id.
    devicesById(ids: [ID!]!): [Device!]!
    # Find devices by unique token.
    devicesByToken(tokens: [String!]!): [Device!]!
    # List devices that meet criteria.
    devices(criteria: DeviceSearchCriteria!): DeviceSearchResults!
    # Find device relationship types by unique id.
    deviceRelationshipTypesById(ids: [ID!]!): [DeviceRelationshipType!]!
    # Find device relationship types by unique token.
    deviceRelationshipTypesByToken(tokens: [String!]!): [DeviceRelationshipType!]!
    # List device relationship types that meet criteria.
    deviceRelationshipTypes(criteria: DeviceRelationshipTypeSearchCriteria!): DeviceRelationshipTypeSearchResults!
    # Find device relationships by unique id.
    deviceRelationshipsById(ids: [ID!]!): [DeviceRelationship!]!
    # Find device relationships by unique token.
    deviceRelationshipsByToken(tokens: [String!]!): [DeviceRelationship!]!
    # List device relationships that meet criteria.
    deviceRelationships(criteria: DeviceRelationshipSearchCriteria!): DeviceRelationshipSearchResults!
    # Find device groups by unique id.
    deviceGroupsById(ids: [ID!]!): [DeviceGroup!]!
    # Find device groups by unique token.
    deviceGroupsByToken(tokens: [String!]!): [DeviceGroup!]!
    # List device groups that meet criteria.
    deviceGroups(criteria: DeviceGroupSearchCriteria!): DeviceGroupSearchResults!
    # Find device group relationship types by unique id.
    deviceGroupRelationshipTypesById(ids: [ID!]!): [DeviceGroupRelationshipType!]!
    # Find device group relationship types by unique token.
    deviceGroupRelationshipTypesByToken(tokens: [String!]!): [DeviceGroupRelationshipType!]!
    # List device group relationship types that meet criteria.
    deviceGroupRelationshipTypes(criteria: DeviceGroupRelationshipTypeSearchCriteria!): DeviceGroupRelationshipTypeSearchResults!
    # Find device group relationships by unique id.
    deviceGroupRelationshipsById(ids: [ID!]!): [DeviceGroupRelationship!]!
    # Find device group relationships by unique token.
    deviceGroupRelationshipsByToken(tokens: [String!]!): [DeviceGroupRelationship!]!
    # List device group relationships that meet criteria.
    deviceGroupRelationships(criteria: DeviceGroupRelationshipSearchCriteria!): DeviceGroupRelationshipSearchResults!

    # Find asset types by unique id.
    assetTypesById(ids: [ID!]!): [AssetType!]!
    # Find asset types by unique token.
    assetTypesByToken(tokens: [String!]!): [AssetType!]!
    # List asset types that meet criteria.
    assetTypes(criteria: AssetTypeSearchCriteria!): AssetTypeSearchResults!
    # Find assets by unique id.
    assetsById(ids: [ID!]!): [Asset!]!
    # Find assets by unique token.
    assetsByToken(tokens: [String!]!): [Asset!]!
    # List assets that meet criteria.
    assets(criteria: AssetSearchCriteria!): AssetSearchResults!
    # Find asset relationship types by unique id.
    assetRelationshipTypesById(ids: [ID!]!): [AssetRelationshipType!]!
    # Find asset relationship types by unique token.
    assetRelationshipTypesByToken(tokens: [String!]!): [AssetRelationshipType!]!
    # List asset relationship types that meet criteria.
    assetRelationshipTypes(criteria: AssetRelationshipTypeSearchCriteria!): AssetRelationshipTypeSearchResults!
    # Find asset relationships by unique id.
    assetRelationshipsById(ids: [ID!]!): [AssetRelationship!]!
    # Find an asset relationships by unique token.
    assetRelationshipsByToken(tokens: [String!]!): [AssetRelationship!]!
    # List asset relationships that meet criteria.
    assetRelationships(criteria: AssetRelationshipSearchCriteria!): AssetRelationshipSearchResults!
    # Find asset groups by unique id.
    assetGroupsById(ids: [ID!]!): [AssetGroup!]!
    # Find asset groups by unique token.
    assetGroupsByToken(tokens: [String!]!): [AssetGroup!]!
    # List asset groups that meet criteria.
    assetGroups(criteria: AssetGroupSearchCriteria!): AssetGroupSearchResults!
    # Find asset group relationship types by unique id.
    assetGroupRelationshipTypesById(ids: [ID!]!): [AssetGroupRelationshipType!]!
    # Find asset group relationship types by unique token.
    assetGroupRelationshipTypesByToken(tokens: [String!]!): [AssetGroupRelationshipType!]!
    # List asset group relationship types that meet criteria.
    assetGroupRelationshipTypes(criteria: AssetGroupRelationshipTypeSearchCriteria!): AssetGroupRelationshipTypeSearchResults!
    # Find asset group relationships by unique id.
    assetGroupRelationshipsById(ids: [ID!]!): [AssetGroupRelationship!]!
    # Find asset group relationships type by unique token.
    assetGroupRelationshipsByToken(tokens: [String!]!): [AssetGroupRelationship!]!
    # List asset group relationships that meet criteria.
    assetGroupRelationships(criteria: AssetGroupRelationshipSearchCriteria!): AssetGroupRelationshipSearchResults!

    # Find customer types by unique id.
    customerTypesById(ids: [ID!]!): [CustomerType!]!
    # Find customer types by unique token.
    customerTypesByToken(tokens: [String!]!): [CustomerType!]!
    # List customer types that meet criteria.
    customerTypes(criteria: CustomerTypeSearchCriteria!): CustomerTypeSearchResults!
    # Find customers by unique id.
    customersById(ids: [ID!]!): [Customer!]!
    # Find customers by unique token.
    customersByToken(tokens: [String!]!): [Customer!]!
    # List customers that meet criteria.
    customers(criteria: CustomerSearchCriteria!): CustomerSearchResults!
    # Find customer relationship types by unique id.
    customerRelationshipTypesById(ids: [ID!]!): [CustomerRelationshipType!]!
    # Find customer relationship types by unique token.
    customerRelationshipTypesByToken(tokens: [String!]!): [CustomerRelationshipType!]!
    # List customer relationship types that meet criteria.
    customerRelationshipTypes(criteria: CustomerRelationshipTypeSearchCriteria!): CustomerRelationshipTypeSearchResults!
    # Find customer relationships by unique id.
    customerRelationshipsById(ids: [ID!]!): [CustomerRelationship!]!
    # Find customer relationships by unique token.
    customerRelationshipsByToken(tokens: [String!]!): [CustomerRelationship!]!
    # List customer relationships that meet criteria.
    customerRelationships(criteria: CustomerRelationshipSearchCriteria!): CustomerRelationshipSearchResults!
    # Find customer groups by unique id.
    customerGroupsById(ids: [ID!]!): [CustomerGroup!]!
    # Find customer groups by unique token.
    customerGroupsByToken(tokens: [String!]!): [CustomerGroup!]!
    # List customer groups that meet criteria.
    customerGroups(criteria: CustomerGroupSearchCriteria!): CustomerGroupSearchResults!
    # Find customer group relationship types by unique id.
    customerGroupRelationshipTypesById(ids: [ID!]!): [CustomerGroupRelationshipType!]!
    # Find customer group relationship types by unique token.
    customerGroupRelationshipTypesByToken(tokens: [String!]!): [CustomerGroupRelationshipType!]!
    # List customer group relationship types that meet criteria.
    customerGroupRelationshipTypes(criteria: CustomerGroupRelationshipTypeSearchCriteria!): CustomerGroupRelationshipTypeSearchResults!
    # Find customer group relationship by unique id.
    customerGroupRelationshipsById(ids: [ID!]!): [CustomerGroupRelationship!]!
    # Find customer group relationship by unique token.
    customerGroupRelationshipsByToken(tokens: [String!]!): [CustomerGroupRelationship!]!
    # List customer group relationships that meet criteria.
    customerGroupRelationships(criteria: CustomerGroupRelationshipSearchCriteria!): CustomerGroupRelationshipSearchResults!

    # Find area types by unique id.
    areaTypesById(ids: [ID!]!): [AreaType!]!
    # Find area types by unique token.
    areaTypesByToken(tokens: [String!]!): [AreaType!]!
    # List area types that meet criteria.
    areaTypes(criteria: AreaTypeSearchCriteria!): AreaTypeSearchResults!
    # Find areas by unique id.
    areasById(ids: [ID!]!): [Area!]!
    # Find areas by unique token.
    areasByToken(tokens: [String!]!): [Area!]!
    # List areas that meet criteria.
    areas(criteria: AreaSearchCriteria!): AreaSearchResults!
    # Find area relationship types by unique id.
    areaRelationshipTypesById(ids: [ID!]!): [AreaRelationshipType!]!
    # Find area relationship types by unique token.
    areaRelationshipTypesByToken(tokens: [String!]!): [AreaRelationshipType!]!
    # List area relationship types that meet criteria.
    areaRelationshipTypes(criteria: AreaRelationshipTypeSearchCriteria!): AreaRelationshipTypeSearchResults!
    # Find area relationships by unique id.
    areaRelationshipsById(ids: [ID!]!): [AreaRelationship!]!
    # Find area relationships by unique token.
    areaRelationshipsByToken(tokens: [String!]!): [AreaRelationship!]!
    # List area relationships that meet criteria.
    areaRelationships(criteria: AreaRelationshipSearchCriteria!): AreaRelationshipSearchResults!
    # Find area groups by unique id.
    areaGroupsById(ids: [ID!]!): [AreaGroup!]!
    # Find area groups by unique token.
    areaGroupsByToken(tokens: [String!]!): [AreaGroup!]!
    # List area groups that meet criteria.
    areaGroups(criteria: AreaGroupSearchCriteria!): AreaGroupSearchResults!
    # Find area group relationship types by unique id.
    areaGroupRelationshipTypesById(ids: [ID!]!): [AreaGroupRelationshipType!]!
    # Find area group relationship types by unique token.
    areaGroupRelationshipTypesByToken(tokens: [String!]!): [AreaGroupRelationshipType!]!
    # List area group relationship types that meet criteria.
    areaGroupRelationshipTypes(criteria: AreaGroupRelationshipTypeSearchCriteria!): AreaGroupRelationshipTypeSearchResults!
    # Find area group relationships by unique id.
    areaGroupRelationshipsById(ids: [ID!]!): [AreaGroupRelationship!]!
    # Find area group relationships by unique token.
    areaGroupRelationshipsByToken(tokens: [String!]!): [AreaGroupRelationship!]!
    # List area group relationships that meet criteria.
    areaGroupRelationships(criteria: AreaGroupRelationshipSearchCriteria!): AreaGroupRelationshipSearchResults!

    # Find a device assignment statuses by unique id.
    deviceAssignmentStatusesById(ids: [ID!]!): [DeviceAssignmentStatus!]!
    # Find a device assignment statuses by unique token.
    deviceAssignmentStatusesByToken(tokens: [String!]!): [DeviceAssignmentStatus!]!
    # List device assignment statuses that meet criteria.
    deviceAssignmentStatuses(criteria: DeviceAssignmentStatusSearchCriteria!): DeviceAssignmentStatusSearchResults!
    # Find a device assignments by unique id.
    deviceAssignmentsById(ids: [ID!]!): [DeviceAssignment!]!
    # Find a device assignments by unique token.
    deviceAssignmentsByToken(tokens: [String!]!): [DeviceAssignment!]!
    # List device assignments that meet criteria.
    deviceAssignments(criteria: DeviceAssignmentSearchCriteria!): DeviceAssignmentSearchResults!
    # List all device assignments for device with given id.
    activeDeviceAssignmentsForDevice(id: ID!): [DeviceAssignment!]!
}

# Contains mutations executed against model.
type Mutation {
    # Create a new device type.
    createDeviceType(request: DeviceTypeCreateRequest): DeviceType!
    # Update an existing device type.
    updateDeviceType(token: String!, request: DeviceTypeCreateRequest): DeviceType!
    # Create a new device.
    createDevice(request: DeviceCreateRequest): Device!
    # Update an existing device.
    updateDevice(token: String!, request: DeviceCreateRequest): Device!
    # Create a new device relationship type.
    createDeviceRelationshipType(request: DeviceRelationshipTypeCreateRequest): DeviceRelationshipType!
    # Update an existing device relationship type.
    updateDeviceRelationshipType(token: String!, request: DeviceRelationshipTypeCreateRequest): DeviceRelationshipType!
    # Create a new device relationship.
    createDeviceRelationship(request: DeviceRelationshipCreateRequest): DeviceRelationship!
    # Create a new device group.
    createDeviceGroup(request: DeviceGroupCreateRequest): DeviceGroup!
    # Update an existing device group.
    updateDeviceGroup(token: String!, request: DeviceGroupCreateRequest): DeviceGroup!
    # Create a new device group relationship type.
    createDeviceGroupRelationshipType(request: DeviceGroupRelationshipTypeCreateRequest): DeviceGroupRelationshipType!
    # Update an existing device group relationship type.
    updateDeviceGroupRelationshipType(token: String!, request: DeviceGroupRelationshipTypeCreateRequest): DeviceGroupRelationshipType!
    # Create a new device group relationship.
    createDeviceGroupRelationship(request: DeviceGroupRelationshipCreateRequest): DeviceGroupRelationship!

    # Create a new asset type.
    createAssetType(request: AssetTypeCreateRequest): AssetType!
    # Update an existing asset type.
    updateAssetType(token: String!, request: AssetTypeCreateRequest): AssetType!
    # Create a new asset.
    createAsset(request: AssetCreateRequest): Asset!
    # Update an existing asset.
    updateAsset(token: String!, request: AssetCreateRequest): Asset!
    # Create a new asset relationship type.
    createAssetRelationshipType(request: AssetRelationshipTypeCreateRequest): AssetRelationshipType!
    # Update an existing asset relationship type.
    updateAssetRelationshipType(token: String!, request: AssetRelationshipTypeCreateRequest): AssetRelationshipType!
    # Create a new asset relationship.
    createAssetRelationship(request: AssetRelationshipCreateRequest): AssetRelationship!
    # Create a new asset group.
    createAssetGroup(request: AssetGroupCreateRequest): AssetGroup!
    # Update an existing asset group.
    updateAssetGroup(token: String!, request: AssetGroupCreateRequest): AssetGroup!
    # Create a new asset group relationship type.
    createAssetGroupRelationshipType(request: AssetGroupRelationshipTypeCreateRequest): AssetGroupRelationshipType!
    # Update an existing asset group relationship type.
    updateAssetGroupRelationshipType(token: String!, request: AssetGroupRelationshipTypeCreateRequest): AssetGroupRelationshipType!
    # Create a new asset group relationship.
    createAssetGroupRelationship(request: AssetGroupRelationshipCreateRequest): AssetGroupRelationship!

    # Create a new customer type.
    createCustomerType(request: CustomerTypeCreateRequest): CustomerType!
    # Update an existing customer type.
    updateCustomerType(token: String!, request: CustomerTypeCreateRequest): CustomerType!
    # Create a new customer.
    createCustomer(request: CustomerCreateRequest): Customer!
    # Update an existing customer.
    updateCustomer(token: String!, request: CustomerCreateRequest): Customer!
    # Create a new customer relationship type.
    createCustomerRelationshipType(request: CustomerRelationshipTypeCreateRequest): CustomerRelationshipType!
    # Update an existing customer relationship type.
    updateCustomerRelationshipType(token: String!, request: CustomerRelationshipTypeCreateRequest): CustomerRelationshipType!
    # Create a new customer relationship.
    createCustomerRelationship(request: CustomerRelationshipCreateRequest): CustomerRelationship!
    # Create a new customer group.
    createCustomerGroup(request: CustomerGroupCreateRequest): CustomerGroup!
    # Update an existing customer group.
    updateCustomerGroup(token: String!, request: CustomerGroupCreateRequest): CustomerGroup!
    # Create a new customer group relationship type.
    createCustomerGroupRelationshipType(request: CustomerGroupRelationshipTypeCreateRequest): CustomerGroupRelationshipType!
    # Update an existing customer group relationship type.
    updateCustomerGroupRelationshipType(token: String!, request: CustomerGroupRelationshipTypeCreateRequest): CustomerGroupRelationshipType!
    # Create a new customer group relationship.
    createCustomerGroupRelationship(request: CustomerGroupRelationshipCreateRequest): CustomerGroupRelationship!

    # Create a new area type.
    createAreaType(request: AreaTypeCreateRequest): AreaType!
    # Update an existing area type.
    updateAreaType(token: String!, request: AreaTypeCreateRequest): AreaType!
    # Create a new area.
    createArea(request: AreaCreateRequest): Area!
    # Update an existing area.
    updateArea(token: String!, request: AreaCreateRequest): Area!
    # Create a new area relationship type.
    createAreaRelationshipType(request: AreaRelationshipTypeCreateRequest): AreaRelationshipType!
    # Update an existing area relationship type.
    updateAreaRelationshipType(token: String!, request: AreaRelationshipTypeCreateRequest): AreaRelationshipType!
    # Create a new area relationship.
    createAreaRelationship(request: AreaRelationshipCreateRequest): AreaRelationship!
    # Create a new area group.
    createAreaGroup(request: AreaGroupCreateRequest): AreaGroup!
    # Update an existing area group.
    updateAreaGroup(token: String!, request: AreaGroupCreateRequest): AreaGroup!
    # Create a new area group relationship type.
    createAreaGroupRelationshipType(request: AreaGroupRelationshipTypeCreateRequest): AreaGroupRelationshipType!
    # Update an existing area group relationship type.
    updateAreaGroupRelationshipType(token: String!, request: AreaGroupRelationshipTypeCreateRequest): AreaGroupRelationshipType!
    # Create a new area group relationship.
    createAreaGroupRelationship(request: AreaGroupRelationshipCreateRequest): AreaGroupRelationship!

    # Create a new device assignment status.
    createDeviceAssignmentStatus(request: DeviceAssignmentStatusCreateRequest): DeviceAssignmentStatus!
    # Update an existing device assignment status.
    updateDeviceAssignmentStatus(token: String!, request: DeviceAssignmentStatusCreateRequest): DeviceAssignmentStatus!
    # Create a new device assignment.
    createDeviceAssignment(request: DeviceAssignmentCreateRequest): DeviceAssignment!
    # Update an existing device assignment.
    updateDeviceAssignment(token: String!, request: DeviceAssignmentCreateRequest): DeviceAssignment!
}

schema {
    query: Query
    mutation: Mutation
}
