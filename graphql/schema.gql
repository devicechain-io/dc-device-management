#
# Device Management GraphQL Schema
#

# Represents a type or class of devices
type DeviceType implements Model & TokenReference & NamedEntity & BrandedEntity {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
}

# Data required to create a device type.
input DeviceTypeCreateRequest {
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
}

# Criteria used when searching for device types.
input DeviceTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Represents a device instance
type Device implements Model & TokenReference & NamedEntity {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    token: String!
    name: String
    description: String
    deviceType: DeviceType!
}

# Data required to create a device.
input DeviceCreateRequest {
    token: String!
    name: String
    description: String
    deviceTypeToken: String!
}

# Criteria used when searching for devices.
input DeviceSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
    deviceTypeToken: String
}

# Represents a type of relation between devices.
type DeviceRelationshipType implements Model & TokenReference & NamedEntity {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    token: String!
    name: String
    description: String
}

# Data required to create a device relationship type.
input DeviceRelationshipTypeCreateRequest {
    token: String!
    name: String
    description: String
}

# Criteria used when searching for device relationship types.
input DeviceRelationshipTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Represents a relationship between devices.
type DeviceRelationship implements Model {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    sourceDevice: Device!
    targetDevice: Device!
    relationshipType: DeviceRelationshipType!
}

# Data required to create a device relationship.
input DeviceRelationshipCreateRequest {
    sourceDevice: String!
    targetDevice: String!
    relationshipType: String!
}

# Criteria used when searching for device relationships.
input DeviceRelationshipSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Represents a type or class of assets
type AssetType implements Model & TokenReference & NamedEntity & BrandedEntity {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
}

# Data required to create an asset type.
input AssetTypeCreateRequest {
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
}

# Criteria used when searching for asset types.
input AssetTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Represents an asset instance
type Asset implements Model & TokenReference & NamedEntity {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    token: String!
    name: String
    description: String
    assetType: AssetType!
}

# Data required to create an asset.
input AssetCreateRequest {
    token: String!
    name: String
    description: String
    assetTypeToken: String!
}

# Criteria used when searching for assets.
input AssetSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
    assetTypeToken: String
}

# Represents a type of relation between assets.
type AssetRelationshipType implements Model & TokenReference & NamedEntity {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    token: String!
    name: String
    description: String
}

# Data required to create an asset relationship type.
input AssetRelationshipTypeCreateRequest {
    token: String!
    name: String
    description: String
}

# Criteria used when searching for asset relationship types.
input AssetRelationshipTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Represents a relationship between assets.
type AssetRelationship implements Model {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    sourceAsset: Asset!
    targetAsset: Asset!
    relationshipType: AssetRelationshipType!
}

# Data required to create an asset relationship.
input AssetRelationshipCreateRequest {
    sourceAsset: String!
    targetAsset: String!
    relationshipType: String!
}

# Criteria used when searching for asset relationships.
input AssetRelationshipSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Contains queries executed against model.
type Query {
    # Find a device type by unique id.
    deviceType(id: ID!): DeviceType!
    # Find a device type by unique token.
    deviceTypeByToken(token: String!): DeviceType!
    # List device types that meet criteria.
    deviceTypes(criteria: DeviceTypeSearchCriteria!): [DeviceType!]!
    # Find a device by unique id.
    device(id: ID!): Device!
    # Find a device by unique token.
    deviceByToken(token: String!): Device!
    # List devices that meet criteria.
    devices(criteria: DeviceSearchCriteria!): [Device!]!
    # Find a device relationship type by unique id.
    deviceRelationshipType(id: ID!): DeviceRelationshipType!
    # Find a device relationship type by unique token.
    deviceRelationshipTypeByToken(token: String!): DeviceRelationshipType!
    # List device relationship types that meet criteria.
    deviceRelationshipTypes(criteria: DeviceRelationshipTypeSearchCriteria!): [DeviceRelationshipType!]!
    # Find a device relationship by unique id.
    deviceRelationship(id: ID!): DeviceRelationship!
    # List device relationships that meet criteria.
    deviceRelationships(criteria: DeviceRelationshipSearchCriteria!): [DeviceRelationship!]!

    # Find an asset type by unique id.
    assetType(id: ID!): AssetType!
    # Find an asset type by unique token.
    assetTypeByToken(token: String!): AssetType!
    # List asset types that meet criteria.
    assetTypes(criteria: AssetTypeSearchCriteria!): [AssetType!]!
    # Find an asset by unique id.
    asset(id: ID!): Asset!
    # Find a device by unique token.
    assetByToken(token: String!): Asset!
    # List assets that meet criteria.
    assets(criteria: AssetSearchCriteria!): [Asset!]!
    # Find an asset relationship type by unique id.
    assetRelationshipType(id: ID!): AssetRelationshipType!
    # Find an asset relationship type by unique token.
    assetRelationshipTypeByToken(token: String!): AssetRelationshipType!
    # List asset relationship types that meet criteria.
    assetRelationshipTypes(criteria: AssetRelationshipTypeSearchCriteria!): [AssetRelationshipType!]!
    # Find an asset relationship by unique id.
    assetRelationship(id: ID!): AssetRelationship!
    # List asset relationships that meet criteria.
    assetRelationships(criteria: AssetRelationshipSearchCriteria!): [AssetRelationship!]!
}

# Contains mutations executed against model.
type Mutation {
    # Create a new device type.
    createDeviceType(value: DeviceTypeCreateRequest): DeviceType!
    # Update an existing device type.
    updateDeviceType(token: String!, value: DeviceTypeCreateRequest): DeviceType!
    # Create a new device.
    createDevice(value: DeviceCreateRequest): Device!
    # Update an existing device.
    updateDevice(token: String!, value: DeviceCreateRequest): Device!
    # Create a new device relationship type.
    createDeviceRelationshipType(value: DeviceRelationshipTypeCreateRequest): DeviceRelationshipType!
    # Update an existing device relationship type.
    updateDeviceRelationshipType(token: String!, value: DeviceRelationshipTypeCreateRequest): DeviceRelationshipType!
    # Create a new device relationship.
    createDeviceRelationship(value: DeviceRelationshipCreateRequest): DeviceRelationship!
    # Create a new asset type.
    createAssetType(value: AssetTypeCreateRequest): AssetType!
    # Update an existing asset type.
    updateAssetType(token: String!, value: AssetTypeCreateRequest): AssetType!
    # Create a new asset.
    createAsset(value: AssetCreateRequest): Asset!
    # Update an existing asset.
    updateAsset(token: String!, value: AssetCreateRequest): Asset!
    # Create a new asset relationship type.
    createAssetRelationshipType(value: AssetRelationshipTypeCreateRequest): AssetRelationshipType!
    # Update an existing asset relationship type.
    updateAssetRelationshipType(token: String!, value: AssetRelationshipTypeCreateRequest): AssetRelationshipType!
    # Create a new asset relationship.
    createAssetRelationship(value: AssetRelationshipCreateRequest): AssetRelationship!
}

schema {
    query: Query
    mutation: Mutation
}
