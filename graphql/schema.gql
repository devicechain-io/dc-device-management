#
# Device Management GraphQL Schema
#

# Represents a type or class of devices
type DeviceType implements Model & TokenReference & NamedEntity & BrandedEntity & MetadataEntity {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Data required to create a device type.
input DeviceTypeCreateRequest {
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Criteria used when searching for device types.
input DeviceTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from device type query.
type DeviceTypeSearchResults {
    results: [DeviceType!]!
    pagination: SearchResultsPagination!
}

# Represents a device instance
type Device implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    token: String!
    name: String
    description: String
    deviceType: DeviceType!
    metadata: String
}

# Data required to create a device.
input DeviceCreateRequest {
    token: String!
    name: String
    description: String
    deviceTypeToken: String!
    metadata: String
}

# Criteria used when searching for devices.
input DeviceSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
    deviceTypeToken: String
}

# Search results returned from device query.
type DeviceSearchResults {
    results: [Device!]!
    pagination: SearchResultsPagination!
}

# Represents a type of relation between devices.
type DeviceRelationshipType implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    token: String!
    name: String
    description: String
    metadata: String
}

# Data required to create a device relationship type.
input DeviceRelationshipTypeCreateRequest {
    token: String!
    name: String
    description: String
    metadata: String
}

# Criteria used when searching for device relationship types.
input DeviceRelationshipTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from device relationship type query.
type DeviceRelationshipTypeSearchResults {
    results: [DeviceRelationshipType!]!
    pagination: SearchResultsPagination!
}

# Represents a relationship between devices.
type DeviceRelationship implements Model & MetadataEntity {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    sourceDevice: Device!
    targetDevice: Device!
    relationshipType: DeviceRelationshipType!
    metadata: String
}

# Data required to create a device relationship.
input DeviceRelationshipCreateRequest {
    sourceDevice: String!
    targetDevice: String!
    relationshipType: String!
    metadata: String
}

# Criteria used when searching for device relationships.
input DeviceRelationshipSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from device relationship query.
type DeviceRelationshipSearchResults {
    results: [DeviceRelationship!]!
    pagination: SearchResultsPagination!
}

# Represents a group of related devices.
type DeviceGroup implements Model & TokenReference & NamedEntity & BrandedEntity & MetadataEntity {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Data required to create a device group.
input DeviceGroupCreateRequest {
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Criteria used when searching for device groups.
input DeviceGroupSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from device group query.
type DeviceGroupSearchResults {
    results: [DeviceGroup!]!
    pagination: SearchResultsPagination!
}

# Represents a type of relation between a device and a device group.
type DeviceGroupRelationshipType implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    token: String!
    name: String
    description: String
    metadata: String
}

# Data required to create a device group relationship type.
input DeviceGroupRelationshipTypeCreateRequest {
    token: String!
    name: String
    description: String
    metadata: String
}

# Criteria used when searching for device group relationship types.
input DeviceGroupRelationshipTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from device group relationship type query.
type DeviceGroupRelationshipTypeSearchResults {
    results: [DeviceGroupRelationshipType!]!
    pagination: SearchResultsPagination!
}

# Represents a relationship between a device and a group.
type DeviceGroupRelationship implements Model {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    deviceGroup: DeviceGroup!
    device: Device!
    relationshipType: DeviceGroupRelationshipType!
    metadata: String
}

# Data required to create a device group relationship.
input DeviceGroupRelationshipCreateRequest {
    deviceGroup: String!
    device: String!
    relationshipType: String!
    metadata: String
}

# Criteria used when searching for device group relationships.
input DeviceGroupRelationshipSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from device group relationship query.
type DeviceGroupRelationshipSearchResults {
    results: [DeviceGroupRelationship!]!
    pagination: SearchResultsPagination!
}

# Represents a type or class of assets
type AssetType implements Model & TokenReference & NamedEntity & BrandedEntity & MetadataEntity {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Data required to create an asset type.
input AssetTypeCreateRequest {
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Criteria used when searching for asset types.
input AssetTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from asset types query.
type AssetTypeSearchResults {
    results: [AssetType!]!
    pagination: SearchResultsPagination!
}

# Represents an asset instance
type Asset implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    token: String!
    name: String
    description: String
    assetType: AssetType!
    metadata: String
}

# Data required to create an asset.
input AssetCreateRequest {
    token: String!
    name: String
    description: String
    assetTypeToken: String!
    metadata: String
}

# Criteria used when searching for assets.
input AssetSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
    assetTypeToken: String
}

# Search results returned from assets query.
type AssetSearchResults {
    results: [Asset!]!
    pagination: SearchResultsPagination!
}

# Represents a type of relation between assets.
type AssetRelationshipType implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    token: String!
    name: String
    description: String
    metadata: String
}

# Data required to create an asset relationship type.
input AssetRelationshipTypeCreateRequest {
    token: String!
    name: String
    description: String
    metadata: String
}

# Criteria used when searching for asset relationship types.
input AssetRelationshipTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from asset relationship types query.
type AssetRelationshipTypeSearchResults {
    results: [AssetRelationshipType!]!
    pagination: SearchResultsPagination!
}

# Represents a relationship between assets.
type AssetRelationship implements Model {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    sourceAsset: Asset!
    targetAsset: Asset!
    relationshipType: AssetRelationshipType!
    metadata: String
}

# Data required to create an asset relationship.
input AssetRelationshipCreateRequest {
    sourceAsset: String!
    targetAsset: String!
    relationshipType: String!
    metadata: String
}

# Criteria used when searching for asset relationships.
input AssetRelationshipSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from asset relationships query.
type AssetRelationshipSearchResults {
    results: [AssetRelationship!]!
    pagination: SearchResultsPagination!
}

# Represents a group of related assets.
type AssetGroup implements Model & TokenReference & NamedEntity & BrandedEntity & MetadataEntity {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Data required to create an asset group.
input AssetGroupCreateRequest {
    token: String!
    name: String
    description: String
    imageUrl: String
    icon: String
    backgroundColor: String
    foregroundColor: String
    borderColor: String
    metadata: String
}

# Criteria used when searching for asset groups.
input AssetGroupSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from asset groups query.
type AssetGroupSearchResults {
    results: [AssetGroup!]!
    pagination: SearchResultsPagination!
}

# Represents a type of relation between an asset and an asset group.
type AssetGroupRelationshipType implements Model & TokenReference & NamedEntity & MetadataEntity {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    token: String!
    name: String
    description: String
    metadata: String
}

# Data required to create an asset group relationship type.
input AssetGroupRelationshipTypeCreateRequest {
    token: String!
    name: String
    description: String
    metadata: String
}

# Criteria used when searching for asset group relationship types.
input AssetGroupRelationshipTypeSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from asset group relationship types query.
type AssetGroupRelationshipTypeSearchResults {
    results: [AssetGroupRelationshipType!]!
    pagination: SearchResultsPagination!
}

# Represents a relationship between an asset and an asset.
type AssetGroupRelationship implements Model {
    id: ID!
    created_at: String
    updated_at: String
    deleted_at: String
    assetGroup: AssetGroup!
    asset: Asset!
    relationshipType: AssetGroupRelationshipType!
    metadata: String
}

# Data required to create an asset group relationship.
input AssetGroupRelationshipCreateRequest {
    assetGroup: String!
    asset: String!
    relationshipType: String!
    metadata: String
}

# Criteria used when searching for asset group relationships.
input AssetGroupRelationshipSearchCriteria {
    pageNumber: Int!
    pageSize: Int!
}

# Search results returned from asset group relationships query.
type AssetGroupRelationshipSearchResults {
    results: [AssetGroupRelationship!]!
    pagination: SearchResultsPagination!
}

# Contains queries executed against model.
type Query {
    # Find a device type by unique id.
    deviceType(id: ID!): DeviceType!
    # Find a device type by unique token.
    deviceTypeByToken(token: String!): DeviceType!
    # List device types that meet criteria.
    deviceTypes(criteria: DeviceTypeSearchCriteria!): DeviceTypeSearchResults!
    # Find a device by unique id.
    device(id: ID!): Device!
    # Find a device by unique token.
    deviceByToken(token: String!): Device!
    # List devices that meet criteria.
    devices(criteria: DeviceSearchCriteria!): DeviceSearchResults!
    # Find a device relationship type by unique id.
    deviceRelationshipType(id: ID!): DeviceRelationshipType!
    # Find a device relationship type by unique token.
    deviceRelationshipTypeByToken(token: String!): DeviceRelationshipType!
    # List device relationship types that meet criteria.
    deviceRelationshipTypes(criteria: DeviceRelationshipTypeSearchCriteria!): DeviceRelationshipTypeSearchResults!
    # Find a device relationship by unique id.
    deviceRelationship(id: ID!): DeviceRelationship!
    # List device relationships that meet criteria.
    deviceRelationships(criteria: DeviceRelationshipSearchCriteria!): DeviceRelationshipSearchResults!
    # Find a device group by unique id.
    deviceGroup(id: ID!): DeviceGroup!
    # Find a device group by unique token.
    deviceGroupByToken(token: String!): DeviceGroup!
    # List device groups that meet criteria.
    deviceGroups(criteria: DeviceGroupSearchCriteria!): DeviceGroupSearchResults!
    # Find a device group relationship type by unique id.
    deviceGroupRelationshipType(id: ID!): DeviceGroupRelationshipType!
    # Find a device group relationship type by unique id.
    deviceGroupRelationshipTypeByToken(token: String!): DeviceGroupRelationshipType!
    # List device group relationship types that meet criteria.
    deviceGroupRelationshipTypes(criteria: DeviceGroupRelationshipTypeSearchCriteria!): DeviceGroupRelationshipTypeSearchResults!
    # Find a device group relationship by unique id.
    deviceGroupRelationship(id: ID!): DeviceGroupRelationship!
    # List device group relationships that meet criteria.
    deviceGroupRelationships(criteria: DeviceGroupRelationshipSearchCriteria!): DeviceGroupRelationshipSearchResults!

    # Find an asset type by unique id.
    assetType(id: ID!): AssetType!
    # Find an asset type by unique token.
    assetTypeByToken(token: String!): AssetType!
    # List asset types that meet criteria.
    assetTypes(criteria: AssetTypeSearchCriteria!): AssetTypeSearchResults!
    # Find an asset by unique id.
    asset(id: ID!): Asset!
    # Find a device by unique token.
    assetByToken(token: String!): Asset!
    # List assets that meet criteria.
    assets(criteria: AssetSearchCriteria!): AssetSearchResults!
    # Find an asset relationship type by unique id.
    assetRelationshipType(id: ID!): AssetRelationshipType!
    # Find an asset relationship type by unique token.
    assetRelationshipTypeByToken(token: String!): AssetRelationshipType!
    # List asset relationship types that meet criteria.
    assetRelationshipTypes(criteria: AssetRelationshipTypeSearchCriteria!): AssetRelationshipTypeSearchResults!
    # Find an asset relationship by unique id.
    assetRelationship(id: ID!): AssetRelationship!
    # List asset relationships that meet criteria.
    assetRelationships(criteria: AssetRelationshipSearchCriteria!): AssetRelationshipSearchResults!
    # Find an asset group by unique id.
    assetGroup(id: ID!): AssetGroup!
    # Find an asset group by unique token.
    assetGroupByToken(token: String!): AssetGroup!
    # List asset groups that meet criteria.
    assetGroups(criteria: AssetGroupSearchCriteria!): AssetGroupSearchResults!
    # Find an asset group relationship type by unique id.
    assetGroupRelationshipType(id: ID!): AssetGroupRelationshipType!
    # Find an asset group relationship type by unique id.
    assetGroupRelationshipTypeByToken(token: String!): AssetGroupRelationshipType!
    # List asset group relationship types that meet criteria.
    assetGroupRelationshipTypes(criteria: AssetGroupRelationshipTypeSearchCriteria!): AssetGroupRelationshipTypeSearchResults!
    # Find an asset group relationship by unique id.
    assetGroupRelationship(id: ID!): AssetGroupRelationship!
    # List asset group relationships that meet criteria.
    assetGroupRelationships(criteria: AssetGroupRelationshipSearchCriteria!): AssetGroupRelationshipSearchResults!
}

# Contains mutations executed against model.
type Mutation {
    # Create a new device type.
    createDeviceType(request: DeviceTypeCreateRequest): DeviceType!
    # Update an existing device type.
    updateDeviceType(token: String!, request: DeviceTypeCreateRequest): DeviceType!
    # Create a new device.
    createDevice(request: DeviceCreateRequest): Device!
    # Update an existing device.
    updateDevice(token: String!, request: DeviceCreateRequest): Device!
    # Create a new device relationship type.
    createDeviceRelationshipType(request: DeviceRelationshipTypeCreateRequest): DeviceRelationshipType!
    # Update an existing device relationship type.
    updateDeviceRelationshipType(token: String!, request: DeviceRelationshipTypeCreateRequest): DeviceRelationshipType!
    # Create a new device relationship.
    createDeviceRelationship(request: DeviceRelationshipCreateRequest): DeviceRelationship!
    # Create a new device group.
    createDeviceGroup(request: DeviceGroupCreateRequest): DeviceGroup!
    # Update an existing device group.
    updateDeviceGroup(token: String!, request: DeviceGroupCreateRequest): DeviceGroup!
    # Create a new device group relationship type.
    createDeviceGroupRelationshipType(request: DeviceGroupRelationshipTypeCreateRequest): DeviceGroupRelationshipType!
    # Update an existing device group relationship type.
    updateDeviceGroupRelationshipType(token: String!, request: DeviceGroupRelationshipTypeCreateRequest): DeviceGroupRelationshipType!
    # Create a new device group relationship.
    createDeviceGroupRelationship(request: DeviceGroupRelationshipCreateRequest): DeviceGroupRelationship!

    # Create a new asset type.
    createAssetType(request: AssetTypeCreateRequest): AssetType!
    # Update an existing asset type.
    updateAssetType(token: String!, request: AssetTypeCreateRequest): AssetType!
    # Create a new asset.
    createAsset(request: AssetCreateRequest): Asset!
    # Update an existing asset.
    updateAsset(token: String!, request: AssetCreateRequest): Asset!
    # Create a new asset relationship type.
    createAssetRelationshipType(request: AssetRelationshipTypeCreateRequest): AssetRelationshipType!
    # Update an existing asset relationship type.
    updateAssetRelationshipType(token: String!, request: AssetRelationshipTypeCreateRequest): AssetRelationshipType!
    # Create a new asset relationship.
    createAssetRelationship(request: AssetRelationshipCreateRequest): AssetRelationship!
    # Create a new asset group.
    createAssetGroup(request: AssetGroupCreateRequest): AssetGroup!
    # Update an existing asset group.
    updateAssetGroup(token: String!, request: AssetGroupCreateRequest): AssetGroup!
    # Create a new asset group relationship type.
    createAssetGroupRelationshipType(request: AssetGroupRelationshipTypeCreateRequest): AssetGroupRelationshipType!
    # Update an existing asset group relationship type.
    updateAssetGroupRelationshipType(token: String!, request: AssetGroupRelationshipTypeCreateRequest): AssetGroupRelationshipType!
    # Create a new asset group relationship.
    createAssetGroupRelationship(request: AssetGroupRelationshipCreateRequest): AssetGroupRelationship!
}

schema {
    query: Query
    mutation: Mutation
}
